declare const useDragDrop: ({ onDragStart, onDragEnter, onDragOver, onDragLeave, onDragEnd, onDrop, effectAllowed, dropEffect, ignoreChildEnterLeave, ignoreSelf }: {
    /** when drag start */
    onDragStart?: ((source: Element) => void) | undefined;
    /** drag enter the droppable element */
    onDragEnter?: ((source: Element, target: Element) => void) | undefined;
    /** drag over the droppable element, frequent trigger */
    onDragOver?: ((source: Element, target: Element) => void) | undefined;
    /** drag leave the droppable element  */
    onDragLeave?: ((source: Element, target: Element) => void) | undefined;
    /** drop on a droppable element */
    onDrop?: ((source: Element, target: Element) => void) | undefined;
    /** release drag or press esc or drop on a invalid element */
    onDragEnd?: ((source: Element) => void) | undefined;
    /** set the effectAllowed when dragStart */
    effectAllowed?: "link" | "all" | "none" | "copy" | "move" | "copyLink" | "copyMove" | "linkMove" | "uninitialized" | undefined;
    /** set dropEffect when dragOver */
    dropEffect?: "link" | "none" | "copy" | "move" | undefined;
    /** don't call enter or leave when enter a child element of current dragEnter element */
    ignoreChildEnterLeave?: boolean | undefined;
    /** ignore dragOver, dragOver, dragLeave, drop events on the dragged element */
    ignoreSelf?: boolean | undefined;
}) => ({
    draggable: boolean;
    onDragStart: (e: any) => void;
    onDragEnd: (e: any) => void;
} | {
    onDragEnter: (e: any) => void;
    onDragOver: (e: any) => void;
    onDragLeave: (e: any) => void;
    onDrop: (e: any) => void;
})[];
export default useDragDrop;
