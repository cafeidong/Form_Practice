"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _date = require("../util/date");

var _CalendarContext = _interopRequireWildcard(require("../CalendarContext"));

var _classnames = _interopRequireDefault(require("../util/classnames"));

var _TBody = _interopRequireDefault(require("./TBody"));

var _useCls = _interopRequireDefault(require("../useCls"));

var _getChangedValue = _interopRequireDefault(require("./getChangedValue"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var C_COL = 3;
var C_ROW = 4;
var defaultMonths = _CalendarContext.DefaultContext.locale.months;

var MonthPanel = function MonthPanel(_ref) {
  var now = _ref.now,
      value = _ref.value,
      onChange = _ref.onChange,
      rangeValue = _ref.rangeValue,
      current = _ref.current,
      disabledMonth = _ref.disabledMonth;
  var valueYear = (0, _react.useMemo)(function () {
    return value === null || value === void 0 ? void 0 : value.getFullYear();
  }, [value]);
  var valueMonth = (0, _react.useMemo)(function () {
    return value === null || value === void 0 ? void 0 : value.getMonth();
  }, [value]);
  var currentYear = (0, _react.useMemo)(function () {
    return current === null || current === void 0 ? void 0 : current.getFullYear();
  }, [current]);
  var nowYear = (0, _react.useMemo)(function () {
    return now === null || now === void 0 ? void 0 : now.getFullYear();
  }, [now]);
  var nowMonth = (0, _react.useMemo)(function () {
    return now === null || now === void 0 ? void 0 : now.getMonth();
  }, [now]);

  var _useContext = (0, _react.useContext)(_CalendarContext.default),
      locale = _useContext.locale;

  var cls = (0, _useCls.default)();
  var months = (locale === null || locale === void 0 ? void 0 : locale.months) || defaultMonths; // use ref to reduce reRender

  var currentRef = (0, _react.useRef)(current);
  var valueRef = (0, _react.useRef)(value);
  (0, _react.useEffect)(function () {
    currentRef.current = current;
    valueRef.current = value;
  }, [current, value]);
  var cells = (0, _react.useMemo)(function () {
    var count = C_COL * C_ROW;
    var cells = [];

    for (var i = 0; i < count; i++) {
      var active = currentYear === valueYear && valueMonth === i;
      var isNow = currentYear === nowYear && nowMonth === i;
      var disabled = disabledMonth === null || disabledMonth === void 0 ? void 0 : disabledMonth((0, _date.set)(current, i, 'month'), value);
      var className = (0, _classnames.default)(active && cls.active, isNow && cls.now, disabled && cls.disabled);

      if (rangeValue) {
        var t = (0, _date.set)(current, i, 'month');
        var rangeStart = rangeValue === null || rangeValue === void 0 ? void 0 : rangeValue[0];
        var rangeEnd = rangeValue === null || rangeValue === void 0 ? void 0 : rangeValue[1];
        var startOrEndTag = false;
        var tString = (0, _date.format)(t, 'YYYYMM');

        if (rangeStart) {
          var rangeStartString = (0, _date.format)(rangeStart, 'YYYYMM');

          if (tString === rangeStartString) {
            className = (0, _classnames.default)(className, cls.rangeFirst);
            startOrEndTag = true;
          }
        }

        if (rangeEnd) {
          var rangeEndString = (0, _date.format)(rangeEnd, 'YYYYMM');

          if (tString === rangeEndString) {
            className = (0, _classnames.default)(className, cls.rangeLast);
            startOrEndTag = true;
          }
        }

        if (startOrEndTag && (!rangeStart || !rangeEnd)) {
          className = (0, _classnames.default)(className, cls.rangeUnclosed);
        }

        if (!startOrEndTag && rangeStart && rangeEnd && +rangeStart <= +rangeEnd) {
          var tTS = +t;

          if (tTS > +rangeStart && tTS < +rangeEnd) {
            className = (0, _classnames.default)(className, cls.rangeMiddle);
          }
        }
      }

      var cellInfo = {
        children: months[i],
        disabled: disabled,
        value: {
          year: currentYear,
          month: i
        },
        className: className
      };
      cells.push(cellInfo);
    }

    return cells;
  }, [currentYear, valueYear, valueMonth, nowYear, nowMonth, disabledMonth, current, value, rangeValue, months, cls]);
  var onMonthClick = (0, _react.useCallback)(function (index) {
    var cellInfo = cells[index];
    if (cellInfo.disabled) return;
    var changedValue = (0, _getChangedValue.default)(cellInfo.value, currentRef.current, valueRef.current);
    onChange(changedValue);
  }, [cells, onChange]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: cls.table
  }, /*#__PURE__*/_react.default.createElement(_TBody.default, {
    cells: cells,
    onCellClick: onMonthClick,
    col: C_COL,
    row: C_ROW,
    mode: "month"
  }));
};

var _default = /*#__PURE__*/(0, _react.memo)(MonthPanel);

exports.default = _default;