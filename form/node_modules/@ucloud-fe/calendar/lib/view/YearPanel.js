"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _CalendarContext = _interopRequireDefault(require("../CalendarContext"));

var _useCls = _interopRequireDefault(require("../useCls"));

var _classnames = _interopRequireDefault(require("../util/classnames"));

var _date = require("../util/date");

var _TBody = _interopRequireDefault(require("./TBody"));

var _getChangedValue = _interopRequireDefault(require("./getChangedValue"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var C_COL = 3;
var C_ROW = 4;

var YearPanel = function YearPanel(_ref) {
  var now = _ref.now,
      value = _ref.value,
      onChange = _ref.onChange,
      rangeValue = _ref.rangeValue,
      current = _ref.current,
      onCurrentChange = _ref.onCurrentChange,
      disabledYear = _ref.disabledYear;
  var baseYear = (0, _react.useMemo)(function () {
    return (current.getFullYear() / 10 | 0) * 10;
  }, [current]);
  var valueYear = (0, _react.useMemo)(function () {
    return value === null || value === void 0 ? void 0 : value.getFullYear();
  }, [value]);
  var nowYear = (0, _react.useMemo)(function () {
    return now === null || now === void 0 ? void 0 : now.getFullYear();
  }, [now]);

  var _useContext = (0, _react.useContext)(_CalendarContext.default),
      onlyValidYear = _useContext.onlyValidYear,
      onChangeWhenPrevNextClick = _useContext.onChangeWhenPrevNextClick,
      disabledPrevNextClickWhenDisabled = _useContext.disabledPrevNextClickWhenDisabled;

  var cls = (0, _useCls.default)(); // use ref to reduce reRender

  var currentRef = (0, _react.useRef)(current);
  var valueRef = (0, _react.useRef)(value);
  (0, _react.useEffect)(function () {
    currentRef.current = current;
    valueRef.current = value;
  }, [current, value]);
  var cells = (0, _react.useMemo)(function () {
    var cells = [];
    var start = onlyValidYear ? 0 : -1;
    var end = (onlyValidYear ? 10 : C_COL * C_ROW) + start;

    for (var i = start; i < end; i++) {
      var year = baseYear + i;
      var active = valueYear === year;
      var isCurrent = i < 0 ? 'prev' : i > 9 ? 'next' : 'current';
      var isNow = year === nowYear;
      var disabled = disabledYear === null || disabledYear === void 0 ? void 0 : disabledYear((0, _date.set)(current, year, 'year'), value);
      var className = (0, _classnames.default)(active && cls.active, isNow && cls.now, disabled && cls.disabled, isCurrent === 'prev' && cls.prev, isCurrent === 'next' && cls.next);

      if (rangeValue) {
        var t = (0, _date.set)(current, year, 'year');
        var rangeStart = rangeValue === null || rangeValue === void 0 ? void 0 : rangeValue[0];
        var rangeEnd = rangeValue === null || rangeValue === void 0 ? void 0 : rangeValue[1];
        var startOrEndTag = false;
        var tString = (0, _date.format)(t, 'YYYY');

        if (rangeStart) {
          var rangeStartString = (0, _date.format)(rangeStart, 'YYYY');

          if (tString === rangeStartString) {
            className = (0, _classnames.default)(className, cls.rangeFirst);
            startOrEndTag = true;
          }
        }

        if (rangeEnd) {
          var rangeEndString = (0, _date.format)(rangeEnd, 'YYYY');

          if (tString === rangeEndString) {
            className = (0, _classnames.default)(className, cls.rangeLast);
            startOrEndTag = true;
          }
        }

        if (!startOrEndTag && rangeStart && rangeEnd && +rangeStart <= +rangeEnd) {
          var tTS = +t;

          if (tTS > +rangeStart && tTS < +rangeEnd) {
            className = (0, _classnames.default)(className, cls.rangeMiddle);
          }
        }
      }

      var cellInfo = {
        children: year,
        current: isCurrent,
        disabled: disabled,
        year: year,
        className: className
      };
      cells.push(cellInfo);
    }

    return cells;
  }, [onlyValidYear, baseYear, valueYear, nowYear, disabledYear, current, value, rangeValue, cls]);
  var onYearClick = (0, _react.useCallback)(function (index) {
    var cellInfo = cells[index];
    if (!cellInfo) return;
    if (cellInfo.disabled && disabledPrevNextClickWhenDisabled) return;

    if (cellInfo.current === 'prev') {
      onCurrentChange((0, _date.set)(current, baseYear - 10, 'year'));
    } else if (cellInfo.current === 'next') {
      onCurrentChange((0, _date.set)(current, baseYear + 10, 'year'));
    }

    if (cellInfo.disabled) return;

    if (cellInfo.current === 'current' || onChangeWhenPrevNextClick) {
      var changedValue = (0, _getChangedValue.default)({
        year: cellInfo.year
      }, currentRef.current, valueRef.current);
      onChange(changedValue);
    }
  }, [baseYear, cells, current, disabledPrevNextClickWhenDisabled, onChange, onChangeWhenPrevNextClick, onCurrentChange]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: cls.table
  }, /*#__PURE__*/_react.default.createElement(_TBody.default, {
    cells: cells,
    onCellClick: onYearClick,
    col: C_COL,
    row: C_ROW,
    mode: 'year'
  }));
};

var _default = /*#__PURE__*/(0, _react.memo)(YearPanel);

exports.default = _default;