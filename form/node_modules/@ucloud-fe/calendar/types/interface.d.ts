import { HTMLAttributes, ReactNode } from 'react';
import { Override } from './types';
export declare type TDate = number | Date | {
    valueOf(): number;
};
export declare type SharedCalendarProps = Override<HTMLAttributes<HTMLDivElement>, {
    value?: TDate | null;
    defaultValue?: TDate | null;
    onChange?: (v: Date) => void;
    rangeValue?: [TDate | null, TDate | null];
    current?: TDate;
    defaultCurrent?: TDate;
    onCurrentChange?: (v: Date) => void;
    now?: TDate | null;
    sidebar?: ReactNode;
    onModeChange?: (mode: Mode) => void;
}>;
export declare type DisabledFunc = (t: TDate, value?: TDate) => boolean;
export declare type Mode = 'date' | 'month' | 'year' | 'decade';
export declare type HeaderButtonType = 'prevMonth' | 'nextMonth' | 'prevYear' | 'nextYear' | 'prevDecade' | 'nextDecade' | 'prevCentury' | 'nextCentury';
export declare type HeaderSwitcherType = 'date-month' | 'date-year' | 'month' | 'year' | 'decade';
export interface CalendarComponents {
    Cell?: React.ComponentType<HTMLAttributes<any> & {
        mode: Mode;
        disabled?: boolean;
        value?: CellValue<Mode>;
    }>;
    HeaderButton?: React.ComponentType<HTMLAttributes<any> & {
        mode: Mode;
        type: HeaderButtonType;
    }>;
    HeaderSwitcher?: React.ComponentType<HTMLAttributes<any> & {
        mode: Mode;
        type: HeaderSwitcherType;
    }>;
}
export interface DateCellValue {
    date: number;
    month: number;
    year: number;
}
export interface MonthCellValue {
    month: number;
    year: number;
}
export interface YearCellValue {
    year: number;
}
export interface DecadeCellValue {
    year: number;
}
export declare type CellValue<T extends Mode> = T extends 'date' ? DateCellValue : T extends 'month' ? MonthCellValue : T extends 'year' ? YearCellValue : T extends 'decade' ? DecadeCellValue : DateCellValue | MonthCellValue | YearCellValue | DecadeCellValue;
