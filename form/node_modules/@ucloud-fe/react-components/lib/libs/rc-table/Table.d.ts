export default Table;
declare class Table extends React.Component<any, any, any> {
    static propTypes: any;
    static childContextTypes: {
        table: PropTypes.Requireable<any>;
        components: PropTypes.Requireable<any>;
    };
    static defaultProps: {
        data: never[];
        useFixedHeader: boolean;
        rowKey: string;
        rowClassName: () => string;
        onRow(): void;
        onHeaderRow(): void;
        prefixCls: string;
        bodyStyle: {};
        style: {};
        showHeader: boolean;
        scroll: {};
        rowRef: () => null;
        emptyText: () => string;
    };
    static getDerivedStateFromProps(nextProps: any, prevState: any): {
        columns: any;
    } | null;
    constructor(props: any);
    columnManager: ColumnManager;
    store: any;
    debouncedWindowResize: {
        (...args: any[]): void;
        cancel(): void;
    };
    state: {};
    getChildContext(): {
        table: {
            props: Readonly<any> & Readonly<{
                children?: React.ReactNode;
            }>;
            columnManager: ColumnManager;
            saveRef: (name: any) => (node: any) => void;
            components: {
                table: any;
                header: {
                    wrapper: any;
                    row: any;
                    cell: any;
                };
                body: {
                    wrapper: any;
                    row: any;
                    cell: any;
                };
            };
        };
    };
    componentDidUpdate(prevProps: any, prevState: any): void;
    componentWillUnmount(): void;
    componentDidMount(): void;
    getRowKey: (record: any, index: any) => any;
    setScrollPosition(position: any): void;
    scrollPosition: any;
    setScrollPositionClassName(): void;
    handleWindowResize: () => void;
    resetScrollX(): void;
    hasScrollX(): boolean;
    handleBodyScrollLeft: (e: any) => void;
    lastScrollLeft: any;
    handleBodyScroll: (e: any) => void;
    saveRef: (name: any) => (node: any) => void;
    renderMainTable(): (JSX.Element | JSX.Element[] | null)[];
    renderTable(options: any): JSX.Element[];
    renderTitle(): JSX.Element | null;
    renderFooter(): JSX.Element | null;
    renderEmptyText(): JSX.Element | null;
    useFixedHeader: () => any;
    render(): JSX.Element;
    expander: any;
}
import React from "react";
import ColumnManager from "./ColumnManager";
import PropTypes from "prop-types";
