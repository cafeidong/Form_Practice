"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SWrap = exports.prefixCls = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _newArrowCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/newArrowCheck"));

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _core = require("@emotion/core");

var _config = _interopRequireDefault(require("../../../config"));

var _style = require("../../../style");

var _this = void 0,
    _templateObject;

var _prefixCls = _config.default.prefixCls;
var prefixCls = _prefixCls + '-tabs';
/* stylelint-disable no-descending-specificity */

exports.prefixCls = prefixCls;
var SWrap = (0, _style.sWrap)({
  className: function className(_ref) {
    (0, _newArrowCheck2.default)(this, _this);
    var styleType = _ref.styleType;
    return "".concat(prefixCls, "-styletype-").concat(styleType);
  }.bind(void 0)
})((0, _styledBase.default)("div", {
  target: "eetuf650",
  label: "SWrap"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var DT = props.theme.designTokens,
      tabBarPosition = props.tabBarPosition,
      styleType = props.styleType,
      size = props.size;
  var padding = {
    sm: '6px 10px',
    md: '8px 16px',
    lg: '8px 16px'
  }[size];
  var lineHeight = {
    sm: '18px',
    md: '20px',
    lg: '22px'
  }[size];
  var fontSize = {
    sm: '12px',
    md: '14px',
    lg: '16px'
  }[size];
  var fontWeight = {
    sm: 'normal',
    md: 'normal',
    lg: 'bold'
  }[size];
  return /*#__PURE__*/(0, _core.css)("overflow:hidden;", _style.clearFixMixin, ";.", prefixCls, "{&-bar{outline:none;position:relative;}&-tabpane{width:100%;height:100%;flex-shrink:0;box-sizing:border-box;&-inactive{display:none;}}&-tab{color:", DT.T_COLOR_TEXT_DEFAULT_LIGHT, ";border:1px solid transparent;border-radius:2px 2px 0 0;box-sizing:border-box;cursor:pointer;", (0, _core.css)(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2.default)(["\n            padding: ", ";\n            line-height: ", ";\n            font-size: ", ";\n            font-weight: ", ";\n        "])), padding, lineHeight, fontSize, fontWeight), "}&-nav{display:inline-block;white-space:nowrap;position:relative;}&-nav-animated{transition:transform 0.2s cubic-bezier(0.35,0,0.25,1);}&-nav-wrap{overflow:hidden;height:100%;}&-nav-container{position:relative;height:100%;box-sizing:border-box;}&-tab-prev,&-tab-next{display:none;position:absolute;font-size:16px;line-height:20px;height:20px;width:20px;text-align:center;cursor:pointer;fill:currentcolor;}&-tab-btn-disabled{pointer-events:none;color:", DT.T_COLOR_TEXT_DISABLED, ";}&-tab-prev.", prefixCls, "-tab-arrow-show,&-tab-next.", prefixCls, "-tab-arrow-show{display:flex;justify-content:center;align-items:center;}&-tab-disabled,&-tab-disabled:hover{cursor:default;color:", DT.T_COLOR_TEXT_DISABLED, ";}&-styletype-default-bar{.", prefixCls, "{&-ink-bar{display:none !important;}&-tab:hover{background:", DT.T_TABS_DEFAULT_COLOR_BG_HOVER, ";border-color:", DT.T_TABS_DEFAULT_COLOR_LINE_HOVER, ";}&-tab-disabled:hover{background:none;border-color:transparent;}&-tab-active,&-tab-active:hover{color:", DT.T_COLOR_TEXT_PRIMARY_DEFAULT, ";border-color:", DT.T_COLOR_LINE_DEFAULT_LIGHT, ";background:", DT.T_TABS_DEFAULT_COLOR_BG_DEFAULT, ";}}}&-styletype-ink-bar{.", prefixCls, "{&-ink-bar{width:2px;height:2px;position:absolute;transition:transform 0.3s ease-out 0s;background:", DT.T_COLOR_LINE_PRIMARY_DEFAULT, ";}&-tab{border:1px solid transparent !important;}&-tab:hover{color:", DT.T_COLOR_TEXT_PRIMARY_DEFAULT, ";}&-tab-disabled:hover{color:", DT.T_COLOR_TEXT_DISABLED, ";}&-tab-active,&-tab-active:hover{color:", DT.T_COLOR_TEXT_PRIMARY_DEFAULT, ";}}}&-styletype-pure-bar{.", prefixCls, "{&-ink-bar{display:none !important;}}.", prefixCls, "-tab{border:none;border-radius:0;padding:0;line-height:normal;}}&-srcoll-extra-warrper{flex-direction:column;height:100%;overflow:hidden;}&-srcoll-box{overflow:auto;}&-extra-wapper{white-space:nowrap;font-size:", DT.T_TYPO_FONT_SIZE_1, ";font-weight:", DT.T_TYPO_FONT_WEIGHT_NORMAL, ";display:none;align-items:center;}&-extra-show{display:flex;}}&.", prefixCls, "{", tabBarPosition === 'top' && /*#__PURE__*/(0, _core.css)(".", prefixCls, "-top-bar{::before{content:' ';position:absolute;bottom:0;width:100%;height:1px;background:", DT.T_COLOR_LINE_DEFAULT_DARK, ";z-index:0;}.", prefixCls, "{&-tab{display:inline-block;&:hover{border-bottom-color:", DT.T_TABS_DEFAULT_COLOR_BG_HOVER, ";}&-disabled:hover{border-bottom-color:transparent;}&-active,&-active:hover{border-bottom-color:", DT.T_TABS_DEFAULT_COLOR_BG_DEFAULT, ";}}&-ink-bar{bottom:0;}}}.", prefixCls, "-top-content{width:100%;};label:SWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), " ", tabBarPosition === 'bottom' && /*#__PURE__*/(0, _core.css)(".", prefixCls, "-bottom-bar{::before{content:' ';position:absolute;top:0;width:100%;height:1px;background:", DT.T_COLOR_LINE_DEFAULT_DARK, ";z-index:0;}.", prefixCls, "{&-tab{display:inline-block;&:hover{border-top-color:", DT.T_TABS_DEFAULT_COLOR_BG_HOVER, ";}&-disabled:hover{border-top-color:transparent;}&-active,&-active:hover{border-top-color:", DT.T_TABS_DEFAULT_COLOR_BG_DEFAULT, ";}}&-ink-bar{top:0;}}}.", prefixCls, "-bottom-content{width:100%;};label:SWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), " ", tabBarPosition === 'left' && /*#__PURE__*/(0, _core.css)(".", prefixCls, "-left-bar{float:left;height:100%;::before{content:' ';position:absolute;right:0;height:100%;width:1px;background:", DT.T_COLOR_LINE_DEFAULT_DARK, ";z-index:0;}.", prefixCls, "{&-tab{&:hover{border-right-color:", DT.T_TABS_DEFAULT_COLOR_BG_HOVER, ";}&-disabled:hover{border-right-color:transparent;}&-active,&-active:hover{border-right-color:", DT.T_TABS_DEFAULT_COLOR_BG_DEFAULT, ";}text-align:right;}&-ink-bar{right:0;}}}.", prefixCls, "-left-content{overflow:hidden;height:100%;};label:SWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), " ", tabBarPosition === 'right' && /*#__PURE__*/(0, _core.css)(".", prefixCls, "-right-bar{float:right;height:100%;::before{content:' ';position:absolute;left:0;height:100%;width:1px;background:", DT.T_COLOR_LINE_DEFAULT_DARK, ";z-index:0;}.", prefixCls, "{&-tab{&:hover{border-left-color:", DT.T_TABS_DEFAULT_COLOR_BG_HOVER, ";}&-disabled:hover{border-left-color:transparent;}&-active,&-active:hover{border-left-color:", DT.T_TABS_DEFAULT_COLOR_BG_DEFAULT, ";}}&-ink-bar{left:0;}}}.", prefixCls, "-right-content{overflow:hidden;height:100%;};label:SWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), " ", (tabBarPosition === 'top' || tabBarPosition === 'bottom') && /*#__PURE__*/(0, _core.css)(".", prefixCls, "-top-bar,.", prefixCls, "-bottom-bar{.", prefixCls, "-nav-scroll{width:100%;}.", prefixCls, "-nav-container-scrolling{padding:0 32px;}.", prefixCls, "-tab-prev{left:0;}.", prefixCls, "-tab-next{right:0;}.", prefixCls, "-tab-prev,.", prefixCls, "-tab-next{top:50%;margin-top:-10px;}.", prefixCls, "-tab-prev-icon:before{content:'\\2039';}.", prefixCls, "-tab-next-icon:before{content:'\\203A';}};label:SWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), " ", (tabBarPosition === 'left' || tabBarPosition === 'right') && /*#__PURE__*/(0, _core.css)(".", prefixCls, "-left-bar,.", prefixCls, "-right-bar{.", prefixCls, "-nav-scroll{height:100%;}.", prefixCls, "-nav-container-scrolling{padding:28px 0;}.", prefixCls, "-tab-prev{top:0;}.", prefixCls, "-tab-next{bottom:0;}.", prefixCls, "-tab-prev,.", prefixCls, "-tab-next{left:50%;margin-left:-10px;transform:rotate(90deg);}.", prefixCls, "-tab-prev-icon:before{content:'\\2039';}.", prefixCls, "-tab-next-icon:before{content:'\\203A';}};label:SWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), "}", styleType === 'ink' && /*#__PURE__*/(0, _core.css)("> .", prefixCls, "-top-bar,> .", prefixCls, "-bottom-bar{.", prefixCls, "-tab+.", prefixCls, "-tab{margin-left:12px;}}> .", prefixCls, "-left-bar,> .", prefixCls, "-right-bar{.", prefixCls, "-tab+.", prefixCls, "-tab{margin-top:8px;}};label:SWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), ";;label:SWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.SWrap = SWrap;