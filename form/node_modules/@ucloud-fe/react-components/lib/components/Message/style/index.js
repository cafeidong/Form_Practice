"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MessageContentWrap = exports.MessageWrap = exports.FooterWrap = exports.ContentWrap = exports.TitleWrap = exports.LeftPrefix = exports.CloseIconWrap = exports.IconWrap = exports.TipIcon = exports.animationName = exports.animationDuration = exports.contentCls = exports.titleCls = exports.prefixCls = void 0;

var _newArrowCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/newArrowCheck"));

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _core = require("@emotion/core");

var _reactTransitionGroup = require("react-transition-group");

var _SvgIcon = _interopRequireDefault(require("../../../components/SvgIcon"));

var _animation = require("../../../style/animation");

var _config = _interopRequireDefault(require("../../../config"));

var _withProps = _interopRequireDefault(require("../../../utils/withProps"));

var _this = void 0;

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

var _prefixCls = _config.default.prefixCls;
var prefixCls = _prefixCls + '-message';
exports.prefixCls = prefixCls;
var titleCls = prefixCls + '-title';
exports.titleCls = titleCls;
var contentCls = prefixCls + '-content';
exports.contentCls = contentCls;
var animationDuration = 400;
exports.animationDuration = animationDuration;
var animationName = 'uc-fe-animation-fade';
exports.animationName = animationName;
var colorMap = {
  success: 'T_COLOR_TEXT_SUCCESS',
  warning: 'T_COLOR_TEXT_WARNING',
  error: 'T_COLOR_TEXT_ERROR',
  loading: 'T_COLOR_TEXT_PRIMARY_DEFAULT',
  default: 'T_COLOR_TEXT_PRIMARY_DEFAULT'
};
var TipIcon = (0, _withProps.default)()(( /*#__PURE__*/0, _styledBase.default)(_SvgIcon.default, {
  target: "e1t4tau60",
  label: "TipIcon"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var styleType = props.styleType,
      DT = props.theme.designTokens;
  return /*#__PURE__*/(0, _core.css)("fill:", DT[colorMap[styleType]], ";;label:TipIcon;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lc3NhZ2Uvc3R5bGUvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0NrQiIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9NZXNzYWdlL3N0eWxlL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uR3JvdXAgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcblxuaW1wb3J0IFN2Z0ljb24gZnJvbSAnc3JjL2NvbXBvbmVudHMvU3ZnSWNvbic7XG5pbXBvcnQgeyBzbGlkZVVwT3V0LCBzbGlkZUluUmlnaHQgfSBmcm9tICdzcmMvc3R5bGUvYW5pbWF0aW9uJztcbmltcG9ydCBjb25maWcgZnJvbSAnc3JjL2NvbmZpZyc7XG5pbXBvcnQgd2l0aFByb3BzIGZyb20gJ3NyYy91dGlscy93aXRoUHJvcHMnO1xuXG5jb25zdCB7IHByZWZpeENsczogX3ByZWZpeENscyB9ID0gY29uZmlnO1xuZXhwb3J0IGNvbnN0IHByZWZpeENscyA9IF9wcmVmaXhDbHMgKyAnLW1lc3NhZ2UnO1xuZXhwb3J0IGNvbnN0IHRpdGxlQ2xzID0gcHJlZml4Q2xzICsgJy10aXRsZSc7XG5leHBvcnQgY29uc3QgY29udGVudENscyA9IHByZWZpeENscyArICctY29udGVudCc7XG5cbmV4cG9ydCBjb25zdCBhbmltYXRpb25EdXJhdGlvbiA9IDQwMDtcbmV4cG9ydCBjb25zdCBhbmltYXRpb25OYW1lID0gJ3VjLWZlLWFuaW1hdGlvbi1mYWRlJztcblxuY29uc3QgY29sb3JNYXAgPSB7XG4gICAgc3VjY2VzczogJ1RfQ09MT1JfVEVYVF9TVUNDRVNTJyxcbiAgICB3YXJuaW5nOiAnVF9DT0xPUl9URVhUX1dBUk5JTkcnLFxuICAgIGVycm9yOiAnVF9DT0xPUl9URVhUX0VSUk9SJyxcbiAgICBsb2FkaW5nOiAnVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVCcsXG4gICAgZGVmYXVsdDogJ1RfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFQnXG59O1xuXG5leHBvcnQgY29uc3QgVGlwSWNvbiA9IHdpdGhQcm9wcygpKFxuICAgIHN0eWxlZChTdmdJY29uKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0eWxlVHlwZSxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGZpbGw6ICR7RFRbY29sb3JNYXBbc3R5bGVUeXBlXV19O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgSWNvbldyYXAgPSBzdHlsZWQoJ2RpdicpYFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIHdpZHRoOiAyMHB4O1xuICAgIGhlaWdodDogMjBweDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMTdweDtcbiAgICBsZWZ0OiAxNnB4O1xuYDtcbmV4cG9ydCBjb25zdCBDbG9zZUljb25XcmFwID0gd2l0aFByb3BzKCkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBmb250LXNpemU6IDIwcHg7XG4gICAgICAgICAgICB3aWR0aDogMjBweDtcbiAgICAgICAgICAgIGhlaWdodDogMjBweDtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgdG9wOiAxN3B4O1xuICAgICAgICAgICAgcmlnaHQ6IDE2cHg7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICBzdmcge1xuICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfTElHSFR9O1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgTGVmdFByZWZpeCA9IHdpdGhQcm9wcygpKFxuICAgIHN0eWxlZCgnZGl2JykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzdHlsZVR5cGUsXG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICB0b3A6IC0xcHg7XG4gICAgICAgICAgICBib3R0b206IC0xcHg7XG4gICAgICAgICAgICBsZWZ0OiAtMXB4O1xuICAgICAgICAgICAgd2lkdGg6IDRweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7RFRbY29sb3JNYXBbc3R5bGVUeXBlXV19O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgVGl0bGVXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IHRpdGxlQ2xzXG59KShcbiAgICBzdHlsZWQoJ2gzJykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBtYXJnaW46IDBweDtcbiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDM2cHg7XG4gICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDQ0cHg7XG4gICAgICAgICAgICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XG4gICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBDb250ZW50V3JhcCA9IHdpdGhQcm9wcyh7XG4gICAgY2xhc3NOYW1lOiBjb250ZW50Q2xzXG59KShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMzZweDtcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogNDRweDtcbiAgICAgICAgICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBGb290ZXJXcmFwID0gc3R5bGVkKCdkaXYnKWBcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICBtYXJnaW4tcmlnaHQ6IDE2cHg7XG4gICAgbWFyZ2luLWxlZnQ6IDQ0cHg7XG4gICAgbWFyZ2luLXRvcDogOHB4O1xuYDtcblxuZXhwb3J0IGNvbnN0IE1lc3NhZ2VXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IHByZWZpeENsc1xufSkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0eWxlVHlwZSxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICB3aWR0aDogMzQwcHg7XG4gICAgICAgICAgICBtaW4taGVpZ2h0OiA1NnB4O1xuICAgICAgICAgICAgcGFkZGluZzogMTVweCAwO1xuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHtEVC5UX0NPTE9SX0xJTkVfREVGQVVMVF9MSUdIVH07XG4gICAgICAgICAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogNHB4O1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDRweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19ERUZBVUxUX0JSSUdIVH07XG4gICAgICAgICAgICBib3gtc2hhZG93OiAke0RULlRfU0hBRE9XX0JMT0NLX0RFRkFVTFRfTEd9O1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgTWVzc2FnZUNvbnRlbnRXcmFwID0gc3R5bGVkKFRyYW5zaXRpb25Hcm91cClgXG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHRvcDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDBweDtcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgICB6LWluZGV4OiAxMDYwO1xuXG4gICAgLiR7YW5pbWF0aW9uTmFtZX0tZW50ZXIsIC4ke2FuaW1hdGlvbk5hbWV9LWFwcGVhciwgLiR7YW5pbWF0aW9uTmFtZX0tbGVhdmUsIC4ke2FuaW1hdGlvbk5hbWV9LWV4aXQge1xuICAgICAgICBhbmltYXRpb24tZHVyYXRpb246ICR7YW5pbWF0aW9uRHVyYXRpb259bXM7XG4gICAgICAgIGFuaW1hdGlvbi1maWxsLW1vZGU6IGJvdGg7XG4gICAgfVxuICAgIC4ke2FuaW1hdGlvbk5hbWV9LWVudGVyLCAuJHthbmltYXRpb25OYW1lfS1hcHBlYXIge1xuICAgICAgICBhbmltYXRpb24tbmFtZTogJHtzbGlkZUluUmlnaHR9O1xuICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4zLCAxLjMsIDAuMywgMSk7XG4gICAgfVxuICAgIC4ke2FuaW1hdGlvbk5hbWV9LWxlYXZlLCAuJHthbmltYXRpb25OYW1lfS1leGl0IHtcbiAgICAgICAgYW5pbWF0aW9uLW5hbWU6ICR7c2xpZGVVcE91dH07XG4gICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjM0LCAwLjY5LCAwLjEsIDEpO1xuICAgIH1cblxuICAgIC4ke3ByZWZpeENsc30ge1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDE2cHg7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMTZweDtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gICAgfVxuYDtcbiJdfQ== */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lc3NhZ2Uvc3R5bGUvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMEJJIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lc3NhZ2Uvc3R5bGUvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCB7IFRyYW5zaXRpb25Hcm91cCB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuXG5pbXBvcnQgU3ZnSWNvbiBmcm9tICdzcmMvY29tcG9uZW50cy9TdmdJY29uJztcbmltcG9ydCB7IHNsaWRlVXBPdXQsIHNsaWRlSW5SaWdodCB9IGZyb20gJ3NyYy9zdHlsZS9hbmltYXRpb24nO1xuaW1wb3J0IGNvbmZpZyBmcm9tICdzcmMvY29uZmlnJztcbmltcG9ydCB3aXRoUHJvcHMgZnJvbSAnc3JjL3V0aWxzL3dpdGhQcm9wcyc7XG5cbmNvbnN0IHsgcHJlZml4Q2xzOiBfcHJlZml4Q2xzIH0gPSBjb25maWc7XG5leHBvcnQgY29uc3QgcHJlZml4Q2xzID0gX3ByZWZpeENscyArICctbWVzc2FnZSc7XG5leHBvcnQgY29uc3QgdGl0bGVDbHMgPSBwcmVmaXhDbHMgKyAnLXRpdGxlJztcbmV4cG9ydCBjb25zdCBjb250ZW50Q2xzID0gcHJlZml4Q2xzICsgJy1jb250ZW50JztcblxuZXhwb3J0IGNvbnN0IGFuaW1hdGlvbkR1cmF0aW9uID0gNDAwO1xuZXhwb3J0IGNvbnN0IGFuaW1hdGlvbk5hbWUgPSAndWMtZmUtYW5pbWF0aW9uLWZhZGUnO1xuXG5jb25zdCBjb2xvck1hcCA9IHtcbiAgICBzdWNjZXNzOiAnVF9DT0xPUl9URVhUX1NVQ0NFU1MnLFxuICAgIHdhcm5pbmc6ICdUX0NPTE9SX1RFWFRfV0FSTklORycsXG4gICAgZXJyb3I6ICdUX0NPTE9SX1RFWFRfRVJST1InLFxuICAgIGxvYWRpbmc6ICdUX0NPTE9SX1RFWFRfUFJJTUFSWV9ERUZBVUxUJyxcbiAgICBkZWZhdWx0OiAnVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVCdcbn07XG5cbmV4cG9ydCBjb25zdCBUaXBJY29uID0gd2l0aFByb3BzKCkoXG4gICAgc3R5bGVkKFN2Z0ljb24pKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc3R5bGVUeXBlLFxuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgZmlsbDogJHtEVFtjb2xvck1hcFtzdHlsZVR5cGVdXX07XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBJY29uV3JhcCA9IHN0eWxlZCgnZGl2JylgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgd2lkdGg6IDIwcHg7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBsaW5lLWhlaWdodDogMjBweDtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAxN3B4O1xuICAgIGxlZnQ6IDE2cHg7XG5gO1xuZXhwb3J0IGNvbnN0IENsb3NlSWNvbldyYXAgPSB3aXRoUHJvcHMoKShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICAgICAgICAgIHdpZHRoOiAyMHB4O1xuICAgICAgICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICB0b3A6IDE3cHg7XG4gICAgICAgICAgICByaWdodDogMTZweDtcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgIHN2ZyB7XG4gICAgICAgICAgICAgICAgZmlsbDogJHtEVC5UX0NPTE9SX1RFWFRfREVGQVVMVF9MSUdIVH07XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBMZWZ0UHJlZml4ID0gd2l0aFByb3BzKCkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0eWxlVHlwZSxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgIHRvcDogLTFweDtcbiAgICAgICAgICAgIGJvdHRvbTogLTFweDtcbiAgICAgICAgICAgIGxlZnQ6IC0xcHg7XG4gICAgICAgICAgICB3aWR0aDogNHB4O1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtEVFtjb2xvck1hcFtzdHlsZVR5cGVdXX07XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBUaXRsZVdyYXAgPSB3aXRoUHJvcHMoe1xuICAgIGNsYXNzTmFtZTogdGl0bGVDbHNcbn0pKFxuICAgIHN0eWxlZCgnaDMnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIG1hcmdpbjogMHB4O1xuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMzZweDtcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogNDRweDtcbiAgICAgICAgICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IENvbnRlbnRXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IGNvbnRlbnRDbHNcbn0pKFxuICAgIHN0eWxlZCgnZGl2JykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAzNnB4O1xuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA0NHB4O1xuICAgICAgICAgICAgd29yZC1icmVhazogYnJlYWstYWxsO1xuICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IEZvb3RlcldyYXAgPSBzdHlsZWQoJ2RpdicpYFxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICAgIG1hcmdpbi1yaWdodDogMTZweDtcbiAgICBtYXJnaW4tbGVmdDogNDRweDtcbiAgICBtYXJnaW4tdG9wOiA4cHg7XG5gO1xuXG5leHBvcnQgY29uc3QgTWVzc2FnZVdyYXAgPSB3aXRoUHJvcHMoe1xuICAgIGNsYXNzTmFtZTogcHJlZml4Q2xzXG59KShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc3R5bGVUeXBlLFxuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgIHdpZHRoOiAzNDBweDtcbiAgICAgICAgICAgIG1pbi1oZWlnaHQ6IDU2cHg7XG4gICAgICAgICAgICBwYWRkaW5nOiAxNXB4IDA7XG4gICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAke0RULlRfQ09MT1JfTElORV9ERUZBVUxUX0xJR0hUfTtcbiAgICAgICAgICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiA0cHg7XG4gICAgICAgICAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogNHB4O1xuICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfQlJJR0hUfTtcbiAgICAgICAgICAgIGJveC1zaGFkb3c6ICR7RFQuVF9TSEFET1dfQkxPQ0tfREVGQVVMVF9MR307XG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBNZXNzYWdlQ29udGVudFdyYXAgPSBzdHlsZWQoVHJhbnNpdGlvbkdyb3VwKWBcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgdG9wOiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMHB4O1xuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuICAgIHotaW5kZXg6IDEwNjA7XG5cbiAgICAuJHthbmltYXRpb25OYW1lfS1lbnRlciwgLiR7YW5pbWF0aW9uTmFtZX0tYXBwZWFyLCAuJHthbmltYXRpb25OYW1lfS1sZWF2ZSwgLiR7YW5pbWF0aW9uTmFtZX0tZXhpdCB7XG4gICAgICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogJHthbmltYXRpb25EdXJhdGlvbn1tcztcbiAgICAgICAgYW5pbWF0aW9uLWZpbGwtbW9kZTogYm90aDtcbiAgICB9XG4gICAgLiR7YW5pbWF0aW9uTmFtZX0tZW50ZXIsIC4ke2FuaW1hdGlvbk5hbWV9LWFwcGVhciB7XG4gICAgICAgIGFuaW1hdGlvbi1uYW1lOiAke3NsaWRlSW5SaWdodH07XG4gICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjMsIDEuMywgMC4zLCAxKTtcbiAgICB9XG4gICAgLiR7YW5pbWF0aW9uTmFtZX0tbGVhdmUsIC4ke2FuaW1hdGlvbk5hbWV9LWV4aXQge1xuICAgICAgICBhbmltYXRpb24tbmFtZTogJHtzbGlkZVVwT3V0fTtcbiAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMzQsIDAuNjksIDAuMSwgMSk7XG4gICAgfVxuXG4gICAgLiR7cHJlZml4Q2xzfSB7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xuICAgICAgICBtYXJnaW4tbGVmdDogYXV0bztcbiAgICB9XG5gO1xuIl19 */"));
exports.TipIcon = TipIcon;
var IconWrap = ( /*#__PURE__*/0, _styledBase.default)('div', {
  target: "e1t4tau61",
  label: "IconWrap"
})(process.env.NODE_ENV === "production" ? {
  name: "1n5g7b3",
  styles: "display:flex;font-size:20px;width:20px;height:20px;text-align:center;line-height:20px;position:absolute;top:17px;left:16px;"
} : {
  name: "1n5g7b3",
  styles: "display:flex;font-size:20px;width:20px;height:20px;text-align:center;line-height:20px;position:absolute;top:17px;left:16px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lc3NhZ2Uvc3R5bGUvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0NxQyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9NZXNzYWdlL3N0eWxlL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uR3JvdXAgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcblxuaW1wb3J0IFN2Z0ljb24gZnJvbSAnc3JjL2NvbXBvbmVudHMvU3ZnSWNvbic7XG5pbXBvcnQgeyBzbGlkZVVwT3V0LCBzbGlkZUluUmlnaHQgfSBmcm9tICdzcmMvc3R5bGUvYW5pbWF0aW9uJztcbmltcG9ydCBjb25maWcgZnJvbSAnc3JjL2NvbmZpZyc7XG5pbXBvcnQgd2l0aFByb3BzIGZyb20gJ3NyYy91dGlscy93aXRoUHJvcHMnO1xuXG5jb25zdCB7IHByZWZpeENsczogX3ByZWZpeENscyB9ID0gY29uZmlnO1xuZXhwb3J0IGNvbnN0IHByZWZpeENscyA9IF9wcmVmaXhDbHMgKyAnLW1lc3NhZ2UnO1xuZXhwb3J0IGNvbnN0IHRpdGxlQ2xzID0gcHJlZml4Q2xzICsgJy10aXRsZSc7XG5leHBvcnQgY29uc3QgY29udGVudENscyA9IHByZWZpeENscyArICctY29udGVudCc7XG5cbmV4cG9ydCBjb25zdCBhbmltYXRpb25EdXJhdGlvbiA9IDQwMDtcbmV4cG9ydCBjb25zdCBhbmltYXRpb25OYW1lID0gJ3VjLWZlLWFuaW1hdGlvbi1mYWRlJztcblxuY29uc3QgY29sb3JNYXAgPSB7XG4gICAgc3VjY2VzczogJ1RfQ09MT1JfVEVYVF9TVUNDRVNTJyxcbiAgICB3YXJuaW5nOiAnVF9DT0xPUl9URVhUX1dBUk5JTkcnLFxuICAgIGVycm9yOiAnVF9DT0xPUl9URVhUX0VSUk9SJyxcbiAgICBsb2FkaW5nOiAnVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVCcsXG4gICAgZGVmYXVsdDogJ1RfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFQnXG59O1xuXG5leHBvcnQgY29uc3QgVGlwSWNvbiA9IHdpdGhQcm9wcygpKFxuICAgIHN0eWxlZChTdmdJY29uKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0eWxlVHlwZSxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGZpbGw6ICR7RFRbY29sb3JNYXBbc3R5bGVUeXBlXV19O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgSWNvbldyYXAgPSBzdHlsZWQoJ2RpdicpYFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIHdpZHRoOiAyMHB4O1xuICAgIGhlaWdodDogMjBweDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMTdweDtcbiAgICBsZWZ0OiAxNnB4O1xuYDtcbmV4cG9ydCBjb25zdCBDbG9zZUljb25XcmFwID0gd2l0aFByb3BzKCkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBmb250LXNpemU6IDIwcHg7XG4gICAgICAgICAgICB3aWR0aDogMjBweDtcbiAgICAgICAgICAgIGhlaWdodDogMjBweDtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgdG9wOiAxN3B4O1xuICAgICAgICAgICAgcmlnaHQ6IDE2cHg7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICBzdmcge1xuICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfTElHSFR9O1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgTGVmdFByZWZpeCA9IHdpdGhQcm9wcygpKFxuICAgIHN0eWxlZCgnZGl2JykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzdHlsZVR5cGUsXG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICB0b3A6IC0xcHg7XG4gICAgICAgICAgICBib3R0b206IC0xcHg7XG4gICAgICAgICAgICBsZWZ0OiAtMXB4O1xuICAgICAgICAgICAgd2lkdGg6IDRweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7RFRbY29sb3JNYXBbc3R5bGVUeXBlXV19O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgVGl0bGVXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IHRpdGxlQ2xzXG59KShcbiAgICBzdHlsZWQoJ2gzJykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBtYXJnaW46IDBweDtcbiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDM2cHg7XG4gICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDQ0cHg7XG4gICAgICAgICAgICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XG4gICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBDb250ZW50V3JhcCA9IHdpdGhQcm9wcyh7XG4gICAgY2xhc3NOYW1lOiBjb250ZW50Q2xzXG59KShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMzZweDtcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogNDRweDtcbiAgICAgICAgICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBGb290ZXJXcmFwID0gc3R5bGVkKCdkaXYnKWBcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICBtYXJnaW4tcmlnaHQ6IDE2cHg7XG4gICAgbWFyZ2luLWxlZnQ6IDQ0cHg7XG4gICAgbWFyZ2luLXRvcDogOHB4O1xuYDtcblxuZXhwb3J0IGNvbnN0IE1lc3NhZ2VXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IHByZWZpeENsc1xufSkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0eWxlVHlwZSxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICB3aWR0aDogMzQwcHg7XG4gICAgICAgICAgICBtaW4taGVpZ2h0OiA1NnB4O1xuICAgICAgICAgICAgcGFkZGluZzogMTVweCAwO1xuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHtEVC5UX0NPTE9SX0xJTkVfREVGQVVMVF9MSUdIVH07XG4gICAgICAgICAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogNHB4O1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDRweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19ERUZBVUxUX0JSSUdIVH07XG4gICAgICAgICAgICBib3gtc2hhZG93OiAke0RULlRfU0hBRE9XX0JMT0NLX0RFRkFVTFRfTEd9O1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgTWVzc2FnZUNvbnRlbnRXcmFwID0gc3R5bGVkKFRyYW5zaXRpb25Hcm91cClgXG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHRvcDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDBweDtcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgICB6LWluZGV4OiAxMDYwO1xuXG4gICAgLiR7YW5pbWF0aW9uTmFtZX0tZW50ZXIsIC4ke2FuaW1hdGlvbk5hbWV9LWFwcGVhciwgLiR7YW5pbWF0aW9uTmFtZX0tbGVhdmUsIC4ke2FuaW1hdGlvbk5hbWV9LWV4aXQge1xuICAgICAgICBhbmltYXRpb24tZHVyYXRpb246ICR7YW5pbWF0aW9uRHVyYXRpb259bXM7XG4gICAgICAgIGFuaW1hdGlvbi1maWxsLW1vZGU6IGJvdGg7XG4gICAgfVxuICAgIC4ke2FuaW1hdGlvbk5hbWV9LWVudGVyLCAuJHthbmltYXRpb25OYW1lfS1hcHBlYXIge1xuICAgICAgICBhbmltYXRpb24tbmFtZTogJHtzbGlkZUluUmlnaHR9O1xuICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4zLCAxLjMsIDAuMywgMSk7XG4gICAgfVxuICAgIC4ke2FuaW1hdGlvbk5hbWV9LWxlYXZlLCAuJHthbmltYXRpb25OYW1lfS1leGl0IHtcbiAgICAgICAgYW5pbWF0aW9uLW5hbWU6ICR7c2xpZGVVcE91dH07XG4gICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjM0LCAwLjY5LCAwLjEsIDEpO1xuICAgIH1cblxuICAgIC4ke3ByZWZpeENsc30ge1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDE2cHg7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMTZweDtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gICAgfVxuYDtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
exports.IconWrap = IconWrap;
var CloseIconWrap = (0, _withProps.default)()(( /*#__PURE__*/0, _styledBase.default)('div', {
  target: "e1t4tau62",
  label: "CloseIconWrap"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var DT = props.theme.designTokens;
  return /*#__PURE__*/(0, _core.css)("display:flex;font-size:20px;width:20px;height:20px;text-align:center;line-height:20px;position:absolute;top:17px;right:16px;cursor:pointer;svg{fill:", DT.T_COLOR_TEXT_DEFAULT_LIGHT, ";};label:CloseIconWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lc3NhZ2Uvc3R5bGUvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdURrQiIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9NZXNzYWdlL3N0eWxlL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uR3JvdXAgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcblxuaW1wb3J0IFN2Z0ljb24gZnJvbSAnc3JjL2NvbXBvbmVudHMvU3ZnSWNvbic7XG5pbXBvcnQgeyBzbGlkZVVwT3V0LCBzbGlkZUluUmlnaHQgfSBmcm9tICdzcmMvc3R5bGUvYW5pbWF0aW9uJztcbmltcG9ydCBjb25maWcgZnJvbSAnc3JjL2NvbmZpZyc7XG5pbXBvcnQgd2l0aFByb3BzIGZyb20gJ3NyYy91dGlscy93aXRoUHJvcHMnO1xuXG5jb25zdCB7IHByZWZpeENsczogX3ByZWZpeENscyB9ID0gY29uZmlnO1xuZXhwb3J0IGNvbnN0IHByZWZpeENscyA9IF9wcmVmaXhDbHMgKyAnLW1lc3NhZ2UnO1xuZXhwb3J0IGNvbnN0IHRpdGxlQ2xzID0gcHJlZml4Q2xzICsgJy10aXRsZSc7XG5leHBvcnQgY29uc3QgY29udGVudENscyA9IHByZWZpeENscyArICctY29udGVudCc7XG5cbmV4cG9ydCBjb25zdCBhbmltYXRpb25EdXJhdGlvbiA9IDQwMDtcbmV4cG9ydCBjb25zdCBhbmltYXRpb25OYW1lID0gJ3VjLWZlLWFuaW1hdGlvbi1mYWRlJztcblxuY29uc3QgY29sb3JNYXAgPSB7XG4gICAgc3VjY2VzczogJ1RfQ09MT1JfVEVYVF9TVUNDRVNTJyxcbiAgICB3YXJuaW5nOiAnVF9DT0xPUl9URVhUX1dBUk5JTkcnLFxuICAgIGVycm9yOiAnVF9DT0xPUl9URVhUX0VSUk9SJyxcbiAgICBsb2FkaW5nOiAnVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVCcsXG4gICAgZGVmYXVsdDogJ1RfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFQnXG59O1xuXG5leHBvcnQgY29uc3QgVGlwSWNvbiA9IHdpdGhQcm9wcygpKFxuICAgIHN0eWxlZChTdmdJY29uKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0eWxlVHlwZSxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGZpbGw6ICR7RFRbY29sb3JNYXBbc3R5bGVUeXBlXV19O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgSWNvbldyYXAgPSBzdHlsZWQoJ2RpdicpYFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIHdpZHRoOiAyMHB4O1xuICAgIGhlaWdodDogMjBweDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMTdweDtcbiAgICBsZWZ0OiAxNnB4O1xuYDtcbmV4cG9ydCBjb25zdCBDbG9zZUljb25XcmFwID0gd2l0aFByb3BzKCkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBmb250LXNpemU6IDIwcHg7XG4gICAgICAgICAgICB3aWR0aDogMjBweDtcbiAgICAgICAgICAgIGhlaWdodDogMjBweDtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgdG9wOiAxN3B4O1xuICAgICAgICAgICAgcmlnaHQ6IDE2cHg7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICBzdmcge1xuICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfTElHSFR9O1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgTGVmdFByZWZpeCA9IHdpdGhQcm9wcygpKFxuICAgIHN0eWxlZCgnZGl2JykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzdHlsZVR5cGUsXG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICB0b3A6IC0xcHg7XG4gICAgICAgICAgICBib3R0b206IC0xcHg7XG4gICAgICAgICAgICBsZWZ0OiAtMXB4O1xuICAgICAgICAgICAgd2lkdGg6IDRweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7RFRbY29sb3JNYXBbc3R5bGVUeXBlXV19O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgVGl0bGVXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IHRpdGxlQ2xzXG59KShcbiAgICBzdHlsZWQoJ2gzJykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBtYXJnaW46IDBweDtcbiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDM2cHg7XG4gICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDQ0cHg7XG4gICAgICAgICAgICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XG4gICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBDb250ZW50V3JhcCA9IHdpdGhQcm9wcyh7XG4gICAgY2xhc3NOYW1lOiBjb250ZW50Q2xzXG59KShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMzZweDtcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogNDRweDtcbiAgICAgICAgICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBGb290ZXJXcmFwID0gc3R5bGVkKCdkaXYnKWBcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICBtYXJnaW4tcmlnaHQ6IDE2cHg7XG4gICAgbWFyZ2luLWxlZnQ6IDQ0cHg7XG4gICAgbWFyZ2luLXRvcDogOHB4O1xuYDtcblxuZXhwb3J0IGNvbnN0IE1lc3NhZ2VXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IHByZWZpeENsc1xufSkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0eWxlVHlwZSxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICB3aWR0aDogMzQwcHg7XG4gICAgICAgICAgICBtaW4taGVpZ2h0OiA1NnB4O1xuICAgICAgICAgICAgcGFkZGluZzogMTVweCAwO1xuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHtEVC5UX0NPTE9SX0xJTkVfREVGQVVMVF9MSUdIVH07XG4gICAgICAgICAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogNHB4O1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDRweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19ERUZBVUxUX0JSSUdIVH07XG4gICAgICAgICAgICBib3gtc2hhZG93OiAke0RULlRfU0hBRE9XX0JMT0NLX0RFRkFVTFRfTEd9O1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgTWVzc2FnZUNvbnRlbnRXcmFwID0gc3R5bGVkKFRyYW5zaXRpb25Hcm91cClgXG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHRvcDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDBweDtcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgICB6LWluZGV4OiAxMDYwO1xuXG4gICAgLiR7YW5pbWF0aW9uTmFtZX0tZW50ZXIsIC4ke2FuaW1hdGlvbk5hbWV9LWFwcGVhciwgLiR7YW5pbWF0aW9uTmFtZX0tbGVhdmUsIC4ke2FuaW1hdGlvbk5hbWV9LWV4aXQge1xuICAgICAgICBhbmltYXRpb24tZHVyYXRpb246ICR7YW5pbWF0aW9uRHVyYXRpb259bXM7XG4gICAgICAgIGFuaW1hdGlvbi1maWxsLW1vZGU6IGJvdGg7XG4gICAgfVxuICAgIC4ke2FuaW1hdGlvbk5hbWV9LWVudGVyLCAuJHthbmltYXRpb25OYW1lfS1hcHBlYXIge1xuICAgICAgICBhbmltYXRpb24tbmFtZTogJHtzbGlkZUluUmlnaHR9O1xuICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4zLCAxLjMsIDAuMywgMSk7XG4gICAgfVxuICAgIC4ke2FuaW1hdGlvbk5hbWV9LWxlYXZlLCAuJHthbmltYXRpb25OYW1lfS1leGl0IHtcbiAgICAgICAgYW5pbWF0aW9uLW5hbWU6ICR7c2xpZGVVcE91dH07XG4gICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjM0LCAwLjY5LCAwLjEsIDEpO1xuICAgIH1cblxuICAgIC4ke3ByZWZpeENsc30ge1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDE2cHg7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMTZweDtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gICAgfVxuYDtcbiJdfQ== */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lc3NhZ2Uvc3R5bGUvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0RJIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lc3NhZ2Uvc3R5bGUvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCB7IFRyYW5zaXRpb25Hcm91cCB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuXG5pbXBvcnQgU3ZnSWNvbiBmcm9tICdzcmMvY29tcG9uZW50cy9TdmdJY29uJztcbmltcG9ydCB7IHNsaWRlVXBPdXQsIHNsaWRlSW5SaWdodCB9IGZyb20gJ3NyYy9zdHlsZS9hbmltYXRpb24nO1xuaW1wb3J0IGNvbmZpZyBmcm9tICdzcmMvY29uZmlnJztcbmltcG9ydCB3aXRoUHJvcHMgZnJvbSAnc3JjL3V0aWxzL3dpdGhQcm9wcyc7XG5cbmNvbnN0IHsgcHJlZml4Q2xzOiBfcHJlZml4Q2xzIH0gPSBjb25maWc7XG5leHBvcnQgY29uc3QgcHJlZml4Q2xzID0gX3ByZWZpeENscyArICctbWVzc2FnZSc7XG5leHBvcnQgY29uc3QgdGl0bGVDbHMgPSBwcmVmaXhDbHMgKyAnLXRpdGxlJztcbmV4cG9ydCBjb25zdCBjb250ZW50Q2xzID0gcHJlZml4Q2xzICsgJy1jb250ZW50JztcblxuZXhwb3J0IGNvbnN0IGFuaW1hdGlvbkR1cmF0aW9uID0gNDAwO1xuZXhwb3J0IGNvbnN0IGFuaW1hdGlvbk5hbWUgPSAndWMtZmUtYW5pbWF0aW9uLWZhZGUnO1xuXG5jb25zdCBjb2xvck1hcCA9IHtcbiAgICBzdWNjZXNzOiAnVF9DT0xPUl9URVhUX1NVQ0NFU1MnLFxuICAgIHdhcm5pbmc6ICdUX0NPTE9SX1RFWFRfV0FSTklORycsXG4gICAgZXJyb3I6ICdUX0NPTE9SX1RFWFRfRVJST1InLFxuICAgIGxvYWRpbmc6ICdUX0NPTE9SX1RFWFRfUFJJTUFSWV9ERUZBVUxUJyxcbiAgICBkZWZhdWx0OiAnVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVCdcbn07XG5cbmV4cG9ydCBjb25zdCBUaXBJY29uID0gd2l0aFByb3BzKCkoXG4gICAgc3R5bGVkKFN2Z0ljb24pKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc3R5bGVUeXBlLFxuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgZmlsbDogJHtEVFtjb2xvck1hcFtzdHlsZVR5cGVdXX07XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBJY29uV3JhcCA9IHN0eWxlZCgnZGl2JylgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgd2lkdGg6IDIwcHg7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBsaW5lLWhlaWdodDogMjBweDtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAxN3B4O1xuICAgIGxlZnQ6IDE2cHg7XG5gO1xuZXhwb3J0IGNvbnN0IENsb3NlSWNvbldyYXAgPSB3aXRoUHJvcHMoKShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICAgICAgICAgIHdpZHRoOiAyMHB4O1xuICAgICAgICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICB0b3A6IDE3cHg7XG4gICAgICAgICAgICByaWdodDogMTZweDtcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgIHN2ZyB7XG4gICAgICAgICAgICAgICAgZmlsbDogJHtEVC5UX0NPTE9SX1RFWFRfREVGQVVMVF9MSUdIVH07XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBMZWZ0UHJlZml4ID0gd2l0aFByb3BzKCkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0eWxlVHlwZSxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgIHRvcDogLTFweDtcbiAgICAgICAgICAgIGJvdHRvbTogLTFweDtcbiAgICAgICAgICAgIGxlZnQ6IC0xcHg7XG4gICAgICAgICAgICB3aWR0aDogNHB4O1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtEVFtjb2xvck1hcFtzdHlsZVR5cGVdXX07XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBUaXRsZVdyYXAgPSB3aXRoUHJvcHMoe1xuICAgIGNsYXNzTmFtZTogdGl0bGVDbHNcbn0pKFxuICAgIHN0eWxlZCgnaDMnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIG1hcmdpbjogMHB4O1xuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMzZweDtcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogNDRweDtcbiAgICAgICAgICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IENvbnRlbnRXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IGNvbnRlbnRDbHNcbn0pKFxuICAgIHN0eWxlZCgnZGl2JykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAzNnB4O1xuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA0NHB4O1xuICAgICAgICAgICAgd29yZC1icmVhazogYnJlYWstYWxsO1xuICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IEZvb3RlcldyYXAgPSBzdHlsZWQoJ2RpdicpYFxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICAgIG1hcmdpbi1yaWdodDogMTZweDtcbiAgICBtYXJnaW4tbGVmdDogNDRweDtcbiAgICBtYXJnaW4tdG9wOiA4cHg7XG5gO1xuXG5leHBvcnQgY29uc3QgTWVzc2FnZVdyYXAgPSB3aXRoUHJvcHMoe1xuICAgIGNsYXNzTmFtZTogcHJlZml4Q2xzXG59KShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc3R5bGVUeXBlLFxuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgIHdpZHRoOiAzNDBweDtcbiAgICAgICAgICAgIG1pbi1oZWlnaHQ6IDU2cHg7XG4gICAgICAgICAgICBwYWRkaW5nOiAxNXB4IDA7XG4gICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAke0RULlRfQ09MT1JfTElORV9ERUZBVUxUX0xJR0hUfTtcbiAgICAgICAgICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiA0cHg7XG4gICAgICAgICAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogNHB4O1xuICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfQlJJR0hUfTtcbiAgICAgICAgICAgIGJveC1zaGFkb3c6ICR7RFQuVF9TSEFET1dfQkxPQ0tfREVGQVVMVF9MR307XG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBNZXNzYWdlQ29udGVudFdyYXAgPSBzdHlsZWQoVHJhbnNpdGlvbkdyb3VwKWBcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgdG9wOiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMHB4O1xuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuICAgIHotaW5kZXg6IDEwNjA7XG5cbiAgICAuJHthbmltYXRpb25OYW1lfS1lbnRlciwgLiR7YW5pbWF0aW9uTmFtZX0tYXBwZWFyLCAuJHthbmltYXRpb25OYW1lfS1sZWF2ZSwgLiR7YW5pbWF0aW9uTmFtZX0tZXhpdCB7XG4gICAgICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogJHthbmltYXRpb25EdXJhdGlvbn1tcztcbiAgICAgICAgYW5pbWF0aW9uLWZpbGwtbW9kZTogYm90aDtcbiAgICB9XG4gICAgLiR7YW5pbWF0aW9uTmFtZX0tZW50ZXIsIC4ke2FuaW1hdGlvbk5hbWV9LWFwcGVhciB7XG4gICAgICAgIGFuaW1hdGlvbi1uYW1lOiAke3NsaWRlSW5SaWdodH07XG4gICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjMsIDEuMywgMC4zLCAxKTtcbiAgICB9XG4gICAgLiR7YW5pbWF0aW9uTmFtZX0tbGVhdmUsIC4ke2FuaW1hdGlvbk5hbWV9LWV4aXQge1xuICAgICAgICBhbmltYXRpb24tbmFtZTogJHtzbGlkZVVwT3V0fTtcbiAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMzQsIDAuNjksIDAuMSwgMSk7XG4gICAgfVxuXG4gICAgLiR7cHJlZml4Q2xzfSB7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xuICAgICAgICBtYXJnaW4tbGVmdDogYXV0bztcbiAgICB9XG5gO1xuIl19 */"));
exports.CloseIconWrap = CloseIconWrap;
var LeftPrefix = (0, _withProps.default)()(( /*#__PURE__*/0, _styledBase.default)('div', {
  target: "e1t4tau63",
  label: "LeftPrefix"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var styleType = props.styleType,
      DT = props.theme.designTokens;
  return /*#__PURE__*/(0, _core.css)("position:absolute;top:-1px;bottom:-1px;left:-1px;width:4px;background-color:", DT[colorMap[styleType]], ";;label:LeftPrefix;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lc3NhZ2Uvc3R5bGUvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0ZrQiIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9NZXNzYWdlL3N0eWxlL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uR3JvdXAgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcblxuaW1wb3J0IFN2Z0ljb24gZnJvbSAnc3JjL2NvbXBvbmVudHMvU3ZnSWNvbic7XG5pbXBvcnQgeyBzbGlkZVVwT3V0LCBzbGlkZUluUmlnaHQgfSBmcm9tICdzcmMvc3R5bGUvYW5pbWF0aW9uJztcbmltcG9ydCBjb25maWcgZnJvbSAnc3JjL2NvbmZpZyc7XG5pbXBvcnQgd2l0aFByb3BzIGZyb20gJ3NyYy91dGlscy93aXRoUHJvcHMnO1xuXG5jb25zdCB7IHByZWZpeENsczogX3ByZWZpeENscyB9ID0gY29uZmlnO1xuZXhwb3J0IGNvbnN0IHByZWZpeENscyA9IF9wcmVmaXhDbHMgKyAnLW1lc3NhZ2UnO1xuZXhwb3J0IGNvbnN0IHRpdGxlQ2xzID0gcHJlZml4Q2xzICsgJy10aXRsZSc7XG5leHBvcnQgY29uc3QgY29udGVudENscyA9IHByZWZpeENscyArICctY29udGVudCc7XG5cbmV4cG9ydCBjb25zdCBhbmltYXRpb25EdXJhdGlvbiA9IDQwMDtcbmV4cG9ydCBjb25zdCBhbmltYXRpb25OYW1lID0gJ3VjLWZlLWFuaW1hdGlvbi1mYWRlJztcblxuY29uc3QgY29sb3JNYXAgPSB7XG4gICAgc3VjY2VzczogJ1RfQ09MT1JfVEVYVF9TVUNDRVNTJyxcbiAgICB3YXJuaW5nOiAnVF9DT0xPUl9URVhUX1dBUk5JTkcnLFxuICAgIGVycm9yOiAnVF9DT0xPUl9URVhUX0VSUk9SJyxcbiAgICBsb2FkaW5nOiAnVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVCcsXG4gICAgZGVmYXVsdDogJ1RfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFQnXG59O1xuXG5leHBvcnQgY29uc3QgVGlwSWNvbiA9IHdpdGhQcm9wcygpKFxuICAgIHN0eWxlZChTdmdJY29uKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0eWxlVHlwZSxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGZpbGw6ICR7RFRbY29sb3JNYXBbc3R5bGVUeXBlXV19O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgSWNvbldyYXAgPSBzdHlsZWQoJ2RpdicpYFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIHdpZHRoOiAyMHB4O1xuICAgIGhlaWdodDogMjBweDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMTdweDtcbiAgICBsZWZ0OiAxNnB4O1xuYDtcbmV4cG9ydCBjb25zdCBDbG9zZUljb25XcmFwID0gd2l0aFByb3BzKCkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBmb250LXNpemU6IDIwcHg7XG4gICAgICAgICAgICB3aWR0aDogMjBweDtcbiAgICAgICAgICAgIGhlaWdodDogMjBweDtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgdG9wOiAxN3B4O1xuICAgICAgICAgICAgcmlnaHQ6IDE2cHg7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICBzdmcge1xuICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfTElHSFR9O1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgTGVmdFByZWZpeCA9IHdpdGhQcm9wcygpKFxuICAgIHN0eWxlZCgnZGl2JykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzdHlsZVR5cGUsXG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICB0b3A6IC0xcHg7XG4gICAgICAgICAgICBib3R0b206IC0xcHg7XG4gICAgICAgICAgICBsZWZ0OiAtMXB4O1xuICAgICAgICAgICAgd2lkdGg6IDRweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7RFRbY29sb3JNYXBbc3R5bGVUeXBlXV19O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgVGl0bGVXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IHRpdGxlQ2xzXG59KShcbiAgICBzdHlsZWQoJ2gzJykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBtYXJnaW46IDBweDtcbiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDM2cHg7XG4gICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDQ0cHg7XG4gICAgICAgICAgICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XG4gICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBDb250ZW50V3JhcCA9IHdpdGhQcm9wcyh7XG4gICAgY2xhc3NOYW1lOiBjb250ZW50Q2xzXG59KShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMzZweDtcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogNDRweDtcbiAgICAgICAgICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBGb290ZXJXcmFwID0gc3R5bGVkKCdkaXYnKWBcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICBtYXJnaW4tcmlnaHQ6IDE2cHg7XG4gICAgbWFyZ2luLWxlZnQ6IDQ0cHg7XG4gICAgbWFyZ2luLXRvcDogOHB4O1xuYDtcblxuZXhwb3J0IGNvbnN0IE1lc3NhZ2VXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IHByZWZpeENsc1xufSkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0eWxlVHlwZSxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICB3aWR0aDogMzQwcHg7XG4gICAgICAgICAgICBtaW4taGVpZ2h0OiA1NnB4O1xuICAgICAgICAgICAgcGFkZGluZzogMTVweCAwO1xuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHtEVC5UX0NPTE9SX0xJTkVfREVGQVVMVF9MSUdIVH07XG4gICAgICAgICAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogNHB4O1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDRweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19ERUZBVUxUX0JSSUdIVH07XG4gICAgICAgICAgICBib3gtc2hhZG93OiAke0RULlRfU0hBRE9XX0JMT0NLX0RFRkFVTFRfTEd9O1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgTWVzc2FnZUNvbnRlbnRXcmFwID0gc3R5bGVkKFRyYW5zaXRpb25Hcm91cClgXG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHRvcDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDBweDtcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgICB6LWluZGV4OiAxMDYwO1xuXG4gICAgLiR7YW5pbWF0aW9uTmFtZX0tZW50ZXIsIC4ke2FuaW1hdGlvbk5hbWV9LWFwcGVhciwgLiR7YW5pbWF0aW9uTmFtZX0tbGVhdmUsIC4ke2FuaW1hdGlvbk5hbWV9LWV4aXQge1xuICAgICAgICBhbmltYXRpb24tZHVyYXRpb246ICR7YW5pbWF0aW9uRHVyYXRpb259bXM7XG4gICAgICAgIGFuaW1hdGlvbi1maWxsLW1vZGU6IGJvdGg7XG4gICAgfVxuICAgIC4ke2FuaW1hdGlvbk5hbWV9LWVudGVyLCAuJHthbmltYXRpb25OYW1lfS1hcHBlYXIge1xuICAgICAgICBhbmltYXRpb24tbmFtZTogJHtzbGlkZUluUmlnaHR9O1xuICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4zLCAxLjMsIDAuMywgMSk7XG4gICAgfVxuICAgIC4ke2FuaW1hdGlvbk5hbWV9LWxlYXZlLCAuJHthbmltYXRpb25OYW1lfS1leGl0IHtcbiAgICAgICAgYW5pbWF0aW9uLW5hbWU6ICR7c2xpZGVVcE91dH07XG4gICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjM0LCAwLjY5LCAwLjEsIDEpO1xuICAgIH1cblxuICAgIC4ke3ByZWZpeENsc30ge1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDE2cHg7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMTZweDtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gICAgfVxuYDtcbiJdfQ== */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lc3NhZ2Uvc3R5bGUvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMEVJIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lc3NhZ2Uvc3R5bGUvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCB7IFRyYW5zaXRpb25Hcm91cCB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuXG5pbXBvcnQgU3ZnSWNvbiBmcm9tICdzcmMvY29tcG9uZW50cy9TdmdJY29uJztcbmltcG9ydCB7IHNsaWRlVXBPdXQsIHNsaWRlSW5SaWdodCB9IGZyb20gJ3NyYy9zdHlsZS9hbmltYXRpb24nO1xuaW1wb3J0IGNvbmZpZyBmcm9tICdzcmMvY29uZmlnJztcbmltcG9ydCB3aXRoUHJvcHMgZnJvbSAnc3JjL3V0aWxzL3dpdGhQcm9wcyc7XG5cbmNvbnN0IHsgcHJlZml4Q2xzOiBfcHJlZml4Q2xzIH0gPSBjb25maWc7XG5leHBvcnQgY29uc3QgcHJlZml4Q2xzID0gX3ByZWZpeENscyArICctbWVzc2FnZSc7XG5leHBvcnQgY29uc3QgdGl0bGVDbHMgPSBwcmVmaXhDbHMgKyAnLXRpdGxlJztcbmV4cG9ydCBjb25zdCBjb250ZW50Q2xzID0gcHJlZml4Q2xzICsgJy1jb250ZW50JztcblxuZXhwb3J0IGNvbnN0IGFuaW1hdGlvbkR1cmF0aW9uID0gNDAwO1xuZXhwb3J0IGNvbnN0IGFuaW1hdGlvbk5hbWUgPSAndWMtZmUtYW5pbWF0aW9uLWZhZGUnO1xuXG5jb25zdCBjb2xvck1hcCA9IHtcbiAgICBzdWNjZXNzOiAnVF9DT0xPUl9URVhUX1NVQ0NFU1MnLFxuICAgIHdhcm5pbmc6ICdUX0NPTE9SX1RFWFRfV0FSTklORycsXG4gICAgZXJyb3I6ICdUX0NPTE9SX1RFWFRfRVJST1InLFxuICAgIGxvYWRpbmc6ICdUX0NPTE9SX1RFWFRfUFJJTUFSWV9ERUZBVUxUJyxcbiAgICBkZWZhdWx0OiAnVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVCdcbn07XG5cbmV4cG9ydCBjb25zdCBUaXBJY29uID0gd2l0aFByb3BzKCkoXG4gICAgc3R5bGVkKFN2Z0ljb24pKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc3R5bGVUeXBlLFxuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgZmlsbDogJHtEVFtjb2xvck1hcFtzdHlsZVR5cGVdXX07XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBJY29uV3JhcCA9IHN0eWxlZCgnZGl2JylgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgd2lkdGg6IDIwcHg7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBsaW5lLWhlaWdodDogMjBweDtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAxN3B4O1xuICAgIGxlZnQ6IDE2cHg7XG5gO1xuZXhwb3J0IGNvbnN0IENsb3NlSWNvbldyYXAgPSB3aXRoUHJvcHMoKShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICAgICAgICAgIHdpZHRoOiAyMHB4O1xuICAgICAgICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICB0b3A6IDE3cHg7XG4gICAgICAgICAgICByaWdodDogMTZweDtcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgIHN2ZyB7XG4gICAgICAgICAgICAgICAgZmlsbDogJHtEVC5UX0NPTE9SX1RFWFRfREVGQVVMVF9MSUdIVH07XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBMZWZ0UHJlZml4ID0gd2l0aFByb3BzKCkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0eWxlVHlwZSxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgIHRvcDogLTFweDtcbiAgICAgICAgICAgIGJvdHRvbTogLTFweDtcbiAgICAgICAgICAgIGxlZnQ6IC0xcHg7XG4gICAgICAgICAgICB3aWR0aDogNHB4O1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtEVFtjb2xvck1hcFtzdHlsZVR5cGVdXX07XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBUaXRsZVdyYXAgPSB3aXRoUHJvcHMoe1xuICAgIGNsYXNzTmFtZTogdGl0bGVDbHNcbn0pKFxuICAgIHN0eWxlZCgnaDMnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIG1hcmdpbjogMHB4O1xuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMzZweDtcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogNDRweDtcbiAgICAgICAgICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IENvbnRlbnRXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IGNvbnRlbnRDbHNcbn0pKFxuICAgIHN0eWxlZCgnZGl2JykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAzNnB4O1xuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA0NHB4O1xuICAgICAgICAgICAgd29yZC1icmVhazogYnJlYWstYWxsO1xuICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IEZvb3RlcldyYXAgPSBzdHlsZWQoJ2RpdicpYFxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICAgIG1hcmdpbi1yaWdodDogMTZweDtcbiAgICBtYXJnaW4tbGVmdDogNDRweDtcbiAgICBtYXJnaW4tdG9wOiA4cHg7XG5gO1xuXG5leHBvcnQgY29uc3QgTWVzc2FnZVdyYXAgPSB3aXRoUHJvcHMoe1xuICAgIGNsYXNzTmFtZTogcHJlZml4Q2xzXG59KShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc3R5bGVUeXBlLFxuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgIHdpZHRoOiAzNDBweDtcbiAgICAgICAgICAgIG1pbi1oZWlnaHQ6IDU2cHg7XG4gICAgICAgICAgICBwYWRkaW5nOiAxNXB4IDA7XG4gICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAke0RULlRfQ09MT1JfTElORV9ERUZBVUxUX0xJR0hUfTtcbiAgICAgICAgICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiA0cHg7XG4gICAgICAgICAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogNHB4O1xuICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfQlJJR0hUfTtcbiAgICAgICAgICAgIGJveC1zaGFkb3c6ICR7RFQuVF9TSEFET1dfQkxPQ0tfREVGQVVMVF9MR307XG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBNZXNzYWdlQ29udGVudFdyYXAgPSBzdHlsZWQoVHJhbnNpdGlvbkdyb3VwKWBcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgdG9wOiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMHB4O1xuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuICAgIHotaW5kZXg6IDEwNjA7XG5cbiAgICAuJHthbmltYXRpb25OYW1lfS1lbnRlciwgLiR7YW5pbWF0aW9uTmFtZX0tYXBwZWFyLCAuJHthbmltYXRpb25OYW1lfS1sZWF2ZSwgLiR7YW5pbWF0aW9uTmFtZX0tZXhpdCB7XG4gICAgICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogJHthbmltYXRpb25EdXJhdGlvbn1tcztcbiAgICAgICAgYW5pbWF0aW9uLWZpbGwtbW9kZTogYm90aDtcbiAgICB9XG4gICAgLiR7YW5pbWF0aW9uTmFtZX0tZW50ZXIsIC4ke2FuaW1hdGlvbk5hbWV9LWFwcGVhciB7XG4gICAgICAgIGFuaW1hdGlvbi1uYW1lOiAke3NsaWRlSW5SaWdodH07XG4gICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjMsIDEuMywgMC4zLCAxKTtcbiAgICB9XG4gICAgLiR7YW5pbWF0aW9uTmFtZX0tbGVhdmUsIC4ke2FuaW1hdGlvbk5hbWV9LWV4aXQge1xuICAgICAgICBhbmltYXRpb24tbmFtZTogJHtzbGlkZVVwT3V0fTtcbiAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMzQsIDAuNjksIDAuMSwgMSk7XG4gICAgfVxuXG4gICAgLiR7cHJlZml4Q2xzfSB7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xuICAgICAgICBtYXJnaW4tbGVmdDogYXV0bztcbiAgICB9XG5gO1xuIl19 */"));
exports.LeftPrefix = LeftPrefix;
var TitleWrap = (0, _withProps.default)({
  className: titleCls
})(( /*#__PURE__*/0, _styledBase.default)('h3', {
  target: "e1t4tau64",
  label: "TitleWrap"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var DT = props.theme.designTokens;
  return /*#__PURE__*/(0, _core.css)("margin:0px;padding-right:36px;padding-left:44px;word-break:break-all;font-size:14px;font-weight:bold;color:", DT.T_COLOR_TEXT_DEFAULT_DARK, ";line-height:24px;;label:TitleWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lc3NhZ2Uvc3R5bGUvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUdrQiIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9NZXNzYWdlL3N0eWxlL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uR3JvdXAgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcblxuaW1wb3J0IFN2Z0ljb24gZnJvbSAnc3JjL2NvbXBvbmVudHMvU3ZnSWNvbic7XG5pbXBvcnQgeyBzbGlkZVVwT3V0LCBzbGlkZUluUmlnaHQgfSBmcm9tICdzcmMvc3R5bGUvYW5pbWF0aW9uJztcbmltcG9ydCBjb25maWcgZnJvbSAnc3JjL2NvbmZpZyc7XG5pbXBvcnQgd2l0aFByb3BzIGZyb20gJ3NyYy91dGlscy93aXRoUHJvcHMnO1xuXG5jb25zdCB7IHByZWZpeENsczogX3ByZWZpeENscyB9ID0gY29uZmlnO1xuZXhwb3J0IGNvbnN0IHByZWZpeENscyA9IF9wcmVmaXhDbHMgKyAnLW1lc3NhZ2UnO1xuZXhwb3J0IGNvbnN0IHRpdGxlQ2xzID0gcHJlZml4Q2xzICsgJy10aXRsZSc7XG5leHBvcnQgY29uc3QgY29udGVudENscyA9IHByZWZpeENscyArICctY29udGVudCc7XG5cbmV4cG9ydCBjb25zdCBhbmltYXRpb25EdXJhdGlvbiA9IDQwMDtcbmV4cG9ydCBjb25zdCBhbmltYXRpb25OYW1lID0gJ3VjLWZlLWFuaW1hdGlvbi1mYWRlJztcblxuY29uc3QgY29sb3JNYXAgPSB7XG4gICAgc3VjY2VzczogJ1RfQ09MT1JfVEVYVF9TVUNDRVNTJyxcbiAgICB3YXJuaW5nOiAnVF9DT0xPUl9URVhUX1dBUk5JTkcnLFxuICAgIGVycm9yOiAnVF9DT0xPUl9URVhUX0VSUk9SJyxcbiAgICBsb2FkaW5nOiAnVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVCcsXG4gICAgZGVmYXVsdDogJ1RfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFQnXG59O1xuXG5leHBvcnQgY29uc3QgVGlwSWNvbiA9IHdpdGhQcm9wcygpKFxuICAgIHN0eWxlZChTdmdJY29uKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0eWxlVHlwZSxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGZpbGw6ICR7RFRbY29sb3JNYXBbc3R5bGVUeXBlXV19O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgSWNvbldyYXAgPSBzdHlsZWQoJ2RpdicpYFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIHdpZHRoOiAyMHB4O1xuICAgIGhlaWdodDogMjBweDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMTdweDtcbiAgICBsZWZ0OiAxNnB4O1xuYDtcbmV4cG9ydCBjb25zdCBDbG9zZUljb25XcmFwID0gd2l0aFByb3BzKCkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBmb250LXNpemU6IDIwcHg7XG4gICAgICAgICAgICB3aWR0aDogMjBweDtcbiAgICAgICAgICAgIGhlaWdodDogMjBweDtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgdG9wOiAxN3B4O1xuICAgICAgICAgICAgcmlnaHQ6IDE2cHg7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICBzdmcge1xuICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfTElHSFR9O1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgTGVmdFByZWZpeCA9IHdpdGhQcm9wcygpKFxuICAgIHN0eWxlZCgnZGl2JykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzdHlsZVR5cGUsXG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICB0b3A6IC0xcHg7XG4gICAgICAgICAgICBib3R0b206IC0xcHg7XG4gICAgICAgICAgICBsZWZ0OiAtMXB4O1xuICAgICAgICAgICAgd2lkdGg6IDRweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7RFRbY29sb3JNYXBbc3R5bGVUeXBlXV19O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgVGl0bGVXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IHRpdGxlQ2xzXG59KShcbiAgICBzdHlsZWQoJ2gzJykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBtYXJnaW46IDBweDtcbiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDM2cHg7XG4gICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDQ0cHg7XG4gICAgICAgICAgICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XG4gICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBDb250ZW50V3JhcCA9IHdpdGhQcm9wcyh7XG4gICAgY2xhc3NOYW1lOiBjb250ZW50Q2xzXG59KShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMzZweDtcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogNDRweDtcbiAgICAgICAgICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBGb290ZXJXcmFwID0gc3R5bGVkKCdkaXYnKWBcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICBtYXJnaW4tcmlnaHQ6IDE2cHg7XG4gICAgbWFyZ2luLWxlZnQ6IDQ0cHg7XG4gICAgbWFyZ2luLXRvcDogOHB4O1xuYDtcblxuZXhwb3J0IGNvbnN0IE1lc3NhZ2VXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IHByZWZpeENsc1xufSkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0eWxlVHlwZSxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICB3aWR0aDogMzQwcHg7XG4gICAgICAgICAgICBtaW4taGVpZ2h0OiA1NnB4O1xuICAgICAgICAgICAgcGFkZGluZzogMTVweCAwO1xuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHtEVC5UX0NPTE9SX0xJTkVfREVGQVVMVF9MSUdIVH07XG4gICAgICAgICAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogNHB4O1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDRweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19ERUZBVUxUX0JSSUdIVH07XG4gICAgICAgICAgICBib3gtc2hhZG93OiAke0RULlRfU0hBRE9XX0JMT0NLX0RFRkFVTFRfTEd9O1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgTWVzc2FnZUNvbnRlbnRXcmFwID0gc3R5bGVkKFRyYW5zaXRpb25Hcm91cClgXG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHRvcDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDBweDtcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgICB6LWluZGV4OiAxMDYwO1xuXG4gICAgLiR7YW5pbWF0aW9uTmFtZX0tZW50ZXIsIC4ke2FuaW1hdGlvbk5hbWV9LWFwcGVhciwgLiR7YW5pbWF0aW9uTmFtZX0tbGVhdmUsIC4ke2FuaW1hdGlvbk5hbWV9LWV4aXQge1xuICAgICAgICBhbmltYXRpb24tZHVyYXRpb246ICR7YW5pbWF0aW9uRHVyYXRpb259bXM7XG4gICAgICAgIGFuaW1hdGlvbi1maWxsLW1vZGU6IGJvdGg7XG4gICAgfVxuICAgIC4ke2FuaW1hdGlvbk5hbWV9LWVudGVyLCAuJHthbmltYXRpb25OYW1lfS1hcHBlYXIge1xuICAgICAgICBhbmltYXRpb24tbmFtZTogJHtzbGlkZUluUmlnaHR9O1xuICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4zLCAxLjMsIDAuMywgMSk7XG4gICAgfVxuICAgIC4ke2FuaW1hdGlvbk5hbWV9LWxlYXZlLCAuJHthbmltYXRpb25OYW1lfS1leGl0IHtcbiAgICAgICAgYW5pbWF0aW9uLW5hbWU6ICR7c2xpZGVVcE91dH07XG4gICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjM0LCAwLjY5LCAwLjEsIDEpO1xuICAgIH1cblxuICAgIC4ke3ByZWZpeENsc30ge1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDE2cHg7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMTZweDtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gICAgfVxuYDtcbiJdfQ== */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lc3NhZ2Uvc3R5bGUvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBOEZJIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lc3NhZ2Uvc3R5bGUvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCB7IFRyYW5zaXRpb25Hcm91cCB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuXG5pbXBvcnQgU3ZnSWNvbiBmcm9tICdzcmMvY29tcG9uZW50cy9TdmdJY29uJztcbmltcG9ydCB7IHNsaWRlVXBPdXQsIHNsaWRlSW5SaWdodCB9IGZyb20gJ3NyYy9zdHlsZS9hbmltYXRpb24nO1xuaW1wb3J0IGNvbmZpZyBmcm9tICdzcmMvY29uZmlnJztcbmltcG9ydCB3aXRoUHJvcHMgZnJvbSAnc3JjL3V0aWxzL3dpdGhQcm9wcyc7XG5cbmNvbnN0IHsgcHJlZml4Q2xzOiBfcHJlZml4Q2xzIH0gPSBjb25maWc7XG5leHBvcnQgY29uc3QgcHJlZml4Q2xzID0gX3ByZWZpeENscyArICctbWVzc2FnZSc7XG5leHBvcnQgY29uc3QgdGl0bGVDbHMgPSBwcmVmaXhDbHMgKyAnLXRpdGxlJztcbmV4cG9ydCBjb25zdCBjb250ZW50Q2xzID0gcHJlZml4Q2xzICsgJy1jb250ZW50JztcblxuZXhwb3J0IGNvbnN0IGFuaW1hdGlvbkR1cmF0aW9uID0gNDAwO1xuZXhwb3J0IGNvbnN0IGFuaW1hdGlvbk5hbWUgPSAndWMtZmUtYW5pbWF0aW9uLWZhZGUnO1xuXG5jb25zdCBjb2xvck1hcCA9IHtcbiAgICBzdWNjZXNzOiAnVF9DT0xPUl9URVhUX1NVQ0NFU1MnLFxuICAgIHdhcm5pbmc6ICdUX0NPTE9SX1RFWFRfV0FSTklORycsXG4gICAgZXJyb3I6ICdUX0NPTE9SX1RFWFRfRVJST1InLFxuICAgIGxvYWRpbmc6ICdUX0NPTE9SX1RFWFRfUFJJTUFSWV9ERUZBVUxUJyxcbiAgICBkZWZhdWx0OiAnVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVCdcbn07XG5cbmV4cG9ydCBjb25zdCBUaXBJY29uID0gd2l0aFByb3BzKCkoXG4gICAgc3R5bGVkKFN2Z0ljb24pKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc3R5bGVUeXBlLFxuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgZmlsbDogJHtEVFtjb2xvck1hcFtzdHlsZVR5cGVdXX07XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBJY29uV3JhcCA9IHN0eWxlZCgnZGl2JylgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgd2lkdGg6IDIwcHg7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBsaW5lLWhlaWdodDogMjBweDtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAxN3B4O1xuICAgIGxlZnQ6IDE2cHg7XG5gO1xuZXhwb3J0IGNvbnN0IENsb3NlSWNvbldyYXAgPSB3aXRoUHJvcHMoKShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICAgICAgICAgIHdpZHRoOiAyMHB4O1xuICAgICAgICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICB0b3A6IDE3cHg7XG4gICAgICAgICAgICByaWdodDogMTZweDtcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgIHN2ZyB7XG4gICAgICAgICAgICAgICAgZmlsbDogJHtEVC5UX0NPTE9SX1RFWFRfREVGQVVMVF9MSUdIVH07XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBMZWZ0UHJlZml4ID0gd2l0aFByb3BzKCkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0eWxlVHlwZSxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgIHRvcDogLTFweDtcbiAgICAgICAgICAgIGJvdHRvbTogLTFweDtcbiAgICAgICAgICAgIGxlZnQ6IC0xcHg7XG4gICAgICAgICAgICB3aWR0aDogNHB4O1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtEVFtjb2xvck1hcFtzdHlsZVR5cGVdXX07XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBUaXRsZVdyYXAgPSB3aXRoUHJvcHMoe1xuICAgIGNsYXNzTmFtZTogdGl0bGVDbHNcbn0pKFxuICAgIHN0eWxlZCgnaDMnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIG1hcmdpbjogMHB4O1xuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMzZweDtcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogNDRweDtcbiAgICAgICAgICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IENvbnRlbnRXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IGNvbnRlbnRDbHNcbn0pKFxuICAgIHN0eWxlZCgnZGl2JykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAzNnB4O1xuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA0NHB4O1xuICAgICAgICAgICAgd29yZC1icmVhazogYnJlYWstYWxsO1xuICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IEZvb3RlcldyYXAgPSBzdHlsZWQoJ2RpdicpYFxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICAgIG1hcmdpbi1yaWdodDogMTZweDtcbiAgICBtYXJnaW4tbGVmdDogNDRweDtcbiAgICBtYXJnaW4tdG9wOiA4cHg7XG5gO1xuXG5leHBvcnQgY29uc3QgTWVzc2FnZVdyYXAgPSB3aXRoUHJvcHMoe1xuICAgIGNsYXNzTmFtZTogcHJlZml4Q2xzXG59KShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc3R5bGVUeXBlLFxuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgIHdpZHRoOiAzNDBweDtcbiAgICAgICAgICAgIG1pbi1oZWlnaHQ6IDU2cHg7XG4gICAgICAgICAgICBwYWRkaW5nOiAxNXB4IDA7XG4gICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAke0RULlRfQ09MT1JfTElORV9ERUZBVUxUX0xJR0hUfTtcbiAgICAgICAgICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiA0cHg7XG4gICAgICAgICAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogNHB4O1xuICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfQlJJR0hUfTtcbiAgICAgICAgICAgIGJveC1zaGFkb3c6ICR7RFQuVF9TSEFET1dfQkxPQ0tfREVGQVVMVF9MR307XG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBNZXNzYWdlQ29udGVudFdyYXAgPSBzdHlsZWQoVHJhbnNpdGlvbkdyb3VwKWBcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgdG9wOiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMHB4O1xuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuICAgIHotaW5kZXg6IDEwNjA7XG5cbiAgICAuJHthbmltYXRpb25OYW1lfS1lbnRlciwgLiR7YW5pbWF0aW9uTmFtZX0tYXBwZWFyLCAuJHthbmltYXRpb25OYW1lfS1sZWF2ZSwgLiR7YW5pbWF0aW9uTmFtZX0tZXhpdCB7XG4gICAgICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogJHthbmltYXRpb25EdXJhdGlvbn1tcztcbiAgICAgICAgYW5pbWF0aW9uLWZpbGwtbW9kZTogYm90aDtcbiAgICB9XG4gICAgLiR7YW5pbWF0aW9uTmFtZX0tZW50ZXIsIC4ke2FuaW1hdGlvbk5hbWV9LWFwcGVhciB7XG4gICAgICAgIGFuaW1hdGlvbi1uYW1lOiAke3NsaWRlSW5SaWdodH07XG4gICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjMsIDEuMywgMC4zLCAxKTtcbiAgICB9XG4gICAgLiR7YW5pbWF0aW9uTmFtZX0tbGVhdmUsIC4ke2FuaW1hdGlvbk5hbWV9LWV4aXQge1xuICAgICAgICBhbmltYXRpb24tbmFtZTogJHtzbGlkZVVwT3V0fTtcbiAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMzQsIDAuNjksIDAuMSwgMSk7XG4gICAgfVxuXG4gICAgLiR7cHJlZml4Q2xzfSB7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xuICAgICAgICBtYXJnaW4tbGVmdDogYXV0bztcbiAgICB9XG5gO1xuIl19 */"));
exports.TitleWrap = TitleWrap;
var ContentWrap = (0, _withProps.default)({
  className: contentCls
})(( /*#__PURE__*/0, _styledBase.default)('div', {
  target: "e1t4tau65",
  label: "ContentWrap"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var DT = props.theme.designTokens;
  return /*#__PURE__*/(0, _core.css)("padding-right:36px;padding-left:44px;word-break:break-all;font-size:14px;color:", DT.T_COLOR_TEXT_DEFAULT_DARK, ";line-height:24px;;label:ContentWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lc3NhZ2Uvc3R5bGUvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0hrQiIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9NZXNzYWdlL3N0eWxlL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uR3JvdXAgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcblxuaW1wb3J0IFN2Z0ljb24gZnJvbSAnc3JjL2NvbXBvbmVudHMvU3ZnSWNvbic7XG5pbXBvcnQgeyBzbGlkZVVwT3V0LCBzbGlkZUluUmlnaHQgfSBmcm9tICdzcmMvc3R5bGUvYW5pbWF0aW9uJztcbmltcG9ydCBjb25maWcgZnJvbSAnc3JjL2NvbmZpZyc7XG5pbXBvcnQgd2l0aFByb3BzIGZyb20gJ3NyYy91dGlscy93aXRoUHJvcHMnO1xuXG5jb25zdCB7IHByZWZpeENsczogX3ByZWZpeENscyB9ID0gY29uZmlnO1xuZXhwb3J0IGNvbnN0IHByZWZpeENscyA9IF9wcmVmaXhDbHMgKyAnLW1lc3NhZ2UnO1xuZXhwb3J0IGNvbnN0IHRpdGxlQ2xzID0gcHJlZml4Q2xzICsgJy10aXRsZSc7XG5leHBvcnQgY29uc3QgY29udGVudENscyA9IHByZWZpeENscyArICctY29udGVudCc7XG5cbmV4cG9ydCBjb25zdCBhbmltYXRpb25EdXJhdGlvbiA9IDQwMDtcbmV4cG9ydCBjb25zdCBhbmltYXRpb25OYW1lID0gJ3VjLWZlLWFuaW1hdGlvbi1mYWRlJztcblxuY29uc3QgY29sb3JNYXAgPSB7XG4gICAgc3VjY2VzczogJ1RfQ09MT1JfVEVYVF9TVUNDRVNTJyxcbiAgICB3YXJuaW5nOiAnVF9DT0xPUl9URVhUX1dBUk5JTkcnLFxuICAgIGVycm9yOiAnVF9DT0xPUl9URVhUX0VSUk9SJyxcbiAgICBsb2FkaW5nOiAnVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVCcsXG4gICAgZGVmYXVsdDogJ1RfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFQnXG59O1xuXG5leHBvcnQgY29uc3QgVGlwSWNvbiA9IHdpdGhQcm9wcygpKFxuICAgIHN0eWxlZChTdmdJY29uKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0eWxlVHlwZSxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGZpbGw6ICR7RFRbY29sb3JNYXBbc3R5bGVUeXBlXV19O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgSWNvbldyYXAgPSBzdHlsZWQoJ2RpdicpYFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIHdpZHRoOiAyMHB4O1xuICAgIGhlaWdodDogMjBweDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMTdweDtcbiAgICBsZWZ0OiAxNnB4O1xuYDtcbmV4cG9ydCBjb25zdCBDbG9zZUljb25XcmFwID0gd2l0aFByb3BzKCkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBmb250LXNpemU6IDIwcHg7XG4gICAgICAgICAgICB3aWR0aDogMjBweDtcbiAgICAgICAgICAgIGhlaWdodDogMjBweDtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgdG9wOiAxN3B4O1xuICAgICAgICAgICAgcmlnaHQ6IDE2cHg7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICBzdmcge1xuICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfTElHSFR9O1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgTGVmdFByZWZpeCA9IHdpdGhQcm9wcygpKFxuICAgIHN0eWxlZCgnZGl2JykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzdHlsZVR5cGUsXG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICB0b3A6IC0xcHg7XG4gICAgICAgICAgICBib3R0b206IC0xcHg7XG4gICAgICAgICAgICBsZWZ0OiAtMXB4O1xuICAgICAgICAgICAgd2lkdGg6IDRweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7RFRbY29sb3JNYXBbc3R5bGVUeXBlXV19O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgVGl0bGVXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IHRpdGxlQ2xzXG59KShcbiAgICBzdHlsZWQoJ2gzJykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBtYXJnaW46IDBweDtcbiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDM2cHg7XG4gICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDQ0cHg7XG4gICAgICAgICAgICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XG4gICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBDb250ZW50V3JhcCA9IHdpdGhQcm9wcyh7XG4gICAgY2xhc3NOYW1lOiBjb250ZW50Q2xzXG59KShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMzZweDtcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogNDRweDtcbiAgICAgICAgICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBGb290ZXJXcmFwID0gc3R5bGVkKCdkaXYnKWBcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICBtYXJnaW4tcmlnaHQ6IDE2cHg7XG4gICAgbWFyZ2luLWxlZnQ6IDQ0cHg7XG4gICAgbWFyZ2luLXRvcDogOHB4O1xuYDtcblxuZXhwb3J0IGNvbnN0IE1lc3NhZ2VXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IHByZWZpeENsc1xufSkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0eWxlVHlwZSxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICB3aWR0aDogMzQwcHg7XG4gICAgICAgICAgICBtaW4taGVpZ2h0OiA1NnB4O1xuICAgICAgICAgICAgcGFkZGluZzogMTVweCAwO1xuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHtEVC5UX0NPTE9SX0xJTkVfREVGQVVMVF9MSUdIVH07XG4gICAgICAgICAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogNHB4O1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDRweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19ERUZBVUxUX0JSSUdIVH07XG4gICAgICAgICAgICBib3gtc2hhZG93OiAke0RULlRfU0hBRE9XX0JMT0NLX0RFRkFVTFRfTEd9O1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgTWVzc2FnZUNvbnRlbnRXcmFwID0gc3R5bGVkKFRyYW5zaXRpb25Hcm91cClgXG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHRvcDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDBweDtcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgICB6LWluZGV4OiAxMDYwO1xuXG4gICAgLiR7YW5pbWF0aW9uTmFtZX0tZW50ZXIsIC4ke2FuaW1hdGlvbk5hbWV9LWFwcGVhciwgLiR7YW5pbWF0aW9uTmFtZX0tbGVhdmUsIC4ke2FuaW1hdGlvbk5hbWV9LWV4aXQge1xuICAgICAgICBhbmltYXRpb24tZHVyYXRpb246ICR7YW5pbWF0aW9uRHVyYXRpb259bXM7XG4gICAgICAgIGFuaW1hdGlvbi1maWxsLW1vZGU6IGJvdGg7XG4gICAgfVxuICAgIC4ke2FuaW1hdGlvbk5hbWV9LWVudGVyLCAuJHthbmltYXRpb25OYW1lfS1hcHBlYXIge1xuICAgICAgICBhbmltYXRpb24tbmFtZTogJHtzbGlkZUluUmlnaHR9O1xuICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4zLCAxLjMsIDAuMywgMSk7XG4gICAgfVxuICAgIC4ke2FuaW1hdGlvbk5hbWV9LWxlYXZlLCAuJHthbmltYXRpb25OYW1lfS1leGl0IHtcbiAgICAgICAgYW5pbWF0aW9uLW5hbWU6ICR7c2xpZGVVcE91dH07XG4gICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjM0LCAwLjY5LCAwLjEsIDEpO1xuICAgIH1cblxuICAgIC4ke3ByZWZpeENsc30ge1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDE2cHg7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMTZweDtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gICAgfVxuYDtcbiJdfQ== */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lc3NhZ2Uvc3R5bGUvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUhJIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lc3NhZ2Uvc3R5bGUvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCB7IFRyYW5zaXRpb25Hcm91cCB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuXG5pbXBvcnQgU3ZnSWNvbiBmcm9tICdzcmMvY29tcG9uZW50cy9TdmdJY29uJztcbmltcG9ydCB7IHNsaWRlVXBPdXQsIHNsaWRlSW5SaWdodCB9IGZyb20gJ3NyYy9zdHlsZS9hbmltYXRpb24nO1xuaW1wb3J0IGNvbmZpZyBmcm9tICdzcmMvY29uZmlnJztcbmltcG9ydCB3aXRoUHJvcHMgZnJvbSAnc3JjL3V0aWxzL3dpdGhQcm9wcyc7XG5cbmNvbnN0IHsgcHJlZml4Q2xzOiBfcHJlZml4Q2xzIH0gPSBjb25maWc7XG5leHBvcnQgY29uc3QgcHJlZml4Q2xzID0gX3ByZWZpeENscyArICctbWVzc2FnZSc7XG5leHBvcnQgY29uc3QgdGl0bGVDbHMgPSBwcmVmaXhDbHMgKyAnLXRpdGxlJztcbmV4cG9ydCBjb25zdCBjb250ZW50Q2xzID0gcHJlZml4Q2xzICsgJy1jb250ZW50JztcblxuZXhwb3J0IGNvbnN0IGFuaW1hdGlvbkR1cmF0aW9uID0gNDAwO1xuZXhwb3J0IGNvbnN0IGFuaW1hdGlvbk5hbWUgPSAndWMtZmUtYW5pbWF0aW9uLWZhZGUnO1xuXG5jb25zdCBjb2xvck1hcCA9IHtcbiAgICBzdWNjZXNzOiAnVF9DT0xPUl9URVhUX1NVQ0NFU1MnLFxuICAgIHdhcm5pbmc6ICdUX0NPTE9SX1RFWFRfV0FSTklORycsXG4gICAgZXJyb3I6ICdUX0NPTE9SX1RFWFRfRVJST1InLFxuICAgIGxvYWRpbmc6ICdUX0NPTE9SX1RFWFRfUFJJTUFSWV9ERUZBVUxUJyxcbiAgICBkZWZhdWx0OiAnVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVCdcbn07XG5cbmV4cG9ydCBjb25zdCBUaXBJY29uID0gd2l0aFByb3BzKCkoXG4gICAgc3R5bGVkKFN2Z0ljb24pKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc3R5bGVUeXBlLFxuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgZmlsbDogJHtEVFtjb2xvck1hcFtzdHlsZVR5cGVdXX07XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBJY29uV3JhcCA9IHN0eWxlZCgnZGl2JylgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgd2lkdGg6IDIwcHg7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBsaW5lLWhlaWdodDogMjBweDtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAxN3B4O1xuICAgIGxlZnQ6IDE2cHg7XG5gO1xuZXhwb3J0IGNvbnN0IENsb3NlSWNvbldyYXAgPSB3aXRoUHJvcHMoKShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICAgICAgICAgIHdpZHRoOiAyMHB4O1xuICAgICAgICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICB0b3A6IDE3cHg7XG4gICAgICAgICAgICByaWdodDogMTZweDtcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgIHN2ZyB7XG4gICAgICAgICAgICAgICAgZmlsbDogJHtEVC5UX0NPTE9SX1RFWFRfREVGQVVMVF9MSUdIVH07XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBMZWZ0UHJlZml4ID0gd2l0aFByb3BzKCkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0eWxlVHlwZSxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgIHRvcDogLTFweDtcbiAgICAgICAgICAgIGJvdHRvbTogLTFweDtcbiAgICAgICAgICAgIGxlZnQ6IC0xcHg7XG4gICAgICAgICAgICB3aWR0aDogNHB4O1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtEVFtjb2xvck1hcFtzdHlsZVR5cGVdXX07XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBUaXRsZVdyYXAgPSB3aXRoUHJvcHMoe1xuICAgIGNsYXNzTmFtZTogdGl0bGVDbHNcbn0pKFxuICAgIHN0eWxlZCgnaDMnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIG1hcmdpbjogMHB4O1xuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMzZweDtcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogNDRweDtcbiAgICAgICAgICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IENvbnRlbnRXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IGNvbnRlbnRDbHNcbn0pKFxuICAgIHN0eWxlZCgnZGl2JykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAzNnB4O1xuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA0NHB4O1xuICAgICAgICAgICAgd29yZC1icmVhazogYnJlYWstYWxsO1xuICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IEZvb3RlcldyYXAgPSBzdHlsZWQoJ2RpdicpYFxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICAgIG1hcmdpbi1yaWdodDogMTZweDtcbiAgICBtYXJnaW4tbGVmdDogNDRweDtcbiAgICBtYXJnaW4tdG9wOiA4cHg7XG5gO1xuXG5leHBvcnQgY29uc3QgTWVzc2FnZVdyYXAgPSB3aXRoUHJvcHMoe1xuICAgIGNsYXNzTmFtZTogcHJlZml4Q2xzXG59KShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc3R5bGVUeXBlLFxuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgIHdpZHRoOiAzNDBweDtcbiAgICAgICAgICAgIG1pbi1oZWlnaHQ6IDU2cHg7XG4gICAgICAgICAgICBwYWRkaW5nOiAxNXB4IDA7XG4gICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAke0RULlRfQ09MT1JfTElORV9ERUZBVUxUX0xJR0hUfTtcbiAgICAgICAgICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiA0cHg7XG4gICAgICAgICAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogNHB4O1xuICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfQlJJR0hUfTtcbiAgICAgICAgICAgIGJveC1zaGFkb3c6ICR7RFQuVF9TSEFET1dfQkxPQ0tfREVGQVVMVF9MR307XG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBNZXNzYWdlQ29udGVudFdyYXAgPSBzdHlsZWQoVHJhbnNpdGlvbkdyb3VwKWBcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgdG9wOiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMHB4O1xuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuICAgIHotaW5kZXg6IDEwNjA7XG5cbiAgICAuJHthbmltYXRpb25OYW1lfS1lbnRlciwgLiR7YW5pbWF0aW9uTmFtZX0tYXBwZWFyLCAuJHthbmltYXRpb25OYW1lfS1sZWF2ZSwgLiR7YW5pbWF0aW9uTmFtZX0tZXhpdCB7XG4gICAgICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogJHthbmltYXRpb25EdXJhdGlvbn1tcztcbiAgICAgICAgYW5pbWF0aW9uLWZpbGwtbW9kZTogYm90aDtcbiAgICB9XG4gICAgLiR7YW5pbWF0aW9uTmFtZX0tZW50ZXIsIC4ke2FuaW1hdGlvbk5hbWV9LWFwcGVhciB7XG4gICAgICAgIGFuaW1hdGlvbi1uYW1lOiAke3NsaWRlSW5SaWdodH07XG4gICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjMsIDEuMywgMC4zLCAxKTtcbiAgICB9XG4gICAgLiR7YW5pbWF0aW9uTmFtZX0tbGVhdmUsIC4ke2FuaW1hdGlvbk5hbWV9LWV4aXQge1xuICAgICAgICBhbmltYXRpb24tbmFtZTogJHtzbGlkZVVwT3V0fTtcbiAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMzQsIDAuNjksIDAuMSwgMSk7XG4gICAgfVxuXG4gICAgLiR7cHJlZml4Q2xzfSB7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xuICAgICAgICBtYXJnaW4tbGVmdDogYXV0bztcbiAgICB9XG5gO1xuIl19 */"));
exports.ContentWrap = ContentWrap;
var FooterWrap = ( /*#__PURE__*/0, _styledBase.default)('div', {
  target: "e1t4tau66",
  label: "FooterWrap"
})(process.env.NODE_ENV === "production" ? {
  name: "15or21m",
  styles: "text-align:right;margin-right:16px;margin-left:44px;margin-top:8px;"
} : {
  name: "15or21m",
  styles: "text-align:right;margin-right:16px;margin-left:44px;margin-top:8px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lc3NhZ2Uvc3R5bGUvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUl1QyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9NZXNzYWdlL3N0eWxlL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uR3JvdXAgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcblxuaW1wb3J0IFN2Z0ljb24gZnJvbSAnc3JjL2NvbXBvbmVudHMvU3ZnSWNvbic7XG5pbXBvcnQgeyBzbGlkZVVwT3V0LCBzbGlkZUluUmlnaHQgfSBmcm9tICdzcmMvc3R5bGUvYW5pbWF0aW9uJztcbmltcG9ydCBjb25maWcgZnJvbSAnc3JjL2NvbmZpZyc7XG5pbXBvcnQgd2l0aFByb3BzIGZyb20gJ3NyYy91dGlscy93aXRoUHJvcHMnO1xuXG5jb25zdCB7IHByZWZpeENsczogX3ByZWZpeENscyB9ID0gY29uZmlnO1xuZXhwb3J0IGNvbnN0IHByZWZpeENscyA9IF9wcmVmaXhDbHMgKyAnLW1lc3NhZ2UnO1xuZXhwb3J0IGNvbnN0IHRpdGxlQ2xzID0gcHJlZml4Q2xzICsgJy10aXRsZSc7XG5leHBvcnQgY29uc3QgY29udGVudENscyA9IHByZWZpeENscyArICctY29udGVudCc7XG5cbmV4cG9ydCBjb25zdCBhbmltYXRpb25EdXJhdGlvbiA9IDQwMDtcbmV4cG9ydCBjb25zdCBhbmltYXRpb25OYW1lID0gJ3VjLWZlLWFuaW1hdGlvbi1mYWRlJztcblxuY29uc3QgY29sb3JNYXAgPSB7XG4gICAgc3VjY2VzczogJ1RfQ09MT1JfVEVYVF9TVUNDRVNTJyxcbiAgICB3YXJuaW5nOiAnVF9DT0xPUl9URVhUX1dBUk5JTkcnLFxuICAgIGVycm9yOiAnVF9DT0xPUl9URVhUX0VSUk9SJyxcbiAgICBsb2FkaW5nOiAnVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVCcsXG4gICAgZGVmYXVsdDogJ1RfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFQnXG59O1xuXG5leHBvcnQgY29uc3QgVGlwSWNvbiA9IHdpdGhQcm9wcygpKFxuICAgIHN0eWxlZChTdmdJY29uKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0eWxlVHlwZSxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGZpbGw6ICR7RFRbY29sb3JNYXBbc3R5bGVUeXBlXV19O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgSWNvbldyYXAgPSBzdHlsZWQoJ2RpdicpYFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIHdpZHRoOiAyMHB4O1xuICAgIGhlaWdodDogMjBweDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMTdweDtcbiAgICBsZWZ0OiAxNnB4O1xuYDtcbmV4cG9ydCBjb25zdCBDbG9zZUljb25XcmFwID0gd2l0aFByb3BzKCkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBmb250LXNpemU6IDIwcHg7XG4gICAgICAgICAgICB3aWR0aDogMjBweDtcbiAgICAgICAgICAgIGhlaWdodDogMjBweDtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgdG9wOiAxN3B4O1xuICAgICAgICAgICAgcmlnaHQ6IDE2cHg7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICBzdmcge1xuICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfTElHSFR9O1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgTGVmdFByZWZpeCA9IHdpdGhQcm9wcygpKFxuICAgIHN0eWxlZCgnZGl2JykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzdHlsZVR5cGUsXG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICB0b3A6IC0xcHg7XG4gICAgICAgICAgICBib3R0b206IC0xcHg7XG4gICAgICAgICAgICBsZWZ0OiAtMXB4O1xuICAgICAgICAgICAgd2lkdGg6IDRweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7RFRbY29sb3JNYXBbc3R5bGVUeXBlXV19O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgVGl0bGVXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IHRpdGxlQ2xzXG59KShcbiAgICBzdHlsZWQoJ2gzJykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBtYXJnaW46IDBweDtcbiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDM2cHg7XG4gICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDQ0cHg7XG4gICAgICAgICAgICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XG4gICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBDb250ZW50V3JhcCA9IHdpdGhQcm9wcyh7XG4gICAgY2xhc3NOYW1lOiBjb250ZW50Q2xzXG59KShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMzZweDtcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogNDRweDtcbiAgICAgICAgICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBGb290ZXJXcmFwID0gc3R5bGVkKCdkaXYnKWBcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICBtYXJnaW4tcmlnaHQ6IDE2cHg7XG4gICAgbWFyZ2luLWxlZnQ6IDQ0cHg7XG4gICAgbWFyZ2luLXRvcDogOHB4O1xuYDtcblxuZXhwb3J0IGNvbnN0IE1lc3NhZ2VXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IHByZWZpeENsc1xufSkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0eWxlVHlwZSxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICB3aWR0aDogMzQwcHg7XG4gICAgICAgICAgICBtaW4taGVpZ2h0OiA1NnB4O1xuICAgICAgICAgICAgcGFkZGluZzogMTVweCAwO1xuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHtEVC5UX0NPTE9SX0xJTkVfREVGQVVMVF9MSUdIVH07XG4gICAgICAgICAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogNHB4O1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDRweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19ERUZBVUxUX0JSSUdIVH07XG4gICAgICAgICAgICBib3gtc2hhZG93OiAke0RULlRfU0hBRE9XX0JMT0NLX0RFRkFVTFRfTEd9O1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgTWVzc2FnZUNvbnRlbnRXcmFwID0gc3R5bGVkKFRyYW5zaXRpb25Hcm91cClgXG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHRvcDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDBweDtcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgICB6LWluZGV4OiAxMDYwO1xuXG4gICAgLiR7YW5pbWF0aW9uTmFtZX0tZW50ZXIsIC4ke2FuaW1hdGlvbk5hbWV9LWFwcGVhciwgLiR7YW5pbWF0aW9uTmFtZX0tbGVhdmUsIC4ke2FuaW1hdGlvbk5hbWV9LWV4aXQge1xuICAgICAgICBhbmltYXRpb24tZHVyYXRpb246ICR7YW5pbWF0aW9uRHVyYXRpb259bXM7XG4gICAgICAgIGFuaW1hdGlvbi1maWxsLW1vZGU6IGJvdGg7XG4gICAgfVxuICAgIC4ke2FuaW1hdGlvbk5hbWV9LWVudGVyLCAuJHthbmltYXRpb25OYW1lfS1hcHBlYXIge1xuICAgICAgICBhbmltYXRpb24tbmFtZTogJHtzbGlkZUluUmlnaHR9O1xuICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4zLCAxLjMsIDAuMywgMSk7XG4gICAgfVxuICAgIC4ke2FuaW1hdGlvbk5hbWV9LWxlYXZlLCAuJHthbmltYXRpb25OYW1lfS1leGl0IHtcbiAgICAgICAgYW5pbWF0aW9uLW5hbWU6ICR7c2xpZGVVcE91dH07XG4gICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjM0LCAwLjY5LCAwLjEsIDEpO1xuICAgIH1cblxuICAgIC4ke3ByZWZpeENsc30ge1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDE2cHg7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMTZweDtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gICAgfVxuYDtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
exports.FooterWrap = FooterWrap;
var MessageWrap = (0, _withProps.default)({
  className: prefixCls
})(( /*#__PURE__*/0, _styledBase.default)('div', {
  target: "e1t4tau67",
  label: "MessageWrap"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var styleType = props.styleType,
      DT = props.theme.designTokens;
  return /*#__PURE__*/(0, _core.css)("box-sizing:border-box;width:340px;min-height:56px;padding:15px 0;border:1px solid ", DT.T_COLOR_LINE_DEFAULT_LIGHT, ";border-top-right-radius:4px;border-bottom-right-radius:4px;background:", DT.T_COLOR_BG_DEFAULT_BRIGHT, ";box-shadow:", DT.T_SHADOW_BLOCK_DEFAULT_LG, ";position:relative;;label:MessageWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lc3NhZ2Uvc3R5bGUvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUprQiIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9NZXNzYWdlL3N0eWxlL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uR3JvdXAgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcblxuaW1wb3J0IFN2Z0ljb24gZnJvbSAnc3JjL2NvbXBvbmVudHMvU3ZnSWNvbic7XG5pbXBvcnQgeyBzbGlkZVVwT3V0LCBzbGlkZUluUmlnaHQgfSBmcm9tICdzcmMvc3R5bGUvYW5pbWF0aW9uJztcbmltcG9ydCBjb25maWcgZnJvbSAnc3JjL2NvbmZpZyc7XG5pbXBvcnQgd2l0aFByb3BzIGZyb20gJ3NyYy91dGlscy93aXRoUHJvcHMnO1xuXG5jb25zdCB7IHByZWZpeENsczogX3ByZWZpeENscyB9ID0gY29uZmlnO1xuZXhwb3J0IGNvbnN0IHByZWZpeENscyA9IF9wcmVmaXhDbHMgKyAnLW1lc3NhZ2UnO1xuZXhwb3J0IGNvbnN0IHRpdGxlQ2xzID0gcHJlZml4Q2xzICsgJy10aXRsZSc7XG5leHBvcnQgY29uc3QgY29udGVudENscyA9IHByZWZpeENscyArICctY29udGVudCc7XG5cbmV4cG9ydCBjb25zdCBhbmltYXRpb25EdXJhdGlvbiA9IDQwMDtcbmV4cG9ydCBjb25zdCBhbmltYXRpb25OYW1lID0gJ3VjLWZlLWFuaW1hdGlvbi1mYWRlJztcblxuY29uc3QgY29sb3JNYXAgPSB7XG4gICAgc3VjY2VzczogJ1RfQ09MT1JfVEVYVF9TVUNDRVNTJyxcbiAgICB3YXJuaW5nOiAnVF9DT0xPUl9URVhUX1dBUk5JTkcnLFxuICAgIGVycm9yOiAnVF9DT0xPUl9URVhUX0VSUk9SJyxcbiAgICBsb2FkaW5nOiAnVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVCcsXG4gICAgZGVmYXVsdDogJ1RfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFQnXG59O1xuXG5leHBvcnQgY29uc3QgVGlwSWNvbiA9IHdpdGhQcm9wcygpKFxuICAgIHN0eWxlZChTdmdJY29uKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0eWxlVHlwZSxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGZpbGw6ICR7RFRbY29sb3JNYXBbc3R5bGVUeXBlXV19O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgSWNvbldyYXAgPSBzdHlsZWQoJ2RpdicpYFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIHdpZHRoOiAyMHB4O1xuICAgIGhlaWdodDogMjBweDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMTdweDtcbiAgICBsZWZ0OiAxNnB4O1xuYDtcbmV4cG9ydCBjb25zdCBDbG9zZUljb25XcmFwID0gd2l0aFByb3BzKCkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBmb250LXNpemU6IDIwcHg7XG4gICAgICAgICAgICB3aWR0aDogMjBweDtcbiAgICAgICAgICAgIGhlaWdodDogMjBweDtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgdG9wOiAxN3B4O1xuICAgICAgICAgICAgcmlnaHQ6IDE2cHg7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICBzdmcge1xuICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfTElHSFR9O1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgTGVmdFByZWZpeCA9IHdpdGhQcm9wcygpKFxuICAgIHN0eWxlZCgnZGl2JykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzdHlsZVR5cGUsXG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICB0b3A6IC0xcHg7XG4gICAgICAgICAgICBib3R0b206IC0xcHg7XG4gICAgICAgICAgICBsZWZ0OiAtMXB4O1xuICAgICAgICAgICAgd2lkdGg6IDRweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7RFRbY29sb3JNYXBbc3R5bGVUeXBlXV19O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgVGl0bGVXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IHRpdGxlQ2xzXG59KShcbiAgICBzdHlsZWQoJ2gzJykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBtYXJnaW46IDBweDtcbiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDM2cHg7XG4gICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDQ0cHg7XG4gICAgICAgICAgICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XG4gICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBDb250ZW50V3JhcCA9IHdpdGhQcm9wcyh7XG4gICAgY2xhc3NOYW1lOiBjb250ZW50Q2xzXG59KShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMzZweDtcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogNDRweDtcbiAgICAgICAgICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBGb290ZXJXcmFwID0gc3R5bGVkKCdkaXYnKWBcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICBtYXJnaW4tcmlnaHQ6IDE2cHg7XG4gICAgbWFyZ2luLWxlZnQ6IDQ0cHg7XG4gICAgbWFyZ2luLXRvcDogOHB4O1xuYDtcblxuZXhwb3J0IGNvbnN0IE1lc3NhZ2VXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IHByZWZpeENsc1xufSkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0eWxlVHlwZSxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICB3aWR0aDogMzQwcHg7XG4gICAgICAgICAgICBtaW4taGVpZ2h0OiA1NnB4O1xuICAgICAgICAgICAgcGFkZGluZzogMTVweCAwO1xuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHtEVC5UX0NPTE9SX0xJTkVfREVGQVVMVF9MSUdIVH07XG4gICAgICAgICAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogNHB4O1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDRweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19ERUZBVUxUX0JSSUdIVH07XG4gICAgICAgICAgICBib3gtc2hhZG93OiAke0RULlRfU0hBRE9XX0JMT0NLX0RFRkFVTFRfTEd9O1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgTWVzc2FnZUNvbnRlbnRXcmFwID0gc3R5bGVkKFRyYW5zaXRpb25Hcm91cClgXG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHRvcDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDBweDtcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgICB6LWluZGV4OiAxMDYwO1xuXG4gICAgLiR7YW5pbWF0aW9uTmFtZX0tZW50ZXIsIC4ke2FuaW1hdGlvbk5hbWV9LWFwcGVhciwgLiR7YW5pbWF0aW9uTmFtZX0tbGVhdmUsIC4ke2FuaW1hdGlvbk5hbWV9LWV4aXQge1xuICAgICAgICBhbmltYXRpb24tZHVyYXRpb246ICR7YW5pbWF0aW9uRHVyYXRpb259bXM7XG4gICAgICAgIGFuaW1hdGlvbi1maWxsLW1vZGU6IGJvdGg7XG4gICAgfVxuICAgIC4ke2FuaW1hdGlvbk5hbWV9LWVudGVyLCAuJHthbmltYXRpb25OYW1lfS1hcHBlYXIge1xuICAgICAgICBhbmltYXRpb24tbmFtZTogJHtzbGlkZUluUmlnaHR9O1xuICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4zLCAxLjMsIDAuMywgMSk7XG4gICAgfVxuICAgIC4ke2FuaW1hdGlvbk5hbWV9LWxlYXZlLCAuJHthbmltYXRpb25OYW1lfS1leGl0IHtcbiAgICAgICAgYW5pbWF0aW9uLW5hbWU6ICR7c2xpZGVVcE91dH07XG4gICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjM0LCAwLjY5LCAwLjEsIDEpO1xuICAgIH1cblxuICAgIC4ke3ByZWZpeENsc30ge1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDE2cHg7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMTZweDtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gICAgfVxuYDtcbiJdfQ== */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lc3NhZ2Uvc3R5bGUvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNklJIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lc3NhZ2Uvc3R5bGUvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCB7IFRyYW5zaXRpb25Hcm91cCB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuXG5pbXBvcnQgU3ZnSWNvbiBmcm9tICdzcmMvY29tcG9uZW50cy9TdmdJY29uJztcbmltcG9ydCB7IHNsaWRlVXBPdXQsIHNsaWRlSW5SaWdodCB9IGZyb20gJ3NyYy9zdHlsZS9hbmltYXRpb24nO1xuaW1wb3J0IGNvbmZpZyBmcm9tICdzcmMvY29uZmlnJztcbmltcG9ydCB3aXRoUHJvcHMgZnJvbSAnc3JjL3V0aWxzL3dpdGhQcm9wcyc7XG5cbmNvbnN0IHsgcHJlZml4Q2xzOiBfcHJlZml4Q2xzIH0gPSBjb25maWc7XG5leHBvcnQgY29uc3QgcHJlZml4Q2xzID0gX3ByZWZpeENscyArICctbWVzc2FnZSc7XG5leHBvcnQgY29uc3QgdGl0bGVDbHMgPSBwcmVmaXhDbHMgKyAnLXRpdGxlJztcbmV4cG9ydCBjb25zdCBjb250ZW50Q2xzID0gcHJlZml4Q2xzICsgJy1jb250ZW50JztcblxuZXhwb3J0IGNvbnN0IGFuaW1hdGlvbkR1cmF0aW9uID0gNDAwO1xuZXhwb3J0IGNvbnN0IGFuaW1hdGlvbk5hbWUgPSAndWMtZmUtYW5pbWF0aW9uLWZhZGUnO1xuXG5jb25zdCBjb2xvck1hcCA9IHtcbiAgICBzdWNjZXNzOiAnVF9DT0xPUl9URVhUX1NVQ0NFU1MnLFxuICAgIHdhcm5pbmc6ICdUX0NPTE9SX1RFWFRfV0FSTklORycsXG4gICAgZXJyb3I6ICdUX0NPTE9SX1RFWFRfRVJST1InLFxuICAgIGxvYWRpbmc6ICdUX0NPTE9SX1RFWFRfUFJJTUFSWV9ERUZBVUxUJyxcbiAgICBkZWZhdWx0OiAnVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVCdcbn07XG5cbmV4cG9ydCBjb25zdCBUaXBJY29uID0gd2l0aFByb3BzKCkoXG4gICAgc3R5bGVkKFN2Z0ljb24pKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc3R5bGVUeXBlLFxuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgZmlsbDogJHtEVFtjb2xvck1hcFtzdHlsZVR5cGVdXX07XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBJY29uV3JhcCA9IHN0eWxlZCgnZGl2JylgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgd2lkdGg6IDIwcHg7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBsaW5lLWhlaWdodDogMjBweDtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAxN3B4O1xuICAgIGxlZnQ6IDE2cHg7XG5gO1xuZXhwb3J0IGNvbnN0IENsb3NlSWNvbldyYXAgPSB3aXRoUHJvcHMoKShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICAgICAgICAgIHdpZHRoOiAyMHB4O1xuICAgICAgICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICB0b3A6IDE3cHg7XG4gICAgICAgICAgICByaWdodDogMTZweDtcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgIHN2ZyB7XG4gICAgICAgICAgICAgICAgZmlsbDogJHtEVC5UX0NPTE9SX1RFWFRfREVGQVVMVF9MSUdIVH07XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBMZWZ0UHJlZml4ID0gd2l0aFByb3BzKCkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0eWxlVHlwZSxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgIHRvcDogLTFweDtcbiAgICAgICAgICAgIGJvdHRvbTogLTFweDtcbiAgICAgICAgICAgIGxlZnQ6IC0xcHg7XG4gICAgICAgICAgICB3aWR0aDogNHB4O1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtEVFtjb2xvck1hcFtzdHlsZVR5cGVdXX07XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBUaXRsZVdyYXAgPSB3aXRoUHJvcHMoe1xuICAgIGNsYXNzTmFtZTogdGl0bGVDbHNcbn0pKFxuICAgIHN0eWxlZCgnaDMnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIG1hcmdpbjogMHB4O1xuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMzZweDtcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogNDRweDtcbiAgICAgICAgICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IENvbnRlbnRXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IGNvbnRlbnRDbHNcbn0pKFxuICAgIHN0eWxlZCgnZGl2JykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAzNnB4O1xuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA0NHB4O1xuICAgICAgICAgICAgd29yZC1icmVhazogYnJlYWstYWxsO1xuICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IEZvb3RlcldyYXAgPSBzdHlsZWQoJ2RpdicpYFxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICAgIG1hcmdpbi1yaWdodDogMTZweDtcbiAgICBtYXJnaW4tbGVmdDogNDRweDtcbiAgICBtYXJnaW4tdG9wOiA4cHg7XG5gO1xuXG5leHBvcnQgY29uc3QgTWVzc2FnZVdyYXAgPSB3aXRoUHJvcHMoe1xuICAgIGNsYXNzTmFtZTogcHJlZml4Q2xzXG59KShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc3R5bGVUeXBlLFxuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgIHdpZHRoOiAzNDBweDtcbiAgICAgICAgICAgIG1pbi1oZWlnaHQ6IDU2cHg7XG4gICAgICAgICAgICBwYWRkaW5nOiAxNXB4IDA7XG4gICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAke0RULlRfQ09MT1JfTElORV9ERUZBVUxUX0xJR0hUfTtcbiAgICAgICAgICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiA0cHg7XG4gICAgICAgICAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogNHB4O1xuICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfQlJJR0hUfTtcbiAgICAgICAgICAgIGJveC1zaGFkb3c6ICR7RFQuVF9TSEFET1dfQkxPQ0tfREVGQVVMVF9MR307XG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBNZXNzYWdlQ29udGVudFdyYXAgPSBzdHlsZWQoVHJhbnNpdGlvbkdyb3VwKWBcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgdG9wOiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMHB4O1xuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuICAgIHotaW5kZXg6IDEwNjA7XG5cbiAgICAuJHthbmltYXRpb25OYW1lfS1lbnRlciwgLiR7YW5pbWF0aW9uTmFtZX0tYXBwZWFyLCAuJHthbmltYXRpb25OYW1lfS1sZWF2ZSwgLiR7YW5pbWF0aW9uTmFtZX0tZXhpdCB7XG4gICAgICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogJHthbmltYXRpb25EdXJhdGlvbn1tcztcbiAgICAgICAgYW5pbWF0aW9uLWZpbGwtbW9kZTogYm90aDtcbiAgICB9XG4gICAgLiR7YW5pbWF0aW9uTmFtZX0tZW50ZXIsIC4ke2FuaW1hdGlvbk5hbWV9LWFwcGVhciB7XG4gICAgICAgIGFuaW1hdGlvbi1uYW1lOiAke3NsaWRlSW5SaWdodH07XG4gICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjMsIDEuMywgMC4zLCAxKTtcbiAgICB9XG4gICAgLiR7YW5pbWF0aW9uTmFtZX0tbGVhdmUsIC4ke2FuaW1hdGlvbk5hbWV9LWV4aXQge1xuICAgICAgICBhbmltYXRpb24tbmFtZTogJHtzbGlkZVVwT3V0fTtcbiAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuMzQsIDAuNjksIDAuMSwgMSk7XG4gICAgfVxuXG4gICAgLiR7cHJlZml4Q2xzfSB7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxNnB4O1xuICAgICAgICBtYXJnaW4tbGVmdDogYXV0bztcbiAgICB9XG5gO1xuIl19 */"));
exports.MessageWrap = MessageWrap;
var MessageContentWrap = ( /*#__PURE__*/0, _styledBase.default)(_reactTransitionGroup.TransitionGroup, {
  target: "e1t4tau68",
  label: "MessageContentWrap"
})("position:fixed;top:0;width:100%;height:0px;overflow:visible;z-index:1060;.", animationName, "-enter,.", animationName, "-appear,.", animationName, "-leave,.", animationName, "-exit{animation-duration:", animationDuration, "ms;animation-fill-mode:both;}.", animationName, "-enter,.", animationName, "-appear{animation-name:", _animation.slideInRight, ";animation-timing-function:cubic-bezier(0.3,1.3,0.3,1);}.", animationName, "-leave,.", animationName, "-exit{animation-name:", _animation.slideUpOut, ";animation-timing-function:cubic-bezier(0.34,0.69,0.1,1);}.", prefixCls, "{position:relative;margin-bottom:16px;margin-right:16px;margin-left:auto;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lc3NhZ2Uvc3R5bGUvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0t5RCIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9NZXNzYWdlL3N0eWxlL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uR3JvdXAgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcblxuaW1wb3J0IFN2Z0ljb24gZnJvbSAnc3JjL2NvbXBvbmVudHMvU3ZnSWNvbic7XG5pbXBvcnQgeyBzbGlkZVVwT3V0LCBzbGlkZUluUmlnaHQgfSBmcm9tICdzcmMvc3R5bGUvYW5pbWF0aW9uJztcbmltcG9ydCBjb25maWcgZnJvbSAnc3JjL2NvbmZpZyc7XG5pbXBvcnQgd2l0aFByb3BzIGZyb20gJ3NyYy91dGlscy93aXRoUHJvcHMnO1xuXG5jb25zdCB7IHByZWZpeENsczogX3ByZWZpeENscyB9ID0gY29uZmlnO1xuZXhwb3J0IGNvbnN0IHByZWZpeENscyA9IF9wcmVmaXhDbHMgKyAnLW1lc3NhZ2UnO1xuZXhwb3J0IGNvbnN0IHRpdGxlQ2xzID0gcHJlZml4Q2xzICsgJy10aXRsZSc7XG5leHBvcnQgY29uc3QgY29udGVudENscyA9IHByZWZpeENscyArICctY29udGVudCc7XG5cbmV4cG9ydCBjb25zdCBhbmltYXRpb25EdXJhdGlvbiA9IDQwMDtcbmV4cG9ydCBjb25zdCBhbmltYXRpb25OYW1lID0gJ3VjLWZlLWFuaW1hdGlvbi1mYWRlJztcblxuY29uc3QgY29sb3JNYXAgPSB7XG4gICAgc3VjY2VzczogJ1RfQ09MT1JfVEVYVF9TVUNDRVNTJyxcbiAgICB3YXJuaW5nOiAnVF9DT0xPUl9URVhUX1dBUk5JTkcnLFxuICAgIGVycm9yOiAnVF9DT0xPUl9URVhUX0VSUk9SJyxcbiAgICBsb2FkaW5nOiAnVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVCcsXG4gICAgZGVmYXVsdDogJ1RfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFQnXG59O1xuXG5leHBvcnQgY29uc3QgVGlwSWNvbiA9IHdpdGhQcm9wcygpKFxuICAgIHN0eWxlZChTdmdJY29uKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0eWxlVHlwZSxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGZpbGw6ICR7RFRbY29sb3JNYXBbc3R5bGVUeXBlXV19O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgSWNvbldyYXAgPSBzdHlsZWQoJ2RpdicpYFxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIHdpZHRoOiAyMHB4O1xuICAgIGhlaWdodDogMjBweDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMTdweDtcbiAgICBsZWZ0OiAxNnB4O1xuYDtcbmV4cG9ydCBjb25zdCBDbG9zZUljb25XcmFwID0gd2l0aFByb3BzKCkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBmb250LXNpemU6IDIwcHg7XG4gICAgICAgICAgICB3aWR0aDogMjBweDtcbiAgICAgICAgICAgIGhlaWdodDogMjBweDtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgdG9wOiAxN3B4O1xuICAgICAgICAgICAgcmlnaHQ6IDE2cHg7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICBzdmcge1xuICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfTElHSFR9O1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgTGVmdFByZWZpeCA9IHdpdGhQcm9wcygpKFxuICAgIHN0eWxlZCgnZGl2JykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzdHlsZVR5cGUsXG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICB0b3A6IC0xcHg7XG4gICAgICAgICAgICBib3R0b206IC0xcHg7XG4gICAgICAgICAgICBsZWZ0OiAtMXB4O1xuICAgICAgICAgICAgd2lkdGg6IDRweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7RFRbY29sb3JNYXBbc3R5bGVUeXBlXV19O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgVGl0bGVXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IHRpdGxlQ2xzXG59KShcbiAgICBzdHlsZWQoJ2gzJykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBtYXJnaW46IDBweDtcbiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDM2cHg7XG4gICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDQ0cHg7XG4gICAgICAgICAgICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XG4gICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBDb250ZW50V3JhcCA9IHdpdGhQcm9wcyh7XG4gICAgY2xhc3NOYW1lOiBjb250ZW50Q2xzXG59KShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMzZweDtcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogNDRweDtcbiAgICAgICAgICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBGb290ZXJXcmFwID0gc3R5bGVkKCdkaXYnKWBcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICBtYXJnaW4tcmlnaHQ6IDE2cHg7XG4gICAgbWFyZ2luLWxlZnQ6IDQ0cHg7XG4gICAgbWFyZ2luLXRvcDogOHB4O1xuYDtcblxuZXhwb3J0IGNvbnN0IE1lc3NhZ2VXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IHByZWZpeENsc1xufSkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0eWxlVHlwZSxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICB3aWR0aDogMzQwcHg7XG4gICAgICAgICAgICBtaW4taGVpZ2h0OiA1NnB4O1xuICAgICAgICAgICAgcGFkZGluZzogMTVweCAwO1xuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHtEVC5UX0NPTE9SX0xJTkVfREVGQVVMVF9MSUdIVH07XG4gICAgICAgICAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogNHB4O1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDRweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19ERUZBVUxUX0JSSUdIVH07XG4gICAgICAgICAgICBib3gtc2hhZG93OiAke0RULlRfU0hBRE9XX0JMT0NLX0RFRkFVTFRfTEd9O1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgTWVzc2FnZUNvbnRlbnRXcmFwID0gc3R5bGVkKFRyYW5zaXRpb25Hcm91cClgXG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHRvcDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDBweDtcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgICB6LWluZGV4OiAxMDYwO1xuXG4gICAgLiR7YW5pbWF0aW9uTmFtZX0tZW50ZXIsIC4ke2FuaW1hdGlvbk5hbWV9LWFwcGVhciwgLiR7YW5pbWF0aW9uTmFtZX0tbGVhdmUsIC4ke2FuaW1hdGlvbk5hbWV9LWV4aXQge1xuICAgICAgICBhbmltYXRpb24tZHVyYXRpb246ICR7YW5pbWF0aW9uRHVyYXRpb259bXM7XG4gICAgICAgIGFuaW1hdGlvbi1maWxsLW1vZGU6IGJvdGg7XG4gICAgfVxuICAgIC4ke2FuaW1hdGlvbk5hbWV9LWVudGVyLCAuJHthbmltYXRpb25OYW1lfS1hcHBlYXIge1xuICAgICAgICBhbmltYXRpb24tbmFtZTogJHtzbGlkZUluUmlnaHR9O1xuICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4zLCAxLjMsIDAuMywgMSk7XG4gICAgfVxuICAgIC4ke2FuaW1hdGlvbk5hbWV9LWxlYXZlLCAuJHthbmltYXRpb25OYW1lfS1leGl0IHtcbiAgICAgICAgYW5pbWF0aW9uLW5hbWU6ICR7c2xpZGVVcE91dH07XG4gICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjM0LCAwLjY5LCAwLjEsIDEpO1xuICAgIH1cblxuICAgIC4ke3ByZWZpeENsc30ge1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDE2cHg7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMTZweDtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gICAgfVxuYDtcbiJdfQ== */"));
exports.MessageContentWrap = MessageContentWrap;