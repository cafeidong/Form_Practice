"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TagMoreWapper = exports.TagPopoverWrap = exports.TagMenuWapper = exports.SWrap = exports.TagGroupWrapper = exports.IconTagWrapper = exports.IconTag = exports.ContentWrapper = exports.TagWrapper = exports.SuffixIconWrapper = exports.PrefixIconWrapper = exports.SvgIconWrapper = exports.PrefixIcon = exports.CloseIconWrapper = exports.CloseIcon = exports.styleMap = exports.iconCls = exports.menuCls = exports.prefixCls = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _newArrowCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/newArrowCheck"));

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _core = require("@emotion/core");

var _Combine = _interopRequireDefault(require("../../../components/Combine"));

var _config = _interopRequireDefault(require("../../../config"));

var _SvgIcon = _interopRequireDefault(require("../../../components/SvgIcon"));

var _Icon = _interopRequireDefault(require("../../../components/Icon"));

var _withProps = _interopRequireDefault(require("../../../utils/withProps"));

var _this = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var _prefixCls = _config.default.prefixCls;
var prefixCls = _prefixCls + '-tag';
exports.prefixCls = prefixCls;
var menuCls = _prefixCls + '-menu';
exports.menuCls = menuCls;
var iconCls = _prefixCls + '-tag-icon';
exports.iconCls = iconCls;
var styleMap = {
  gray: {
    color: 'T_TAG_COLOR_GRAY_TEXT',
    icon: 'T_TAG_COLOR_GRAY_ICON',
    border: 'T_TAG_COLOR_GRAY_BORDER',
    divider: 'T_TAG_COLOR_GRAY_DIVIDER',
    bg: 'T_TAG_COLOR_GRAY_BG_LIGHT',
    iconHoverBG: 'T_TAG_COLOR_GRAY_BG_DARK'
  },
  green: {
    color: 'T_TAG_COLOR_GREEN_TEXT',
    icon: 'T_TAG_COLOR_GREEN_ICON',
    border: 'T_TAG_COLOR_GREEN_BORDER',
    divider: 'T_TAG_COLOR_GREEN_DIVIDER',
    bg: 'T_TAG_COLOR_GREEN_BG_LIGHT',
    iconHoverBG: 'T_TAG_COLOR_GREEN_BG_DARK'
  },
  yellow: {
    color: 'T_TAG_COLOR_YELLOW_TEXT',
    icon: 'T_TAG_COLOR_YELLOW_ICON',
    border: 'T_TAG_COLOR_YELLOW_BORDER',
    divider: 'T_TAG_COLOR_YELLOW_DIVIDER',
    bg: 'T_TAG_COLOR_YELLOW_BG_LIGHT',
    iconHoverBG: 'T_TAG_COLOR_YELLOW_BG_DARK'
  },
  red: {
    color: 'T_TAG_COLOR_RED_TEXT',
    icon: 'T_TAG_COLOR_RED_ICON',
    border: 'T_TAG_COLOR_RED_BORDER',
    divider: 'T_TAG_COLOR_RED_DIVIDER',
    bg: 'T_TAG_COLOR_RED_BG_LIGHT',
    iconHoverBG: 'T_TAG_COLOR_RED_BG_DARK'
  },
  primary: {
    color: 'T_TAG_COLOR_PRIMARY_TEXT',
    icon: 'T_TAG_COLOR_PRIMARY_ICON',
    border: 'T_TAG_COLOR_PRIMARY_BORDER',
    divider: 'T_TAG_COLOR_PRIMARY_DIVIDER',
    bg: 'T_TAG_COLOR_PRIMARY_BG_LIGHT',
    iconHoverBG: 'T_TAG_COLOR_PRIMARY_BG_DARK'
  },
  purple: {
    color: 'T_TAG_COLOR_PURPLE_TEXT',
    icon: 'T_TAG_COLOR_PURPLE_ICON',
    border: 'T_TAG_COLOR_PURPLE_BORDER',
    divider: 'T_TAG_COLOR_PURPLE_DIVIDER',
    bg: 'T_TAG_COLOR_PURPLE_BG_LIGHT',
    iconHoverBG: 'T_TAG_COLOR_PURPLE_BG_DARK'
  },
  lightblue: {
    color: 'T_TAG_COLOR_LIGHTBLUE_TEXT',
    icon: 'T_TAG_COLOR_LIGHTBLUE_ICON',
    border: 'T_TAG_COLOR_LIGHTBLUE_BORDER',
    divider: 'T_TAG_COLOR_LIGHTBLUE_DIVIDER',
    bg: 'T_TAG_COLOR_LIGHTBLUE_BG_LIGHT',
    iconHoverBG: 'T_TAG_COLOR_LIGHTBLUE_BG_DARK'
  },
  blue: {
    color: 'T_TAG_COLOR_BLUE_TEXT',
    icon: 'T_TAG_COLOR_BLUE_ICON',
    border: 'T_TAG_COLOR_BLUE_BORDER',
    divider: 'T_TAG_COLOR_BLUE_DIVIDER',
    bg: 'T_TAG_COLOR_BLUE_BG_LIGHT',
    iconHoverBG: 'T_TAG_COLOR_BLUE_BG_DARK'
  },
  orange: {
    color: 'T_TAG_COLOR_ORANGE_TEXT',
    icon: 'T_TAG_COLOR_ORANGE_ICON',
    border: 'T_TAG_COLOR_ORANGE_BORDER',
    divider: 'T_TAG_COLOR_ORANG_DIVIDER',
    bg: 'T_TAG_COLOR_ORANGE_BG_LIGHT',
    iconHoverBG: 'T_TAG_COLOR_ORANGE_BG_DARK'
  },
  cyan: {
    color: 'T_TAG_COLOR_CYAN_EXT',
    icon: 'T_TAG_COLOR_CYAN_ICON',
    border: 'T_TAG_COLOR_CYAN_BORDER',
    divider: 'T_TAG_COLOR_CYAN_DIVIDER',
    bg: 'T_TAG_COLOR_CYAN_BG_LIGHT',
    iconHoverBG: 'T_TAG_COLOR_CYAN_BG_DARK'
  }
};
exports.styleMap = styleMap;
[['default', 'gray'], ['success', 'green'], ['warning', 'yellow'], ['error', 'red']].map(function (_ref) {
  (0, _newArrowCheck2.default)(this, _this);

  var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
      styleType = _ref2[0],
      color = _ref2[1];

  styleMap[styleType] = styleMap[color];
}.bind(void 0));
var filledStyleMap = {
  purple: {
    bg: 'T_TAG_COLOR_PURPLE_FILLBG_LIGHT',
    iconHoverBG: 'T_TAG_COLOR_PURPLE_FILLBG_DARK'
  },
  lightblue: {
    bg: 'T_TAG_COLOR_LIGHTBLUE_FILLBG_LIGHT',
    iconHoverBG: 'T_TAG_COLOR_LIGHTBLUE_FILLBG_DARK'
  },
  blue: {
    bg: 'T_TAG_COLOR_BLUE_FILLBG_LIGHT',
    iconHoverBG: 'T_TAG_COLOR_BLUE_FILLBG_DARK'
  },
  orange: {
    bg: 'T_TAG_COLOR_ORANGE_FILLBG_LIGHT',
    iconHoverBG: 'T_TAG_COLOR_ORANGE_FILLBG_DARK'
  },
  yellow: {
    bg: 'T_TAG_COLOR_YELLOW_FILLBG_LIGHT',
    iconHoverBG: 'T_TAG_COLOR_YELLOW_FILLBG_DARK'
  },
  cyan: {
    bg: 'T_TAG_COLOR_CYAN_FILLBG_LIGHT',
    iconHoverBG: 'T_TAG_COLOR_CYAN_FILLBG_DARK'
  },
  red: {
    bg: 'T_TAG_COLOR_RED_FILLBG_LIGHT',
    iconHoverBG: 'T_TAG_COLOR_RED_FILLBG_DARK'
  }
};
Object.keys(filledStyleMap).map(function (key) {
  (0, _newArrowCheck2.default)(this, _this);
  var map = filledStyleMap[key];
  styleMap[key + '-filled'] = _objectSpread(_objectSpread({}, map), {}, {
    border: map.bg,
    divider: map.bg,
    color: 'T_COLOR_TEXT_SYSTEM_WHITE'
  });
}.bind(void 0));
var stateStyleMap = {
  green: {
    color: 'T_TAG_COLOR_GREEN_TEXT',
    icon: 'T_TAG_COLOR_GREEN_ICON',
    divider: 'T_TAG_COLOR_GREEN_DIVIDER',
    bg: 'T_COLOR_BG_DEFAULT_BRIGHT',
    iconHoverBG: 'T_COLOR_BG_DEFAULT_BRIGHT',
    border: 'T_COLOR_LINE_NOTICE_LIGHT',
    fontColor: 'T_COLOR_TEXT_DEFAULT_DARK'
  },
  blue: {
    color: 'T_TAG_COLOR_BLUE_TEXT',
    icon: 'T_TAG_COLOR_BLUE_ICON',
    divider: 'T_TAG_COLOR_BLUE_DIVIDER',
    bg: 'T_COLOR_BG_DEFAULT_BRIGHT',
    iconHoverBG: 'T_COLOR_BG_DEFAULT_BRIGHT',
    border: 'T_COLOR_LINE_NOTICE_LIGHT',
    fontColor: 'T_COLOR_TEXT_DEFAULT_DARK'
  },
  yellow: {
    color: 'T_TAG_COLOR_YELLOW_TEXT',
    icon: 'T_TAG_COLOR_YELLOW_ICON',
    divider: 'T_TAG_COLOR_YELLOW_DIVIDER',
    bg: 'T_COLOR_BG_DEFAULT_BRIGHT',
    iconHoverBG: 'T_COLOR_BG_DEFAULT_BRIGHT',
    border: 'T_COLOR_LINE_NOTICE_LIGHT',
    fontColor: 'T_COLOR_TEXT_DEFAULT_DARK'
  },
  red: {
    color: 'T_TAG_COLOR_RED_TEXT',
    icon: 'T_TAG_COLOR_RED_ICON',
    divider: 'T_TAG_COLOR_RED_DIVIDER',
    bg: 'T_TAG_COLOR_RED_BG_LIGHT',
    iconHoverBG: 'T_TAG_COLOR_RED_BG_DARK',
    border: 'T_TAG_COLOR_RED_DIVIDER',
    fontColor: 'T_COLOR_TEXT_DEFAULT_DARK'
  }
};
Object.keys(stateStyleMap).map(function (key) {
  (0, _newArrowCheck2.default)(this, _this);
  var map = stateStyleMap[key];
  styleMap[key + '-crisped'] = _objectSpread({}, map);
}.bind(void 0));
var CloseIcon = ( /*#__PURE__*/0, _styledBase.default)(_SvgIcon.default, {
  target: "e19zfbcx0",
  label: "CloseIcon"
})(process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
exports.CloseIcon = CloseIcon;
var CloseIconWrapper = ( /*#__PURE__*/0, _styledBase.default)('span', {
  target: "e19zfbcx1",
  label: "CloseIconWrapper"
})(process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
exports.CloseIconWrapper = CloseIconWrapper;
var PrefixIcon = (0, _withProps.default)({
  className: iconCls
})(( /*#__PURE__*/0, _styledBase.default)(_Icon.default, {
  target: "e19zfbcx2",
  label: "PrefixIcon"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var size = props.size,
      DT = props.theme.designTokens;
  var iconSize = DT["T_TAG_ICON_SIZE_".concat((size || 'sm').toLocaleUpperCase())];
  return "\n         font-size:".concat(iconSize, ";\n    ");
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.PrefixIcon = PrefixIcon;
var SvgIconWrapper = (0, _withProps.default)({
  className: iconCls
})(( /*#__PURE__*/0, _styledBase.default)('i', {
  target: "e19zfbcx3",
  label: "SvgIconWrapper"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var size = props.size,
      DT = props.theme.designTokens;
  var iconSize = DT["T_TAG_ICON_SIZE_".concat((size || 'sm').toLocaleUpperCase())];
  return /*#__PURE__*/(0, _core.css)("svg{width:", iconSize, ";height:", iconSize, ";};label:SvgIconWrapper;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.SvgIconWrapper = SvgIconWrapper;
var PrefixIconWrapper = ( /*#__PURE__*/0, _styledBase.default)('span', {
  target: "e19zfbcx4",
  label: "PrefixIconWrapper"
})(process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
exports.PrefixIconWrapper = PrefixIconWrapper;
var SuffixIconWrapper = ( /*#__PURE__*/0, _styledBase.default)('span', {
  target: "e19zfbcx5",
  label: "SuffixIconWrapper"
})(process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RhZy9zdHlsZS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEyTytDIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RhZy9zdHlsZS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IENvbWJpbmUgZnJvbSAnc3JjL2NvbXBvbmVudHMvQ29tYmluZSc7XG5pbXBvcnQgY29uZmlnIGZyb20gJ3NyYy9jb25maWcnO1xuaW1wb3J0IFN2Z0ljb24gZnJvbSAnc3JjL2NvbXBvbmVudHMvU3ZnSWNvbic7XG5pbXBvcnQgSWNvbiBmcm9tICdzcmMvY29tcG9uZW50cy9JY29uJztcbmltcG9ydCB3aXRoUHJvcHMgZnJvbSAnc3JjL3V0aWxzL3dpdGhQcm9wcyc7XG5cbmNvbnN0IHsgcHJlZml4Q2xzOiBfcHJlZml4Q2xzIH0gPSBjb25maWc7XG5leHBvcnQgY29uc3QgcHJlZml4Q2xzID0gX3ByZWZpeENscyArICctdGFnJztcbmV4cG9ydCBjb25zdCBtZW51Q2xzID0gX3ByZWZpeENscyArICctbWVudSc7XG5leHBvcnQgY29uc3QgaWNvbkNscyA9IF9wcmVmaXhDbHMgKyAnLXRhZy1pY29uJztcblxuZXhwb3J0IGNvbnN0IHN0eWxlTWFwID0ge1xuICAgIGdyYXk6IHtcbiAgICAgICAgY29sb3I6ICdUX1RBR19DT0xPUl9HUkFZX1RFWFQnLFxuICAgICAgICBpY29uOiAnVF9UQUdfQ09MT1JfR1JBWV9JQ09OJyxcbiAgICAgICAgYm9yZGVyOiAnVF9UQUdfQ09MT1JfR1JBWV9CT1JERVInLFxuICAgICAgICBkaXZpZGVyOiAnVF9UQUdfQ09MT1JfR1JBWV9ESVZJREVSJyxcbiAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9HUkFZX0JHX0xJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX1RBR19DT0xPUl9HUkFZX0JHX0RBUksnXG4gICAgfSxcbiAgICBncmVlbjoge1xuICAgICAgICBjb2xvcjogJ1RfVEFHX0NPTE9SX0dSRUVOX1RFWFQnLFxuICAgICAgICBpY29uOiAnVF9UQUdfQ09MT1JfR1JFRU5fSUNPTicsXG4gICAgICAgIGJvcmRlcjogJ1RfVEFHX0NPTE9SX0dSRUVOX0JPUkRFUicsXG4gICAgICAgIGRpdmlkZXI6ICdUX1RBR19DT0xPUl9HUkVFTl9ESVZJREVSJyxcbiAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9HUkVFTl9CR19MSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9UQUdfQ09MT1JfR1JFRU5fQkdfREFSSydcbiAgICB9LFxuICAgIHllbGxvdzoge1xuICAgICAgICBjb2xvcjogJ1RfVEFHX0NPTE9SX1lFTExPV19URVhUJyxcbiAgICAgICAgaWNvbjogJ1RfVEFHX0NPTE9SX1lFTExPV19JQ09OJyxcbiAgICAgICAgYm9yZGVyOiAnVF9UQUdfQ09MT1JfWUVMTE9XX0JPUkRFUicsXG4gICAgICAgIGRpdmlkZXI6ICdUX1RBR19DT0xPUl9ZRUxMT1dfRElWSURFUicsXG4gICAgICAgIGJnOiAnVF9UQUdfQ09MT1JfWUVMTE9XX0JHX0xJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX1RBR19DT0xPUl9ZRUxMT1dfQkdfREFSSydcbiAgICB9LFxuICAgIHJlZDoge1xuICAgICAgICBjb2xvcjogJ1RfVEFHX0NPTE9SX1JFRF9URVhUJyxcbiAgICAgICAgaWNvbjogJ1RfVEFHX0NPTE9SX1JFRF9JQ09OJyxcbiAgICAgICAgYm9yZGVyOiAnVF9UQUdfQ09MT1JfUkVEX0JPUkRFUicsXG4gICAgICAgIGRpdmlkZXI6ICdUX1RBR19DT0xPUl9SRURfRElWSURFUicsXG4gICAgICAgIGJnOiAnVF9UQUdfQ09MT1JfUkVEX0JHX0xJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX1RBR19DT0xPUl9SRURfQkdfREFSSydcbiAgICB9LFxuICAgIHByaW1hcnk6IHtcbiAgICAgICAgY29sb3I6ICdUX1RBR19DT0xPUl9QUklNQVJZX1RFWFQnLFxuICAgICAgICBpY29uOiAnVF9UQUdfQ09MT1JfUFJJTUFSWV9JQ09OJyxcbiAgICAgICAgYm9yZGVyOiAnVF9UQUdfQ09MT1JfUFJJTUFSWV9CT1JERVInLFxuICAgICAgICBkaXZpZGVyOiAnVF9UQUdfQ09MT1JfUFJJTUFSWV9ESVZJREVSJyxcbiAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9QUklNQVJZX0JHX0xJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX1RBR19DT0xPUl9QUklNQVJZX0JHX0RBUksnXG4gICAgfSxcbiAgICBwdXJwbGU6IHtcbiAgICAgICAgY29sb3I6ICdUX1RBR19DT0xPUl9QVVJQTEVfVEVYVCcsXG4gICAgICAgIGljb246ICdUX1RBR19DT0xPUl9QVVJQTEVfSUNPTicsXG4gICAgICAgIGJvcmRlcjogJ1RfVEFHX0NPTE9SX1BVUlBMRV9CT1JERVInLFxuICAgICAgICBkaXZpZGVyOiAnVF9UQUdfQ09MT1JfUFVSUExFX0RJVklERVInLFxuICAgICAgICBiZzogJ1RfVEFHX0NPTE9SX1BVUlBMRV9CR19MSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9UQUdfQ09MT1JfUFVSUExFX0JHX0RBUksnXG4gICAgfSxcbiAgICBsaWdodGJsdWU6IHtcbiAgICAgICAgY29sb3I6ICdUX1RBR19DT0xPUl9MSUdIVEJMVUVfVEVYVCcsXG4gICAgICAgIGljb246ICdUX1RBR19DT0xPUl9MSUdIVEJMVUVfSUNPTicsXG4gICAgICAgIGJvcmRlcjogJ1RfVEFHX0NPTE9SX0xJR0hUQkxVRV9CT1JERVInLFxuICAgICAgICBkaXZpZGVyOiAnVF9UQUdfQ09MT1JfTElHSFRCTFVFX0RJVklERVInLFxuICAgICAgICBiZzogJ1RfVEFHX0NPTE9SX0xJR0hUQkxVRV9CR19MSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9UQUdfQ09MT1JfTElHSFRCTFVFX0JHX0RBUksnXG4gICAgfSxcbiAgICBibHVlOiB7XG4gICAgICAgIGNvbG9yOiAnVF9UQUdfQ09MT1JfQkxVRV9URVhUJyxcbiAgICAgICAgaWNvbjogJ1RfVEFHX0NPTE9SX0JMVUVfSUNPTicsXG4gICAgICAgIGJvcmRlcjogJ1RfVEFHX0NPTE9SX0JMVUVfQk9SREVSJyxcbiAgICAgICAgZGl2aWRlcjogJ1RfVEFHX0NPTE9SX0JMVUVfRElWSURFUicsXG4gICAgICAgIGJnOiAnVF9UQUdfQ09MT1JfQkxVRV9CR19MSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9UQUdfQ09MT1JfQkxVRV9CR19EQVJLJ1xuICAgIH0sXG4gICAgb3JhbmdlOiB7XG4gICAgICAgIGNvbG9yOiAnVF9UQUdfQ09MT1JfT1JBTkdFX1RFWFQnLFxuICAgICAgICBpY29uOiAnVF9UQUdfQ09MT1JfT1JBTkdFX0lDT04nLFxuICAgICAgICBib3JkZXI6ICdUX1RBR19DT0xPUl9PUkFOR0VfQk9SREVSJyxcbiAgICAgICAgZGl2aWRlcjogJ1RfVEFHX0NPTE9SX09SQU5HX0RJVklERVInLFxuICAgICAgICBiZzogJ1RfVEFHX0NPTE9SX09SQU5HRV9CR19MSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9UQUdfQ09MT1JfT1JBTkdFX0JHX0RBUksnXG4gICAgfSxcbiAgICBjeWFuOiB7XG4gICAgICAgIGNvbG9yOiAnVF9UQUdfQ09MT1JfQ1lBTl9FWFQnLFxuICAgICAgICBpY29uOiAnVF9UQUdfQ09MT1JfQ1lBTl9JQ09OJyxcbiAgICAgICAgYm9yZGVyOiAnVF9UQUdfQ09MT1JfQ1lBTl9CT1JERVInLFxuICAgICAgICBkaXZpZGVyOiAnVF9UQUdfQ09MT1JfQ1lBTl9ESVZJREVSJyxcbiAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9DWUFOX0JHX0xJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX1RBR19DT0xPUl9DWUFOX0JHX0RBUksnXG4gICAgfVxufTtcblxuW1xuICAgIFsnZGVmYXVsdCcsICdncmF5J10sXG4gICAgWydzdWNjZXNzJywgJ2dyZWVuJ10sXG4gICAgWyd3YXJuaW5nJywgJ3llbGxvdyddLFxuICAgIFsnZXJyb3InLCAncmVkJ11cbl0ubWFwKChbc3R5bGVUeXBlLCBjb2xvcl0pID0+IHtcbiAgICBzdHlsZU1hcFtzdHlsZVR5cGVdID0gc3R5bGVNYXBbY29sb3JdO1xufSk7XG5cbmNvbnN0IGZpbGxlZFN0eWxlTWFwID0ge1xuICAgIHB1cnBsZToge1xuICAgICAgICBiZzogJ1RfVEFHX0NPTE9SX1BVUlBMRV9GSUxMQkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX1BVUlBMRV9GSUxMQkdfREFSSydcbiAgICB9LFxuICAgIGxpZ2h0Ymx1ZToge1xuICAgICAgICBiZzogJ1RfVEFHX0NPTE9SX0xJR0hUQkxVRV9GSUxMQkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX0xJR0hUQkxVRV9GSUxMQkdfREFSSydcbiAgICB9LFxuICAgIGJsdWU6IHtcbiAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9CTFVFX0ZJTExCR19MSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9UQUdfQ09MT1JfQkxVRV9GSUxMQkdfREFSSydcbiAgICB9LFxuICAgIG9yYW5nZToge1xuICAgICAgICBiZzogJ1RfVEFHX0NPTE9SX09SQU5HRV9GSUxMQkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX09SQU5HRV9GSUxMQkdfREFSSydcbiAgICB9LFxuICAgIHllbGxvdzoge1xuICAgICAgICBiZzogJ1RfVEFHX0NPTE9SX1lFTExPV19GSUxMQkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX1lFTExPV19GSUxMQkdfREFSSydcbiAgICB9LFxuICAgIGN5YW46IHtcbiAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9DWUFOX0ZJTExCR19MSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9UQUdfQ09MT1JfQ1lBTl9GSUxMQkdfREFSSydcbiAgICB9LFxuICAgIHJlZDoge1xuICAgICAgICBiZzogJ1RfVEFHX0NPTE9SX1JFRF9GSUxMQkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX1JFRF9GSUxMQkdfREFSSydcbiAgICB9XG59O1xuXG5PYmplY3Qua2V5cyhmaWxsZWRTdHlsZU1hcCkubWFwKGtleSA9PiB7XG4gICAgY29uc3QgbWFwID0gZmlsbGVkU3R5bGVNYXBba2V5XTtcbiAgICBzdHlsZU1hcFtrZXkgKyAnLWZpbGxlZCddID0ge1xuICAgICAgICAuLi5tYXAsXG4gICAgICAgIGJvcmRlcjogbWFwLmJnLFxuICAgICAgICBkaXZpZGVyOiBtYXAuYmcsXG4gICAgICAgIGNvbG9yOiAnVF9DT0xPUl9URVhUX1NZU1RFTV9XSElURSdcbiAgICB9O1xufSk7XG5cbmNvbnN0IHN0YXRlU3R5bGVNYXAgPSB7XG4gICAgZ3JlZW46IHtcbiAgICAgICAgY29sb3I6ICdUX1RBR19DT0xPUl9HUkVFTl9URVhUJyxcbiAgICAgICAgaWNvbjogJ1RfVEFHX0NPTE9SX0dSRUVOX0lDT04nLFxuICAgICAgICBkaXZpZGVyOiAnVF9UQUdfQ09MT1JfR1JFRU5fRElWSURFUicsXG4gICAgICAgIGJnOiAnVF9DT0xPUl9CR19ERUZBVUxUX0JSSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9DT0xPUl9CR19ERUZBVUxUX0JSSUdIVCcsXG4gICAgICAgIGJvcmRlcjogJ1RfQ09MT1JfTElORV9OT1RJQ0VfTElHSFQnLFxuICAgICAgICBmb250Q29sb3I6ICdUX0NPTE9SX1RFWFRfREVGQVVMVF9EQVJLJ1xuICAgIH0sXG4gICAgYmx1ZToge1xuICAgICAgICBjb2xvcjogJ1RfVEFHX0NPTE9SX0JMVUVfVEVYVCcsXG4gICAgICAgIGljb246ICdUX1RBR19DT0xPUl9CTFVFX0lDT04nLFxuICAgICAgICBkaXZpZGVyOiAnVF9UQUdfQ09MT1JfQkxVRV9ESVZJREVSJyxcbiAgICAgICAgYmc6ICdUX0NPTE9SX0JHX0RFRkFVTFRfQlJJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0JHX0RFRkFVTFRfQlJJR0hUJyxcbiAgICAgICAgYm9yZGVyOiAnVF9DT0xPUl9MSU5FX05PVElDRV9MSUdIVCcsXG4gICAgICAgIGZvbnRDb2xvcjogJ1RfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUksnXG4gICAgfSxcbiAgICB5ZWxsb3c6IHtcbiAgICAgICAgY29sb3I6ICdUX1RBR19DT0xPUl9ZRUxMT1dfVEVYVCcsXG4gICAgICAgIGljb246ICdUX1RBR19DT0xPUl9ZRUxMT1dfSUNPTicsXG4gICAgICAgIGRpdmlkZXI6ICdUX1RBR19DT0xPUl9ZRUxMT1dfRElWSURFUicsXG4gICAgICAgIGJnOiAnVF9DT0xPUl9CR19ERUZBVUxUX0JSSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9DT0xPUl9CR19ERUZBVUxUX0JSSUdIVCcsXG4gICAgICAgIGJvcmRlcjogJ1RfQ09MT1JfTElORV9OT1RJQ0VfTElHSFQnLFxuICAgICAgICBmb250Q29sb3I6ICdUX0NPTE9SX1RFWFRfREVGQVVMVF9EQVJLJ1xuICAgIH0sXG4gICAgcmVkOiB7XG4gICAgICAgIGNvbG9yOiAnVF9UQUdfQ09MT1JfUkVEX1RFWFQnLFxuICAgICAgICBpY29uOiAnVF9UQUdfQ09MT1JfUkVEX0lDT04nLFxuICAgICAgICBkaXZpZGVyOiAnVF9UQUdfQ09MT1JfUkVEX0RJVklERVInLFxuICAgICAgICBiZzogJ1RfVEFHX0NPTE9SX1JFRF9CR19MSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9UQUdfQ09MT1JfUkVEX0JHX0RBUksnLFxuICAgICAgICBib3JkZXI6ICdUX1RBR19DT0xPUl9SRURfRElWSURFUicsXG4gICAgICAgIGZvbnRDb2xvcjogJ1RfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUksnXG4gICAgfVxufTtcblxuT2JqZWN0LmtleXMoc3RhdGVTdHlsZU1hcCkubWFwKGtleSA9PiB7XG4gICAgY29uc3QgbWFwID0gc3RhdGVTdHlsZU1hcFtrZXldO1xuICAgIHN0eWxlTWFwW2tleSArICctY3Jpc3BlZCddID0ge1xuICAgICAgICAuLi5tYXBcbiAgICB9O1xufSk7XG5cbmV4cG9ydCBjb25zdCBDbG9zZUljb24gPSBzdHlsZWQoU3ZnSWNvbilgXG4gICAgLyogZW1wdHkgKi9cbmA7XG5cbmV4cG9ydCBjb25zdCBDbG9zZUljb25XcmFwcGVyID0gc3R5bGVkKCdzcGFuJylgXG4gICAgLyogZW1wdHkgKi9cbmA7XG5cbmV4cG9ydCBjb25zdCBQcmVmaXhJY29uID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IGljb25DbHNcbn0pKFxuICAgIHN0eWxlZChJY29uKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHNpemUsXG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuICAgICAgICBjb25zdCBpY29uU2l6ZSA9IERUW2BUX1RBR19JQ09OX1NJWkVfJHsoc2l6ZSB8fCAnc20nKS50b0xvY2FsZVVwcGVyQ2FzZSgpfWBdO1xuICAgICAgICByZXR1cm4gYFxuICAgICAgICAgZm9udC1zaXplOiR7aWNvblNpemV9O1xuICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBTdmdJY29uV3JhcHBlciA9IHdpdGhQcm9wcyh7XG4gICAgY2xhc3NOYW1lOiBpY29uQ2xzXG59KShcbiAgICBzdHlsZWQoJ2knKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHNpemUsXG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuICAgICAgICBjb25zdCBpY29uU2l6ZSA9IERUW2BUX1RBR19JQ09OX1NJWkVfJHsoc2l6ZSB8fCAnc20nKS50b0xvY2FsZVVwcGVyQ2FzZSgpfWBdO1xuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgc3ZnIHtcbiAgICAgICAgICAgICAgICB3aWR0aDogJHtpY29uU2l6ZX07XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAke2ljb25TaXplfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9KVxuKTtcbmV4cG9ydCBjb25zdCBQcmVmaXhJY29uV3JhcHBlciA9IHN0eWxlZCgnc3BhbicpYFxuICAgIC8qIGVtcHR5ICovXG5gO1xuZXhwb3J0IGNvbnN0IFN1ZmZpeEljb25XcmFwcGVyID0gc3R5bGVkKCdzcGFuJylgXG4gICAgLyogZW1wdHkgKi9cbmA7XG5jb25zdCBnZXRDb2xvck1hcCA9IChzdHlsZVR5cGUsIGRpc2FibGVkKSA9PiB7XG4gICAgaWYgKC8tZmlsbCQvLnRlc3Qoc3R5bGVUeXBlKSkge1xuICAgICAgICBzdHlsZVR5cGUgKz0gJ2VkJztcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICAoZGlzYWJsZWRcbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgY29sb3I6ICdUX1RBR19DT0xPUl9ESVNBQkxFRF9URVhUJyxcbiAgICAgICAgICAgICAgICAgIGJvcmRlcjogJ1RfVEFHX0NPTE9SX0RJU0FCTEVEX0JPUkRFUicsXG4gICAgICAgICAgICAgICAgICBkaXZpZGVyOiAnVF9UQUdfQ09MT1JfRElTQUJMRURfRElWSURFUicsXG4gICAgICAgICAgICAgICAgICBiZzogJ1RfVEFHX0NPTE9SX0RJU0FCTEVEX0JHX0xJR0hUJyxcbiAgICAgICAgICAgICAgICAgIGljb25Ib3ZlckJHOiAnVF9UQUdfQ09MT1JfRElTQUJMRURfQkdfTElHSFQnXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogc3R5bGVNYXBbc3R5bGVUeXBlXSkgfHwge31cbiAgICApO1xufTtcblxuZXhwb3J0IGNvbnN0IFRhZ1dyYXBwZXIgPSB3aXRoUHJvcHMoe1xuICAgIGNsYXNzTmFtZTogcHJlZml4Q2xzXG59KShcbiAgICBzdHlsZWQoJ3NwYW4nKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGJvcmRlcjogY3VzdG9tQm9yZGVyLFxuICAgICAgICAgICAgYm9yZGVyVHlwZTogY3VzdG9tQm9yZGVyVHlwZSxcbiAgICAgICAgICAgIHN0eWxlVHlwZSxcbiAgICAgICAgICAgIGRpc2FibGVkLFxuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9LFxuICAgICAgICAgICAgY3VzdG9tU3R5bGUsXG4gICAgICAgICAgICBjbG9zYWJsZVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgY29uc3QgY29sb3JNYXAgPSBnZXRDb2xvck1hcChzdHlsZVR5cGUsIGRpc2FibGVkKTtcblxuICAgICAgICBjb25zdCBjb2xvciA9IGN1c3RvbVN0eWxlPy5jb2xvciB8fCBEVFtjb2xvck1hcC5jb2xvcl07XG4gICAgICAgIGNvbnN0IGljb25Db2xvciA9IGN1c3RvbVN0eWxlPy5jb2xvciB8fCBEVFtjb2xvck1hcC5pY29uXTtcbiAgICAgICAgY29uc3QgYmcgPSBjdXN0b21TdHlsZT8uYmFja2dyb3VuZCB8fCBEVFtjb2xvck1hcC5iZ107XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0Qm9yZGVyKGN1c3RvbUJvcmRlcikge1xuICAgICAgICAgICAgaWYgKGN1c3RvbUJvcmRlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXN0b21TdHlsZT8uYm9yZGVyQ29sb3IgfHwgRFRbY29sb3JNYXAuYm9yZGVyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBEVFsnVF9DT0xPUl9MSU5FX0RFRkFVTFRfVFJBTlNQQVJFTlQnXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGJvcmRlciA9IGdldEJvcmRlcihjdXN0b21Cb3JkZXIpO1xuICAgICAgICBjb25zdCBib3JkZXJSYWRpdXMgPVxuICAgICAgICAgICAgY3VzdG9tQm9yZGVyVHlwZSA9PT0gJ2NpcmNsZSdcbiAgICAgICAgICAgICAgICA/IGBjYWxjKCR7RFRbJ1RfVEFHX0hFSUdIVF9TTSddfSAqICR7RFRbJ1RfQ09STkVSX0NJUkNMRSddLnJlcGxhY2UoJyUnLCAnJykgLyAxMDB9KWBcbiAgICAgICAgICAgICAgICA6IERUWydUX1RBR19CT1JERVJfUkFESVVTJ107XG5cbiAgICAgICAgY29uc3QgY2xvc2VJY29uQm9yZGVyUmFkaXVzID0gY3VzdG9tQm9yZGVyVHlwZSA9PT0gJ2NpcmNsZScgPyAnY2FsYygoMjBweCAtIDJweCkvMiknIDogJzAgMnB4IDJweCAwJztcblxuICAgICAgICBjb25zdCBwYWRkaW5nUmlnaHQgPSBjbG9zYWJsZSA/IDAgOiAnOHB4JztcbiAgICAgICAgY29uc3QgZm9udENvbG9yID0gRFRbY29sb3JNYXAuZm9udENvbG9yIHx8IGNvbG9yTWFwLmNvbG9yXTtcbiAgICAgICAgY29uc3QgZGl2aWRlciA9IERUW2NvbG9yTWFwLmRpdmlkZXJdO1xuXG4gICAgICAgIGNvbnN0IGljb25Ib3ZlckJHID1cbiAgICAgICAgICAgIGN1c3RvbVN0eWxlPy5jbG9zZUljb25Ib3ZlckJhY2tncm91bmQgfHxcbiAgICAgICAgICAgIChzdHlsZVR5cGUuaW5jbHVkZXMoJy1jcmlzcGVkJykgPyBEVFsnVF9DT0xPUl9CR19UUkFOU1BBUkVOVCddIDogRFRbY29sb3JNYXAuaWNvbkhvdmVyQkddKTtcbiAgICAgICAgY29uc3QgY2xvc2VJY29uQ29sb3IgPSBzdHlsZVR5cGUuaW5jbHVkZXMoJy1jcmlzcGVkJykgPyBEVFsnVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSSyddIDogY29sb3I7XG4gICAgICAgIGNvbnN0IGNsb3NlSWNvbkhvdmVyQ29sb3IgPSBzdHlsZVR5cGUuaW5jbHVkZXMoJy1jcmlzcGVkJylcbiAgICAgICAgICAgID8gRFRbJ1RfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUksnXVxuICAgICAgICAgICAgOiBEVC5UX1RBR19JQ09OX0NMT1NFO1xuICAgICAgICBjb25zdCBjbG9zZUljb25PcGFjaXR5ID0gc3R5bGVUeXBlLmluY2x1ZGVzKCctY3Jpc3BlZCcpID8gJzAuNScgOiBEVFsnVF9UQUdfSUNPTl9PUEFDSVRZX0RFRkFVTFQnXTtcbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICBoZWlnaHQ6ICR7RFRbJ1RfVEFHX0hFSUdIVF9TTSddfTtcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogOHB4O1xuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogJHtwYWRkaW5nUmlnaHR9O1xuICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgY29sb3I6ICR7Y29sb3J9O1xuICAgICAgICAgICAgYmFja2dyb3VuZDogJHtiZ307XG4gICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAke2JvcmRlcn07XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAke2JvcmRlclJhZGl1c307XG5cbiAgICAgICAgICAgICR7UHJlZml4SWNvbldyYXBwZXJ9IHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogNHB4O1xuICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiBjYWxjKCR7RFRbJ1RfVEFHX0hFSUdIVF9TTSddfSAtIDJweCk7XG4gICAgICAgICAgICAgICAgZmxleC1zaHJpbms6IDA7XG4gICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICBtaW4td2lkdGg6ICR7RFRbJ1RfVEFHX0lDT05fV0lEVEhfU00nXX07XG4gICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgY29sb3I6ICR7aWNvbkNvbG9yfTtcbiAgICAgICAgICAgICAgICBpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICR7Q29udGVudFdyYXBwZXJ9IHtcbiAgICAgICAgICAgICAgICBjb2xvcjogJHtmb250Q29sb3J9O1xuICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiBjYWxjKCR7RFRbJ1RfVEFHX0hFSUdIVF9TTSddfSAtIDJweCk7XG4gICAgICAgICAgICAgICAgZmxleDogMSAxIGF1dG87XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHtTdWZmaXhJY29uV3JhcHBlcn0ge1xuICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiA0cHg7XG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IGNhbGMoJHtEVFsnVF9UQUdfSEVJR0hUX1NNJ119IC0gMnB4KTtcbiAgICAgICAgICAgICAgICBmbGV4LXNocmluazogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICR7Q2xvc2VJY29uV3JhcHBlcn0ge1xuICAgICAgICAgICAgICAgIGZsb2F0OiByaWdodDtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDE4cHg7XG4gICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDRweDtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGNhbGMoJHtEVFsnVF9UQUdfSEVJR0hUX1NNJ119IC0gMnB4KTtcbiAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogY2FsYygke0RUWydUX1RBR19IRUlHSFRfU00nXX0gLSAycHgpO1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMDtcbiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogJHtjbG9zZUljb25Cb3JkZXJSYWRpdXN9O1xuICAgICAgICAgICAgICAgICR7IWRpc2FibGVkICYmICdjdXJzb3I6IHBvaW50ZXInfTtcbiAgICAgICAgICAgICAgICBjb2xvcjogJHtjbG9zZUljb25Db2xvcn07XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZCAwLjNzO1xuICAgICAgICAgICAgICAgIGZsZXgtc2hyaW5rOiAwO1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6ICR7Y2xvc2VJY29uT3BhY2l0eX07XG4gICAgICAgICAgICAgICAgJHtDbG9zZUljb259IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogJHtjbG9zZUljb25Db2xvcn07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICR7IWRpc2FibGVkICYmXG4gICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgICAgICA6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtpY29uSG92ZXJCR307XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAke0RUWydUX1RBR19JQ09OX09QQUNJVFlfSE9WRVInXX07XG4gICAgICAgICAgICAgICAgICAgICAgICAke0Nsb3NlSWNvbn0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6ICR7Y2xvc2VJY29uSG92ZXJDb2xvcn07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7ZGl2aWRlcn07XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBDb250ZW50V3JhcHBlciA9IHN0eWxlZCgnc3BhbicpYFxuICAgIC8qIGVtcHR5ICovXG5gO1xuXG5leHBvcnQgY29uc3QgSWNvblRhZyA9IHN0eWxlZChJY29uKWBcbiAgICAvKiBlbXB0eSAqL1xuYDtcbmV4cG9ydCBjb25zdCBJY29uVGFnV3JhcHBlciA9IHdpdGhQcm9wcyh7XG4gICAgY2xhc3NOYW1lOiBpY29uQ2xzXG59KShcbiAgICBzdHlsZWQoJ3NwYW4nKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0eWxlVHlwZSA9ICdkZWZhdWx0JyxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfSxcbiAgICAgICAgICAgIGRpc2FibGVkLFxuICAgICAgICAgICAgY3VzdG9tU3R5bGUsXG4gICAgICAgICAgICBib3JkZXJUeXBlOiBjdXN0b21Cb3JkZXJUeXBlLFxuICAgICAgICAgICAgaWNvblNpemU6IHNpemUsXG4gICAgICAgICAgICBib3JkZXI6IGN1c3RvbUJvcmRlclxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0Qm9yZGVyKGN1c3RvbUJvcmRlcikge1xuICAgICAgICAgICAgaWYgKGN1c3RvbUJvcmRlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXN0b21TdHlsZT8uYm9yZGVyQ29sb3IgfHwgRFRbY29sb3JNYXAuYm9yZGVyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBEVFsnVF9DT0xPUl9MSU5FX0RFRkFVTFRfVFJBTlNQQVJFTlQnXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpY29uU2l6ZSA9IERUW2BUX1RBR19JQ09OX1NJWkVfJHsoc2l6ZSB8fCAnc20nKS50b0xvY2FsZVVwcGVyQ2FzZSgpfWBdO1xuXG4gICAgICAgIGNvbnN0IGNvbG9yTWFwID0gZ2V0Q29sb3JNYXAoc3R5bGVUeXBlLCBkaXNhYmxlZCk7XG4gICAgICAgIGNvbnN0IGNvbG9yID0gY3VzdG9tU3R5bGU/LmNvbG9yIHx8IERUW2NvbG9yTWFwLmNvbG9yXTtcbiAgICAgICAgY29uc3QgYmcgPSBjdXN0b21TdHlsZT8uYmFja2dyb3VuZCB8fCBEVFtjb2xvck1hcC5iZ107XG5cbiAgICAgICAgY29uc3QgYm9yZGVyID0gZ2V0Qm9yZGVyKGN1c3RvbUJvcmRlcik7XG4gICAgICAgIGNvbnN0IGJvcmRlclJhZGl1cyA9XG4gICAgICAgICAgICBjdXN0b21Cb3JkZXJUeXBlID09PSAnY2lyY2xlJ1xuICAgICAgICAgICAgICAgID8gYGNhbGMoJHtEVFsnVF9UQUdfSEVJR0hUX1NNJ119ICogJHtEVFsnVF9DT1JORVJfQ0lSQ0xFJ10ucmVwbGFjZSgnJScsICcnKSAvIDEwMH0pYFxuICAgICAgICAgICAgICAgIDogRFRbJ1RfVEFHX0JPUkRFUl9SQURJVVMnXTtcbiAgICAgICAgY29uc3QgZGl2aWRlciA9IERUW2NvbG9yTWFwLmRpdmlkZXJdO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgaGVpZ2h0OiAke0RUWydUX1RBR19IRUlHSFRfU00nXX07XG4gICAgICAgICAgICB3aWR0aDogMjBweDtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiBjYWxjKCR7RFRbJ1RfVEFHX0hFSUdIVF9TTSddfSAtIDJweCk7XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAke2JvcmRlclJhZGl1c307XG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAke2JvcmRlcn07XG4gICAgICAgICAgICBjb2xvcjogJHtjb2xvcn07XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAke2JnfTtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogJHtpY29uU2l6ZX07XG4gICAgICAgICAgICA6OmFmdGVyIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgcmlnaHQ6IC0xcHg7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtkaXZpZGVyfTtcbiAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgICAgIGJvcmRlcjogMCBzb2xpZCAke2JnfTtcbiAgICAgICAgICAgICAgICBib3JkZXItd2lkdGg6IDVweCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgVGFnR3JvdXBXcmFwcGVyID0gd2l0aFByb3BzKCkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHsgY29tcGFjdCB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNvbXBhY3RcbiAgICAgICAgICAgID8gY3NzYFxuICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogLTRweDtcbiAgICAgICAgICAgICAgICAgIC4ke3ByZWZpeENsc30sIC4ke2ljb25DbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICBib3JkZXItbGVmdC1zdHlsZTogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmlnaHQtc3R5bGU6IG5vbmU7XG4gICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMDtcbiAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDRweDtcbiAgICAgICAgICAgICAgICAgICAgICA6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1sZWZ0LXN0eWxlOiBzb2xpZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMnB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAycHg7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIDphZnRlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICcgJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA4cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxcHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogNXB4IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgOmxhc3Qtb2YtdHlwZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1yaWdodC1zdHlsZTogc29saWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAycHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAycHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIC4ke2ljb25DbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICA6YWZ0ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogNTAlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAuJHtwcmVmaXhDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDRweDtcbiAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAwcHg7XG4gICAgICAgICAgICAgICAgICAgICAgOmZpcnN0LW9mLXR5cGUge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDhweDtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgJHtDb250ZW50V3JhcHBlcn0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDRweDtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgOmxhc3Qtb2YtdHlwZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICR7Q29udGVudFdyYXBwZXJ9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogOHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBgXG4gICAgICAgICAgICA6IGNzc2BcbiAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IC00cHg7XG4gICAgICAgICAgICAgICAgICAuJHtwcmVmaXhDbHN9LCAuJHtpY29uQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogNHB4O1xuICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGA7XG4gICAgfSlcbik7XG5leHBvcnQgY29uc3QgU1dyYXAgPSB3aXRoUHJvcHMoe1xuICAgIGNsYXNzTmFtZTogaWNvbkNsc1xufSkoXG4gICAgc3R5bGVkKENvbWJpbmUpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3QgeyBleHBvc2VDb3VudCB9ID0gcHJvcHM7XG4gICAgICAgIHJldHVybiBleHBvc2VDb3VudCA9PT0gdm9pZCAwXG4gICAgICAgICAgICA/ICcnXG4gICAgICAgICAgICA6IGNzc2BcbiAgICAgICAgICAgICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgICAgICAgICAgICAgICAuJHtwcmVmaXhDbHN9LCAuJHtpY29uQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwcHg7XG4gICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMHB4O1xuICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAuJHtpY29uQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMHB4O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBgO1xuICAgIH0pXG4pO1xuZXhwb3J0IGNvbnN0IFRhZ01lbnVXYXBwZXIgPSB3aXRoUHJvcHMoe1xuICAgIGNsYXNzTmFtZTogaWNvbkNsc1xufSkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICAuJHttZW51Q2xzfSB7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogOHB4IDAgNHB4IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuJHtwcmVmaXhDbHN9LC4ke2ljb25DbHN9IHtcbiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA0cHg7XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5leHBvcnQgY29uc3QgVGFnUG9wb3ZlcldyYXAgPSB3aXRoUHJvcHMoe1xuICAgIGNsYXNzTmFtZTogaWNvbkNsc1xufSkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBwYWRkaW5nOiAwIDhweDtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAke0RUWydUX1RBR19IRUlHSFRfU00nXX07XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBUYWdNb3JlV2FwcGVyID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IGljb25DbHNcbn0pKFxuICAgIHN0eWxlZCgnc3BhbicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgLiR7cHJlZml4Q2xzfSB7XG4gICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6ICR7RFRbJ1RfVEFHX0hFSUdIVF9TTSddfTtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwIDZweDtcbiAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogY2FsYygke0RUWydUX1RBR19IRUlHSFRfU00nXX0gLSAycHgpO1xuICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogJHtEVFsnVF9UQUdfQk9SREVSX1JBRElVUyddfTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggJHtEVFsnVF9MSU5FX1NUWUxFX0RBU0hFRCddfSAke0RUWydUX1BPUE9WRVJfQ09MT1JfTElORV9MSUdIVCddfTtcbiAgICAgICAgICAgICAgICBjb2xvcjogJHtEVFsnVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSSyddfTtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBub25lO1xuICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9KVxuKTtcbiJdfQ== */");
exports.SuffixIconWrapper = SuffixIconWrapper;

var getColorMap = function getColorMap(styleType, disabled) {
  (0, _newArrowCheck2.default)(this, _this);

  if (/-fill$/.test(styleType)) {
    styleType += 'ed';
  }

  return (disabled ? {
    color: 'T_TAG_COLOR_DISABLED_TEXT',
    border: 'T_TAG_COLOR_DISABLED_BORDER',
    divider: 'T_TAG_COLOR_DISABLED_DIVIDER',
    bg: 'T_TAG_COLOR_DISABLED_BG_LIGHT',
    iconHoverBG: 'T_TAG_COLOR_DISABLED_BG_LIGHT'
  } : styleMap[styleType]) || {};
}.bind(void 0);

var TagWrapper = (0, _withProps.default)({
  className: prefixCls
})(( /*#__PURE__*/0, _styledBase.default)('span', {
  target: "e19zfbcx6",
  label: "TagWrapper"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var customBorder = props.border,
      customBorderType = props.borderType,
      styleType = props.styleType,
      disabled = props.disabled,
      DT = props.theme.designTokens,
      customStyle = props.customStyle,
      closable = props.closable;
  var colorMap = getColorMap(styleType, disabled);
  var color = (customStyle === null || customStyle === void 0 ? void 0 : customStyle.color) || DT[colorMap.color];
  var iconColor = (customStyle === null || customStyle === void 0 ? void 0 : customStyle.color) || DT[colorMap.icon];
  var bg = (customStyle === null || customStyle === void 0 ? void 0 : customStyle.background) || DT[colorMap.bg];

  function getBorder(customBorder) {
    if (customBorder) {
      return (customStyle === null || customStyle === void 0 ? void 0 : customStyle.borderColor) || DT[colorMap.border];
    }

    return DT['T_COLOR_LINE_DEFAULT_TRANSPARENT'];
  }

  var border = getBorder(customBorder);
  var borderRadius = customBorderType === 'circle' ? "calc(".concat(DT['T_TAG_HEIGHT_SM'], " * ").concat(DT['T_CORNER_CIRCLE'].replace('%', '') / 100, ")") : DT['T_TAG_BORDER_RADIUS'];
  var closeIconBorderRadius = customBorderType === 'circle' ? 'calc((20px - 2px)/2)' : '0 2px 2px 0';
  var paddingRight = closable ? 0 : '8px';
  var fontColor = DT[colorMap.fontColor || colorMap.color];
  var divider = DT[colorMap.divider];
  var iconHoverBG = (customStyle === null || customStyle === void 0 ? void 0 : customStyle.closeIconHoverBackground) || (styleType.includes('-crisped') ? DT['T_COLOR_BG_TRANSPARENT'] : DT[colorMap.iconHoverBG]);
  var closeIconColor = styleType.includes('-crisped') ? DT['T_COLOR_TEXT_DEFAULT_DARK'] : color;
  var closeIconHoverColor = styleType.includes('-crisped') ? DT['T_COLOR_TEXT_DEFAULT_DARK'] : DT.T_TAG_ICON_CLOSE;
  var closeIconOpacity = styleType.includes('-crisped') ? '0.5' : DT['T_TAG_ICON_OPACITY_DEFAULT'];
  return /*#__PURE__*/(0, _core.css)("box-sizing:border-box;height:", DT['T_TAG_HEIGHT_SM'], ";padding-left:8px;padding-right:", paddingRight, ";display:inline-flex;align-items:center;color:", color, ";background:", bg, ";border:1px solid ", border, ";border-radius:", borderRadius, ";", PrefixIconWrapper, "{display:flex;margin-right:4px;line-height:calc(", DT['T_TAG_HEIGHT_SM'], " - 2px);flex-shrink:0;align-items:center;min-width:", DT['T_TAG_ICON_WIDTH_SM'], ";justify-content:center;color:", iconColor, ";i{display:flex;margin:0;}}", ContentWrapper, "{color:", fontColor, ";line-height:calc(", DT['T_TAG_HEIGHT_SM'], " - 2px);flex:1 1 auto;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}", SuffixIconWrapper, "{margin-left:4px;line-height:calc(", DT['T_TAG_HEIGHT_SM'], " - 2px);flex-shrink:0;}", CloseIconWrapper, "{float:right;display:flex;align-items:center;justify-content:center;width:18px;margin-left:4px;height:calc(", DT['T_TAG_HEIGHT_SM'], " - 2px);line-height:calc(", DT['T_TAG_HEIGHT_SM'], " - 2px);font-size:0;text-align:center;border-radius:", closeIconBorderRadius, ";", !disabled && 'cursor: pointer', ";color:", closeIconColor, ";transition:background 0.3s;flex-shrink:0;opacity:", closeIconOpacity, ";", CloseIcon, "{fill:", closeIconColor, ";}", !disabled && /*#__PURE__*/(0, _core.css)(":hover{background:", iconHoverBG, ";opacity:", DT['T_TAG_ICON_OPACITY_HOVER'], ";", CloseIcon, "{fill:", closeIconHoverColor, ";}};label:TagWrapper;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), ";}::after{background:", divider, ";};label:TagWrapper;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RhZy9zdHlsZS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtUUkiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVGFnL3N0eWxlL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgQ29tYmluZSBmcm9tICdzcmMvY29tcG9uZW50cy9Db21iaW5lJztcbmltcG9ydCBjb25maWcgZnJvbSAnc3JjL2NvbmZpZyc7XG5pbXBvcnQgU3ZnSWNvbiBmcm9tICdzcmMvY29tcG9uZW50cy9TdmdJY29uJztcbmltcG9ydCBJY29uIGZyb20gJ3NyYy9jb21wb25lbnRzL0ljb24nO1xuaW1wb3J0IHdpdGhQcm9wcyBmcm9tICdzcmMvdXRpbHMvd2l0aFByb3BzJztcblxuY29uc3QgeyBwcmVmaXhDbHM6IF9wcmVmaXhDbHMgfSA9IGNvbmZpZztcbmV4cG9ydCBjb25zdCBwcmVmaXhDbHMgPSBfcHJlZml4Q2xzICsgJy10YWcnO1xuZXhwb3J0IGNvbnN0IG1lbnVDbHMgPSBfcHJlZml4Q2xzICsgJy1tZW51JztcbmV4cG9ydCBjb25zdCBpY29uQ2xzID0gX3ByZWZpeENscyArICctdGFnLWljb24nO1xuXG5leHBvcnQgY29uc3Qgc3R5bGVNYXAgPSB7XG4gICAgZ3JheToge1xuICAgICAgICBjb2xvcjogJ1RfVEFHX0NPTE9SX0dSQVlfVEVYVCcsXG4gICAgICAgIGljb246ICdUX1RBR19DT0xPUl9HUkFZX0lDT04nLFxuICAgICAgICBib3JkZXI6ICdUX1RBR19DT0xPUl9HUkFZX0JPUkRFUicsXG4gICAgICAgIGRpdmlkZXI6ICdUX1RBR19DT0xPUl9HUkFZX0RJVklERVInLFxuICAgICAgICBiZzogJ1RfVEFHX0NPTE9SX0dSQVlfQkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX0dSQVlfQkdfREFSSydcbiAgICB9LFxuICAgIGdyZWVuOiB7XG4gICAgICAgIGNvbG9yOiAnVF9UQUdfQ09MT1JfR1JFRU5fVEVYVCcsXG4gICAgICAgIGljb246ICdUX1RBR19DT0xPUl9HUkVFTl9JQ09OJyxcbiAgICAgICAgYm9yZGVyOiAnVF9UQUdfQ09MT1JfR1JFRU5fQk9SREVSJyxcbiAgICAgICAgZGl2aWRlcjogJ1RfVEFHX0NPTE9SX0dSRUVOX0RJVklERVInLFxuICAgICAgICBiZzogJ1RfVEFHX0NPTE9SX0dSRUVOX0JHX0xJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX1RBR19DT0xPUl9HUkVFTl9CR19EQVJLJ1xuICAgIH0sXG4gICAgeWVsbG93OiB7XG4gICAgICAgIGNvbG9yOiAnVF9UQUdfQ09MT1JfWUVMTE9XX1RFWFQnLFxuICAgICAgICBpY29uOiAnVF9UQUdfQ09MT1JfWUVMTE9XX0lDT04nLFxuICAgICAgICBib3JkZXI6ICdUX1RBR19DT0xPUl9ZRUxMT1dfQk9SREVSJyxcbiAgICAgICAgZGl2aWRlcjogJ1RfVEFHX0NPTE9SX1lFTExPV19ESVZJREVSJyxcbiAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9ZRUxMT1dfQkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX1lFTExPV19CR19EQVJLJ1xuICAgIH0sXG4gICAgcmVkOiB7XG4gICAgICAgIGNvbG9yOiAnVF9UQUdfQ09MT1JfUkVEX1RFWFQnLFxuICAgICAgICBpY29uOiAnVF9UQUdfQ09MT1JfUkVEX0lDT04nLFxuICAgICAgICBib3JkZXI6ICdUX1RBR19DT0xPUl9SRURfQk9SREVSJyxcbiAgICAgICAgZGl2aWRlcjogJ1RfVEFHX0NPTE9SX1JFRF9ESVZJREVSJyxcbiAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9SRURfQkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX1JFRF9CR19EQVJLJ1xuICAgIH0sXG4gICAgcHJpbWFyeToge1xuICAgICAgICBjb2xvcjogJ1RfVEFHX0NPTE9SX1BSSU1BUllfVEVYVCcsXG4gICAgICAgIGljb246ICdUX1RBR19DT0xPUl9QUklNQVJZX0lDT04nLFxuICAgICAgICBib3JkZXI6ICdUX1RBR19DT0xPUl9QUklNQVJZX0JPUkRFUicsXG4gICAgICAgIGRpdmlkZXI6ICdUX1RBR19DT0xPUl9QUklNQVJZX0RJVklERVInLFxuICAgICAgICBiZzogJ1RfVEFHX0NPTE9SX1BSSU1BUllfQkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX1BSSU1BUllfQkdfREFSSydcbiAgICB9LFxuICAgIHB1cnBsZToge1xuICAgICAgICBjb2xvcjogJ1RfVEFHX0NPTE9SX1BVUlBMRV9URVhUJyxcbiAgICAgICAgaWNvbjogJ1RfVEFHX0NPTE9SX1BVUlBMRV9JQ09OJyxcbiAgICAgICAgYm9yZGVyOiAnVF9UQUdfQ09MT1JfUFVSUExFX0JPUkRFUicsXG4gICAgICAgIGRpdmlkZXI6ICdUX1RBR19DT0xPUl9QVVJQTEVfRElWSURFUicsXG4gICAgICAgIGJnOiAnVF9UQUdfQ09MT1JfUFVSUExFX0JHX0xJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX1RBR19DT0xPUl9QVVJQTEVfQkdfREFSSydcbiAgICB9LFxuICAgIGxpZ2h0Ymx1ZToge1xuICAgICAgICBjb2xvcjogJ1RfVEFHX0NPTE9SX0xJR0hUQkxVRV9URVhUJyxcbiAgICAgICAgaWNvbjogJ1RfVEFHX0NPTE9SX0xJR0hUQkxVRV9JQ09OJyxcbiAgICAgICAgYm9yZGVyOiAnVF9UQUdfQ09MT1JfTElHSFRCTFVFX0JPUkRFUicsXG4gICAgICAgIGRpdmlkZXI6ICdUX1RBR19DT0xPUl9MSUdIVEJMVUVfRElWSURFUicsXG4gICAgICAgIGJnOiAnVF9UQUdfQ09MT1JfTElHSFRCTFVFX0JHX0xJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX1RBR19DT0xPUl9MSUdIVEJMVUVfQkdfREFSSydcbiAgICB9LFxuICAgIGJsdWU6IHtcbiAgICAgICAgY29sb3I6ICdUX1RBR19DT0xPUl9CTFVFX1RFWFQnLFxuICAgICAgICBpY29uOiAnVF9UQUdfQ09MT1JfQkxVRV9JQ09OJyxcbiAgICAgICAgYm9yZGVyOiAnVF9UQUdfQ09MT1JfQkxVRV9CT1JERVInLFxuICAgICAgICBkaXZpZGVyOiAnVF9UQUdfQ09MT1JfQkxVRV9ESVZJREVSJyxcbiAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9CTFVFX0JHX0xJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX1RBR19DT0xPUl9CTFVFX0JHX0RBUksnXG4gICAgfSxcbiAgICBvcmFuZ2U6IHtcbiAgICAgICAgY29sb3I6ICdUX1RBR19DT0xPUl9PUkFOR0VfVEVYVCcsXG4gICAgICAgIGljb246ICdUX1RBR19DT0xPUl9PUkFOR0VfSUNPTicsXG4gICAgICAgIGJvcmRlcjogJ1RfVEFHX0NPTE9SX09SQU5HRV9CT1JERVInLFxuICAgICAgICBkaXZpZGVyOiAnVF9UQUdfQ09MT1JfT1JBTkdfRElWSURFUicsXG4gICAgICAgIGJnOiAnVF9UQUdfQ09MT1JfT1JBTkdFX0JHX0xJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX1RBR19DT0xPUl9PUkFOR0VfQkdfREFSSydcbiAgICB9LFxuICAgIGN5YW46IHtcbiAgICAgICAgY29sb3I6ICdUX1RBR19DT0xPUl9DWUFOX0VYVCcsXG4gICAgICAgIGljb246ICdUX1RBR19DT0xPUl9DWUFOX0lDT04nLFxuICAgICAgICBib3JkZXI6ICdUX1RBR19DT0xPUl9DWUFOX0JPUkRFUicsXG4gICAgICAgIGRpdmlkZXI6ICdUX1RBR19DT0xPUl9DWUFOX0RJVklERVInLFxuICAgICAgICBiZzogJ1RfVEFHX0NPTE9SX0NZQU5fQkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX0NZQU5fQkdfREFSSydcbiAgICB9XG59O1xuXG5bXG4gICAgWydkZWZhdWx0JywgJ2dyYXknXSxcbiAgICBbJ3N1Y2Nlc3MnLCAnZ3JlZW4nXSxcbiAgICBbJ3dhcm5pbmcnLCAneWVsbG93J10sXG4gICAgWydlcnJvcicsICdyZWQnXVxuXS5tYXAoKFtzdHlsZVR5cGUsIGNvbG9yXSkgPT4ge1xuICAgIHN0eWxlTWFwW3N0eWxlVHlwZV0gPSBzdHlsZU1hcFtjb2xvcl07XG59KTtcblxuY29uc3QgZmlsbGVkU3R5bGVNYXAgPSB7XG4gICAgcHVycGxlOiB7XG4gICAgICAgIGJnOiAnVF9UQUdfQ09MT1JfUFVSUExFX0ZJTExCR19MSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9UQUdfQ09MT1JfUFVSUExFX0ZJTExCR19EQVJLJ1xuICAgIH0sXG4gICAgbGlnaHRibHVlOiB7XG4gICAgICAgIGJnOiAnVF9UQUdfQ09MT1JfTElHSFRCTFVFX0ZJTExCR19MSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9UQUdfQ09MT1JfTElHSFRCTFVFX0ZJTExCR19EQVJLJ1xuICAgIH0sXG4gICAgYmx1ZToge1xuICAgICAgICBiZzogJ1RfVEFHX0NPTE9SX0JMVUVfRklMTEJHX0xJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX1RBR19DT0xPUl9CTFVFX0ZJTExCR19EQVJLJ1xuICAgIH0sXG4gICAgb3JhbmdlOiB7XG4gICAgICAgIGJnOiAnVF9UQUdfQ09MT1JfT1JBTkdFX0ZJTExCR19MSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9UQUdfQ09MT1JfT1JBTkdFX0ZJTExCR19EQVJLJ1xuICAgIH0sXG4gICAgeWVsbG93OiB7XG4gICAgICAgIGJnOiAnVF9UQUdfQ09MT1JfWUVMTE9XX0ZJTExCR19MSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9UQUdfQ09MT1JfWUVMTE9XX0ZJTExCR19EQVJLJ1xuICAgIH0sXG4gICAgY3lhbjoge1xuICAgICAgICBiZzogJ1RfVEFHX0NPTE9SX0NZQU5fRklMTEJHX0xJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX1RBR19DT0xPUl9DWUFOX0ZJTExCR19EQVJLJ1xuICAgIH0sXG4gICAgcmVkOiB7XG4gICAgICAgIGJnOiAnVF9UQUdfQ09MT1JfUkVEX0ZJTExCR19MSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9UQUdfQ09MT1JfUkVEX0ZJTExCR19EQVJLJ1xuICAgIH1cbn07XG5cbk9iamVjdC5rZXlzKGZpbGxlZFN0eWxlTWFwKS5tYXAoa2V5ID0+IHtcbiAgICBjb25zdCBtYXAgPSBmaWxsZWRTdHlsZU1hcFtrZXldO1xuICAgIHN0eWxlTWFwW2tleSArICctZmlsbGVkJ10gPSB7XG4gICAgICAgIC4uLm1hcCxcbiAgICAgICAgYm9yZGVyOiBtYXAuYmcsXG4gICAgICAgIGRpdmlkZXI6IG1hcC5iZyxcbiAgICAgICAgY29sb3I6ICdUX0NPTE9SX1RFWFRfU1lTVEVNX1dISVRFJ1xuICAgIH07XG59KTtcblxuY29uc3Qgc3RhdGVTdHlsZU1hcCA9IHtcbiAgICBncmVlbjoge1xuICAgICAgICBjb2xvcjogJ1RfVEFHX0NPTE9SX0dSRUVOX1RFWFQnLFxuICAgICAgICBpY29uOiAnVF9UQUdfQ09MT1JfR1JFRU5fSUNPTicsXG4gICAgICAgIGRpdmlkZXI6ICdUX1RBR19DT0xPUl9HUkVFTl9ESVZJREVSJyxcbiAgICAgICAgYmc6ICdUX0NPTE9SX0JHX0RFRkFVTFRfQlJJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0JHX0RFRkFVTFRfQlJJR0hUJyxcbiAgICAgICAgYm9yZGVyOiAnVF9DT0xPUl9MSU5FX05PVElDRV9MSUdIVCcsXG4gICAgICAgIGZvbnRDb2xvcjogJ1RfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUksnXG4gICAgfSxcbiAgICBibHVlOiB7XG4gICAgICAgIGNvbG9yOiAnVF9UQUdfQ09MT1JfQkxVRV9URVhUJyxcbiAgICAgICAgaWNvbjogJ1RfVEFHX0NPTE9SX0JMVUVfSUNPTicsXG4gICAgICAgIGRpdmlkZXI6ICdUX1RBR19DT0xPUl9CTFVFX0RJVklERVInLFxuICAgICAgICBiZzogJ1RfQ09MT1JfQkdfREVGQVVMVF9CUklHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfQ09MT1JfQkdfREVGQVVMVF9CUklHSFQnLFxuICAgICAgICBib3JkZXI6ICdUX0NPTE9SX0xJTkVfTk9USUNFX0xJR0hUJyxcbiAgICAgICAgZm9udENvbG9yOiAnVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSSydcbiAgICB9LFxuICAgIHllbGxvdzoge1xuICAgICAgICBjb2xvcjogJ1RfVEFHX0NPTE9SX1lFTExPV19URVhUJyxcbiAgICAgICAgaWNvbjogJ1RfVEFHX0NPTE9SX1lFTExPV19JQ09OJyxcbiAgICAgICAgZGl2aWRlcjogJ1RfVEFHX0NPTE9SX1lFTExPV19ESVZJREVSJyxcbiAgICAgICAgYmc6ICdUX0NPTE9SX0JHX0RFRkFVTFRfQlJJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX0NPTE9SX0JHX0RFRkFVTFRfQlJJR0hUJyxcbiAgICAgICAgYm9yZGVyOiAnVF9DT0xPUl9MSU5FX05PVElDRV9MSUdIVCcsXG4gICAgICAgIGZvbnRDb2xvcjogJ1RfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUksnXG4gICAgfSxcbiAgICByZWQ6IHtcbiAgICAgICAgY29sb3I6ICdUX1RBR19DT0xPUl9SRURfVEVYVCcsXG4gICAgICAgIGljb246ICdUX1RBR19DT0xPUl9SRURfSUNPTicsXG4gICAgICAgIGRpdmlkZXI6ICdUX1RBR19DT0xPUl9SRURfRElWSURFUicsXG4gICAgICAgIGJnOiAnVF9UQUdfQ09MT1JfUkVEX0JHX0xJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX1RBR19DT0xPUl9SRURfQkdfREFSSycsXG4gICAgICAgIGJvcmRlcjogJ1RfVEFHX0NPTE9SX1JFRF9ESVZJREVSJyxcbiAgICAgICAgZm9udENvbG9yOiAnVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSSydcbiAgICB9XG59O1xuXG5PYmplY3Qua2V5cyhzdGF0ZVN0eWxlTWFwKS5tYXAoa2V5ID0+IHtcbiAgICBjb25zdCBtYXAgPSBzdGF0ZVN0eWxlTWFwW2tleV07XG4gICAgc3R5bGVNYXBba2V5ICsgJy1jcmlzcGVkJ10gPSB7XG4gICAgICAgIC4uLm1hcFxuICAgIH07XG59KTtcblxuZXhwb3J0IGNvbnN0IENsb3NlSWNvbiA9IHN0eWxlZChTdmdJY29uKWBcbiAgICAvKiBlbXB0eSAqL1xuYDtcblxuZXhwb3J0IGNvbnN0IENsb3NlSWNvbldyYXBwZXIgPSBzdHlsZWQoJ3NwYW4nKWBcbiAgICAvKiBlbXB0eSAqL1xuYDtcblxuZXhwb3J0IGNvbnN0IFByZWZpeEljb24gPSB3aXRoUHJvcHMoe1xuICAgIGNsYXNzTmFtZTogaWNvbkNsc1xufSkoXG4gICAgc3R5bGVkKEljb24pKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc2l6ZSxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG4gICAgICAgIGNvbnN0IGljb25TaXplID0gRFRbYFRfVEFHX0lDT05fU0laRV8keyhzaXplIHx8ICdzbScpLnRvTG9jYWxlVXBwZXJDYXNlKCl9YF07XG4gICAgICAgIHJldHVybiBgXG4gICAgICAgICBmb250LXNpemU6JHtpY29uU2l6ZX07XG4gICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IFN2Z0ljb25XcmFwcGVyID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IGljb25DbHNcbn0pKFxuICAgIHN0eWxlZCgnaScpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc2l6ZSxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG4gICAgICAgIGNvbnN0IGljb25TaXplID0gRFRbYFRfVEFHX0lDT05fU0laRV8keyhzaXplIHx8ICdzbScpLnRvTG9jYWxlVXBwZXJDYXNlKCl9YF07XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBzdmcge1xuICAgICAgICAgICAgICAgIHdpZHRoOiAke2ljb25TaXplfTtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6ICR7aWNvblNpemV9O1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuZXhwb3J0IGNvbnN0IFByZWZpeEljb25XcmFwcGVyID0gc3R5bGVkKCdzcGFuJylgXG4gICAgLyogZW1wdHkgKi9cbmA7XG5leHBvcnQgY29uc3QgU3VmZml4SWNvbldyYXBwZXIgPSBzdHlsZWQoJ3NwYW4nKWBcbiAgICAvKiBlbXB0eSAqL1xuYDtcbmNvbnN0IGdldENvbG9yTWFwID0gKHN0eWxlVHlwZSwgZGlzYWJsZWQpID0+IHtcbiAgICBpZiAoLy1maWxsJC8udGVzdChzdHlsZVR5cGUpKSB7XG4gICAgICAgIHN0eWxlVHlwZSArPSAnZWQnO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAgIChkaXNhYmxlZFxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICBjb2xvcjogJ1RfVEFHX0NPTE9SX0RJU0FCTEVEX1RFWFQnLFxuICAgICAgICAgICAgICAgICAgYm9yZGVyOiAnVF9UQUdfQ09MT1JfRElTQUJMRURfQk9SREVSJyxcbiAgICAgICAgICAgICAgICAgIGRpdmlkZXI6ICdUX1RBR19DT0xPUl9ESVNBQkxFRF9ESVZJREVSJyxcbiAgICAgICAgICAgICAgICAgIGJnOiAnVF9UQUdfQ09MT1JfRElTQUJMRURfQkdfTElHSFQnLFxuICAgICAgICAgICAgICAgICAgaWNvbkhvdmVyQkc6ICdUX1RBR19DT0xPUl9ESVNBQkxFRF9CR19MSUdIVCdcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBzdHlsZU1hcFtzdHlsZVR5cGVdKSB8fCB7fVxuICAgICk7XG59O1xuXG5leHBvcnQgY29uc3QgVGFnV3JhcHBlciA9IHdpdGhQcm9wcyh7XG4gICAgY2xhc3NOYW1lOiBwcmVmaXhDbHNcbn0pKFxuICAgIHN0eWxlZCgnc3BhbicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgYm9yZGVyOiBjdXN0b21Cb3JkZXIsXG4gICAgICAgICAgICBib3JkZXJUeXBlOiBjdXN0b21Cb3JkZXJUeXBlLFxuICAgICAgICAgICAgc3R5bGVUeXBlLFxuICAgICAgICAgICAgZGlzYWJsZWQsXG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH0sXG4gICAgICAgICAgICBjdXN0b21TdHlsZSxcbiAgICAgICAgICAgIGNsb3NhYmxlXG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICBjb25zdCBjb2xvck1hcCA9IGdldENvbG9yTWFwKHN0eWxlVHlwZSwgZGlzYWJsZWQpO1xuXG4gICAgICAgIGNvbnN0IGNvbG9yID0gY3VzdG9tU3R5bGU/LmNvbG9yIHx8IERUW2NvbG9yTWFwLmNvbG9yXTtcbiAgICAgICAgY29uc3QgaWNvbkNvbG9yID0gY3VzdG9tU3R5bGU/LmNvbG9yIHx8IERUW2NvbG9yTWFwLmljb25dO1xuICAgICAgICBjb25zdCBiZyA9IGN1c3RvbVN0eWxlPy5iYWNrZ3JvdW5kIHx8IERUW2NvbG9yTWFwLmJnXTtcblxuICAgICAgICBmdW5jdGlvbiBnZXRCb3JkZXIoY3VzdG9tQm9yZGVyKSB7XG4gICAgICAgICAgICBpZiAoY3VzdG9tQm9yZGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1c3RvbVN0eWxlPy5ib3JkZXJDb2xvciB8fCBEVFtjb2xvck1hcC5ib3JkZXJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIERUWydUX0NPTE9SX0xJTkVfREVGQVVMVF9UUkFOU1BBUkVOVCddO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYm9yZGVyID0gZ2V0Qm9yZGVyKGN1c3RvbUJvcmRlcik7XG4gICAgICAgIGNvbnN0IGJvcmRlclJhZGl1cyA9XG4gICAgICAgICAgICBjdXN0b21Cb3JkZXJUeXBlID09PSAnY2lyY2xlJ1xuICAgICAgICAgICAgICAgID8gYGNhbGMoJHtEVFsnVF9UQUdfSEVJR0hUX1NNJ119ICogJHtEVFsnVF9DT1JORVJfQ0lSQ0xFJ10ucmVwbGFjZSgnJScsICcnKSAvIDEwMH0pYFxuICAgICAgICAgICAgICAgIDogRFRbJ1RfVEFHX0JPUkRFUl9SQURJVVMnXTtcblxuICAgICAgICBjb25zdCBjbG9zZUljb25Cb3JkZXJSYWRpdXMgPSBjdXN0b21Cb3JkZXJUeXBlID09PSAnY2lyY2xlJyA/ICdjYWxjKCgyMHB4IC0gMnB4KS8yKScgOiAnMCAycHggMnB4IDAnO1xuXG4gICAgICAgIGNvbnN0IHBhZGRpbmdSaWdodCA9IGNsb3NhYmxlID8gMCA6ICc4cHgnO1xuICAgICAgICBjb25zdCBmb250Q29sb3IgPSBEVFtjb2xvck1hcC5mb250Q29sb3IgfHwgY29sb3JNYXAuY29sb3JdO1xuICAgICAgICBjb25zdCBkaXZpZGVyID0gRFRbY29sb3JNYXAuZGl2aWRlcl07XG5cbiAgICAgICAgY29uc3QgaWNvbkhvdmVyQkcgPVxuICAgICAgICAgICAgY3VzdG9tU3R5bGU/LmNsb3NlSWNvbkhvdmVyQmFja2dyb3VuZCB8fFxuICAgICAgICAgICAgKHN0eWxlVHlwZS5pbmNsdWRlcygnLWNyaXNwZWQnKSA/IERUWydUX0NPTE9SX0JHX1RSQU5TUEFSRU5UJ10gOiBEVFtjb2xvck1hcC5pY29uSG92ZXJCR10pO1xuICAgICAgICBjb25zdCBjbG9zZUljb25Db2xvciA9IHN0eWxlVHlwZS5pbmNsdWRlcygnLWNyaXNwZWQnKSA/IERUWydUX0NPTE9SX1RFWFRfREVGQVVMVF9EQVJLJ10gOiBjb2xvcjtcbiAgICAgICAgY29uc3QgY2xvc2VJY29uSG92ZXJDb2xvciA9IHN0eWxlVHlwZS5pbmNsdWRlcygnLWNyaXNwZWQnKVxuICAgICAgICAgICAgPyBEVFsnVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSSyddXG4gICAgICAgICAgICA6IERULlRfVEFHX0lDT05fQ0xPU0U7XG4gICAgICAgIGNvbnN0IGNsb3NlSWNvbk9wYWNpdHkgPSBzdHlsZVR5cGUuaW5jbHVkZXMoJy1jcmlzcGVkJykgPyAnMC41JyA6IERUWydUX1RBR19JQ09OX09QQUNJVFlfREVGQVVMVCddO1xuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgIGhlaWdodDogJHtEVFsnVF9UQUdfSEVJR0hUX1NNJ119O1xuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA4cHg7XG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAke3BhZGRpbmdSaWdodH07XG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICBjb2xvcjogJHtjb2xvcn07XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAke2JnfTtcbiAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICR7Ym9yZGVyfTtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6ICR7Ym9yZGVyUmFkaXVzfTtcblxuICAgICAgICAgICAgJHtQcmVmaXhJY29uV3JhcHBlcn0ge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IGNhbGMoJHtEVFsnVF9UQUdfSEVJR0hUX1NNJ119IC0gMnB4KTtcbiAgICAgICAgICAgICAgICBmbGV4LXNocmluazogMDtcbiAgICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgICAgIG1pbi13aWR0aDogJHtEVFsnVF9UQUdfSUNPTl9XSURUSF9TTSddfTtcbiAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICBjb2xvcjogJHtpY29uQ29sb3J9O1xuICAgICAgICAgICAgICAgIGkge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHtDb250ZW50V3JhcHBlcn0ge1xuICAgICAgICAgICAgICAgIGNvbG9yOiAke2ZvbnRDb2xvcn07XG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IGNhbGMoJHtEVFsnVF9UQUdfSEVJR0hUX1NNJ119IC0gMnB4KTtcbiAgICAgICAgICAgICAgICBmbGV4OiAxIDEgYXV0bztcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICAgICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgICAgICAgICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAke1N1ZmZpeEljb25XcmFwcGVyfSB7XG4gICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDRweDtcbiAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogY2FsYygke0RUWydUX1RBR19IRUlHSFRfU00nXX0gLSAycHgpO1xuICAgICAgICAgICAgICAgIGZsZXgtc2hyaW5rOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHtDbG9zZUljb25XcmFwcGVyfSB7XG4gICAgICAgICAgICAgICAgZmxvYXQ6IHJpZ2h0O1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICB3aWR0aDogMThweDtcbiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogNHB4O1xuICAgICAgICAgICAgICAgIGhlaWdodDogY2FsYygke0RUWydUX1RBR19IRUlHSFRfU00nXX0gLSAycHgpO1xuICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiBjYWxjKCR7RFRbJ1RfVEFHX0hFSUdIVF9TTSddfSAtIDJweCk7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAwO1xuICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAke2Nsb3NlSWNvbkJvcmRlclJhZGl1c307XG4gICAgICAgICAgICAgICAgJHshZGlzYWJsZWQgJiYgJ2N1cnNvcjogcG9pbnRlcid9O1xuICAgICAgICAgICAgICAgIGNvbG9yOiAke2Nsb3NlSWNvbkNvbG9yfTtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIDAuM3M7XG4gICAgICAgICAgICAgICAgZmxleC1zaHJpbms6IDA7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogJHtjbG9zZUljb25PcGFjaXR5fTtcbiAgICAgICAgICAgICAgICAke0Nsb3NlSWNvbn0ge1xuICAgICAgICAgICAgICAgICAgICBmaWxsOiAke2Nsb3NlSWNvbkNvbG9yfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJHshZGlzYWJsZWQgJiZcbiAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgICAgIDpob3ZlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke2ljb25Ib3ZlckJHfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6ICR7RFRbJ1RfVEFHX0lDT05fT1BBQ0lUWV9IT1ZFUiddfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICR7Q2xvc2VJY29ufSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogJHtjbG9zZUljb25Ib3ZlckNvbG9yfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOjphZnRlciB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtkaXZpZGVyfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IENvbnRlbnRXcmFwcGVyID0gc3R5bGVkKCdzcGFuJylgXG4gICAgLyogZW1wdHkgKi9cbmA7XG5cbmV4cG9ydCBjb25zdCBJY29uVGFnID0gc3R5bGVkKEljb24pYFxuICAgIC8qIGVtcHR5ICovXG5gO1xuZXhwb3J0IGNvbnN0IEljb25UYWdXcmFwcGVyID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IGljb25DbHNcbn0pKFxuICAgIHN0eWxlZCgnc3BhbicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc3R5bGVUeXBlID0gJ2RlZmF1bHQnLFxuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9LFxuICAgICAgICAgICAgZGlzYWJsZWQsXG4gICAgICAgICAgICBjdXN0b21TdHlsZSxcbiAgICAgICAgICAgIGJvcmRlclR5cGU6IGN1c3RvbUJvcmRlclR5cGUsXG4gICAgICAgICAgICBpY29uU2l6ZTogc2l6ZSxcbiAgICAgICAgICAgIGJvcmRlcjogY3VzdG9tQm9yZGVyXG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICBmdW5jdGlvbiBnZXRCb3JkZXIoY3VzdG9tQm9yZGVyKSB7XG4gICAgICAgICAgICBpZiAoY3VzdG9tQm9yZGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1c3RvbVN0eWxlPy5ib3JkZXJDb2xvciB8fCBEVFtjb2xvck1hcC5ib3JkZXJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIERUWydUX0NPTE9SX0xJTkVfREVGQVVMVF9UUkFOU1BBUkVOVCddO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGljb25TaXplID0gRFRbYFRfVEFHX0lDT05fU0laRV8keyhzaXplIHx8ICdzbScpLnRvTG9jYWxlVXBwZXJDYXNlKCl9YF07XG5cbiAgICAgICAgY29uc3QgY29sb3JNYXAgPSBnZXRDb2xvck1hcChzdHlsZVR5cGUsIGRpc2FibGVkKTtcbiAgICAgICAgY29uc3QgY29sb3IgPSBjdXN0b21TdHlsZT8uY29sb3IgfHwgRFRbY29sb3JNYXAuY29sb3JdO1xuICAgICAgICBjb25zdCBiZyA9IGN1c3RvbVN0eWxlPy5iYWNrZ3JvdW5kIHx8IERUW2NvbG9yTWFwLmJnXTtcblxuICAgICAgICBjb25zdCBib3JkZXIgPSBnZXRCb3JkZXIoY3VzdG9tQm9yZGVyKTtcbiAgICAgICAgY29uc3QgYm9yZGVyUmFkaXVzID1cbiAgICAgICAgICAgIGN1c3RvbUJvcmRlclR5cGUgPT09ICdjaXJjbGUnXG4gICAgICAgICAgICAgICAgPyBgY2FsYygke0RUWydUX1RBR19IRUlHSFRfU00nXX0gKiAke0RUWydUX0NPUk5FUl9DSVJDTEUnXS5yZXBsYWNlKCclJywgJycpIC8gMTAwfSlgXG4gICAgICAgICAgICAgICAgOiBEVFsnVF9UQUdfQk9SREVSX1JBRElVUyddO1xuICAgICAgICBjb25zdCBkaXZpZGVyID0gRFRbY29sb3JNYXAuZGl2aWRlcl07XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICBoZWlnaHQ6ICR7RFRbJ1RfVEFHX0hFSUdIVF9TTSddfTtcbiAgICAgICAgICAgIHdpZHRoOiAyMHB4O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IGNhbGMoJHtEVFsnVF9UQUdfSEVJR0hUX1NNJ119IC0gMnB4KTtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6ICR7Ym9yZGVyUmFkaXVzfTtcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICR7Ym9yZGVyfTtcbiAgICAgICAgICAgIGNvbG9yOiAke2NvbG9yfTtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7Ymd9O1xuICAgICAgICAgICAgZm9udC1zaXplOiAke2ljb25TaXplfTtcbiAgICAgICAgICAgIDo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgICAgICByaWdodDogLTFweDtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke2RpdmlkZXJ9O1xuICAgICAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICAgICAgYm9yZGVyOiAwIHNvbGlkICR7Ymd9O1xuICAgICAgICAgICAgICAgIGJvcmRlci13aWR0aDogNXB4IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBUYWdHcm91cFdyYXBwZXIgPSB3aXRoUHJvcHMoKShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3QgeyBjb21wYWN0IH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY29tcGFjdFxuICAgICAgICAgICAgPyBjc3NgXG4gICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAtNHB4O1xuICAgICAgICAgICAgICAgICAgLiR7cHJlZml4Q2xzfSwgLiR7aWNvbkNsc30ge1xuICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1sZWZ0LXN0eWxlOiBub25lO1xuICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1yaWdodC1zdHlsZTogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAwO1xuICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogNHB4O1xuICAgICAgICAgICAgICAgICAgICAgIDpmaXJzdC1vZi10eXBlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWxlZnQtc3R5bGU6IHNvbGlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAycHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDJweDtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgOmFmdGVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogJyAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDhweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDFweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiA1cHggMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICA6bGFzdC1vZi10eXBlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJpZ2h0LXN0eWxlOiBzb2xpZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDJweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDJweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOjphZnRlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBub25lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgLiR7aWNvbkNsc30ge1xuICAgICAgICAgICAgICAgICAgICAgIDphZnRlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiA1MCU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIC4ke3ByZWZpeENsc30ge1xuICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogNHB4O1xuICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDBweDtcbiAgICAgICAgICAgICAgICAgICAgICA6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogOHB4O1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAke0NvbnRlbnRXcmFwcGVyfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogNHB4O1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICA6bGFzdC1vZi10eXBlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJHtDb250ZW50V3JhcHBlcn0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGBcbiAgICAgICAgICAgIDogY3NzYFxuICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogLTRweDtcbiAgICAgICAgICAgICAgICAgIC4ke3ByZWZpeENsc30sIC4ke2ljb25DbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDRweDtcbiAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA0cHg7XG4gICAgICAgICAgICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYDtcbiAgICB9KVxuKTtcbmV4cG9ydCBjb25zdCBTV3JhcCA9IHdpdGhQcm9wcyh7XG4gICAgY2xhc3NOYW1lOiBpY29uQ2xzXG59KShcbiAgICBzdHlsZWQoQ29tYmluZSkocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7IGV4cG9zZUNvdW50IH0gPSBwcm9wcztcbiAgICAgICAgcmV0dXJuIGV4cG9zZUNvdW50ID09PSB2b2lkIDBcbiAgICAgICAgICAgID8gJydcbiAgICAgICAgICAgIDogY3NzYFxuICAgICAgICAgICAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgICAgICAgICAgICAgIC4ke3ByZWZpeENsc30sIC4ke2ljb25DbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDBweDtcbiAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwcHg7XG4gICAgICAgICAgICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIC4ke2ljb25DbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwcHg7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGA7XG4gICAgfSlcbik7XG5leHBvcnQgY29uc3QgVGFnTWVudVdhcHBlciA9IHdpdGhQcm9wcyh7XG4gICAgY2xhc3NOYW1lOiBpY29uQ2xzXG59KShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIC4ke21lbnVDbHN9IHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiA4cHggMCA0cHggMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC4ke3ByZWZpeENsc30sLiR7aWNvbkNsc30ge1xuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDRweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9KVxuKTtcbmV4cG9ydCBjb25zdCBUYWdQb3BvdmVyV3JhcCA9IHdpdGhQcm9wcyh7XG4gICAgY2xhc3NOYW1lOiBpY29uQ2xzXG59KShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIHBhZGRpbmc6IDAgOHB4O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6ICR7RFRbJ1RfVEFHX0hFSUdIVF9TTSddfTtcbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IFRhZ01vcmVXYXBwZXIgPSB3aXRoUHJvcHMoe1xuICAgIGNsYXNzTmFtZTogaWNvbkNsc1xufSkoXG4gICAgc3R5bGVkKCdzcGFuJykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICAuJHtwcmVmaXhDbHN9IHtcbiAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgICAgIGhlaWdodDogJHtEVFsnVF9UQUdfSEVJR0hUX1NNJ119O1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDAgNnB4O1xuICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiBjYWxjKCR7RFRbJ1RfVEFHX0hFSUdIVF9TTSddfSAtIDJweCk7XG4gICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAke0RUWydUX1RBR19CT1JERVJfUkFESVVTJ119O1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgICAgICBib3JkZXI6IDFweCAke0RUWydUX0xJTkVfU1RZTEVfREFTSEVEJ119ICR7RFRbJ1RfUE9QT1ZFUl9DT0xPUl9MSU5FX0xJR0hUJ119O1xuICAgICAgICAgICAgICAgIGNvbG9yOiAke0RUWydUX0NPTE9SX1RFWFRfREVGQVVMVF9EQVJLJ119O1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IG5vbmU7XG4gICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuIl19 */"));
exports.TagWrapper = TagWrapper;
var ContentWrapper = ( /*#__PURE__*/0, _styledBase.default)('span', {
  target: "e19zfbcx7",
  label: "ContentWrapper"
})(process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
exports.ContentWrapper = ContentWrapper;
var IconTag = ( /*#__PURE__*/0, _styledBase.default)(_Icon.default, {
  target: "e19zfbcx8",
  label: "IconTag"
})(process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
exports.IconTag = IconTag;
var IconTagWrapper = (0, _withProps.default)({
  className: iconCls
})(( /*#__PURE__*/0, _styledBase.default)('span', {
  target: "e19zfbcx9",
  label: "IconTagWrapper"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var _props$styleType = props.styleType,
      styleType = _props$styleType === void 0 ? 'default' : _props$styleType,
      DT = props.theme.designTokens,
      disabled = props.disabled,
      customStyle = props.customStyle,
      customBorderType = props.borderType,
      size = props.iconSize,
      customBorder = props.border;

  function getBorder(customBorder) {
    if (customBorder) {
      return (customStyle === null || customStyle === void 0 ? void 0 : customStyle.borderColor) || DT[colorMap.border];
    }

    return DT['T_COLOR_LINE_DEFAULT_TRANSPARENT'];
  }

  var iconSize = DT["T_TAG_ICON_SIZE_".concat((size || 'sm').toLocaleUpperCase())];
  var colorMap = getColorMap(styleType, disabled);
  var color = (customStyle === null || customStyle === void 0 ? void 0 : customStyle.color) || DT[colorMap.color];
  var bg = (customStyle === null || customStyle === void 0 ? void 0 : customStyle.background) || DT[colorMap.bg];
  var border = getBorder(customBorder);
  var borderRadius = customBorderType === 'circle' ? "calc(".concat(DT['T_TAG_HEIGHT_SM'], " * ").concat(DT['T_CORNER_CIRCLE'].replace('%', '') / 100, ")") : DT['T_TAG_BORDER_RADIUS'];
  var divider = DT[colorMap.divider];
  return /*#__PURE__*/(0, _core.css)("box-sizing:border-box;height:", DT['T_TAG_HEIGHT_SM'], ";width:20px;line-height:calc(", DT['T_TAG_HEIGHT_SM'], " - 2px);text-align:center;display:inline-block;border-radius:", borderRadius, ";position:relative;border:1px solid ", border, ";color:", color, ";background:", bg, ";font-size:", iconSize, ";::after{position:absolute;right:-1px;background:", divider, ";box-sizing:border-box;border:0 solid ", bg, ";border-width:5px 0;};label:IconTagWrapper;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.IconTagWrapper = IconTagWrapper;
var TagGroupWrapper = (0, _withProps.default)()(( /*#__PURE__*/0, _styledBase.default)('div', {
  target: "e19zfbcx10",
  label: "TagGroupWrapper"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var compact = props.compact;
  return compact ? /*#__PURE__*/(0, _core.css)("margin-bottom:-4px;.", prefixCls, ",.", iconCls, "{border-left-style:none;border-right-style:none;border-radius:0;vertical-align:middle;margin-bottom:4px;:first-of-type{border-left-style:solid;border-top-left-radius:2px;border-bottom-left-radius:2px;}:after{content:' ';height:8px;width:1px;margin:5px 0;display:inline-block;vertical-align:middle;}:last-of-type{border-right-style:solid;border-top-right-radius:2px;border-bottom-right-radius:2px;::after{height:100%;content:none;}}}.", iconCls, "{:after{margin:0;top:50%;transform:translateY(-50%);border:none;}}.", prefixCls, "{padding-left:4px;padding-right:0px;:first-of-type{padding-left:8px;}", ContentWrapper, "{margin-right:4px;}:last-of-type{", ContentWrapper, "{margin-right:8px;}}};label:TagGroupWrapper;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")) : /*#__PURE__*/(0, _core.css)("margin-bottom:-4px;.", prefixCls, ",.", iconCls, "{margin-right:4px;margin-bottom:4px;vertical-align:middle;};label:TagGroupWrapper;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.TagGroupWrapper = TagGroupWrapper;
var SWrap = (0, _withProps.default)({
  className: iconCls
})(( /*#__PURE__*/0, _styledBase.default)(_Combine.default, {
  target: "e19zfbcx11",
  label: "SWrap"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var exposeCount = props.exposeCount;
  return exposeCount === void 0 ? '' : /*#__PURE__*/(0, _core.css)("white-space:nowrap;.", prefixCls, ",.", iconCls, "{margin-right:0px;margin-bottom:0px;vertical-align:middle;}.", iconCls, "{margin-bottom:0px;};label:SWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.SWrap = SWrap;
var TagMenuWapper = (0, _withProps.default)({
  className: iconCls
})(( /*#__PURE__*/0, _styledBase.default)('div', {
  target: "e19zfbcx12",
  label: "TagMenuWapper"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  return /*#__PURE__*/(0, _core.css)(".", menuCls, "{padding:8px 0 4px 0;}.", prefixCls, ",.", iconCls, "{margin-bottom:4px;};label:TagMenuWapper;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.TagMenuWapper = TagMenuWapper;
var TagPopoverWrap = (0, _withProps.default)({
  className: iconCls
})(( /*#__PURE__*/0, _styledBase.default)('div', {
  target: "e19zfbcx13",
  label: "TagPopoverWrap"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var DT = props.theme.designTokens;
  return /*#__PURE__*/(0, _core.css)("padding:0 8px;line-height:", DT['T_TAG_HEIGHT_SM'], ";;label:TagPopoverWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RhZy9zdHlsZS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE0aUJrQiIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9UYWcvc3R5bGUvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBDb21iaW5lIGZyb20gJ3NyYy9jb21wb25lbnRzL0NvbWJpbmUnO1xuaW1wb3J0IGNvbmZpZyBmcm9tICdzcmMvY29uZmlnJztcbmltcG9ydCBTdmdJY29uIGZyb20gJ3NyYy9jb21wb25lbnRzL1N2Z0ljb24nO1xuaW1wb3J0IEljb24gZnJvbSAnc3JjL2NvbXBvbmVudHMvSWNvbic7XG5pbXBvcnQgd2l0aFByb3BzIGZyb20gJ3NyYy91dGlscy93aXRoUHJvcHMnO1xuXG5jb25zdCB7IHByZWZpeENsczogX3ByZWZpeENscyB9ID0gY29uZmlnO1xuZXhwb3J0IGNvbnN0IHByZWZpeENscyA9IF9wcmVmaXhDbHMgKyAnLXRhZyc7XG5leHBvcnQgY29uc3QgbWVudUNscyA9IF9wcmVmaXhDbHMgKyAnLW1lbnUnO1xuZXhwb3J0IGNvbnN0IGljb25DbHMgPSBfcHJlZml4Q2xzICsgJy10YWctaWNvbic7XG5cbmV4cG9ydCBjb25zdCBzdHlsZU1hcCA9IHtcbiAgICBncmF5OiB7XG4gICAgICAgIGNvbG9yOiAnVF9UQUdfQ09MT1JfR1JBWV9URVhUJyxcbiAgICAgICAgaWNvbjogJ1RfVEFHX0NPTE9SX0dSQVlfSUNPTicsXG4gICAgICAgIGJvcmRlcjogJ1RfVEFHX0NPTE9SX0dSQVlfQk9SREVSJyxcbiAgICAgICAgZGl2aWRlcjogJ1RfVEFHX0NPTE9SX0dSQVlfRElWSURFUicsXG4gICAgICAgIGJnOiAnVF9UQUdfQ09MT1JfR1JBWV9CR19MSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9UQUdfQ09MT1JfR1JBWV9CR19EQVJLJ1xuICAgIH0sXG4gICAgZ3JlZW46IHtcbiAgICAgICAgY29sb3I6ICdUX1RBR19DT0xPUl9HUkVFTl9URVhUJyxcbiAgICAgICAgaWNvbjogJ1RfVEFHX0NPTE9SX0dSRUVOX0lDT04nLFxuICAgICAgICBib3JkZXI6ICdUX1RBR19DT0xPUl9HUkVFTl9CT1JERVInLFxuICAgICAgICBkaXZpZGVyOiAnVF9UQUdfQ09MT1JfR1JFRU5fRElWSURFUicsXG4gICAgICAgIGJnOiAnVF9UQUdfQ09MT1JfR1JFRU5fQkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX0dSRUVOX0JHX0RBUksnXG4gICAgfSxcbiAgICB5ZWxsb3c6IHtcbiAgICAgICAgY29sb3I6ICdUX1RBR19DT0xPUl9ZRUxMT1dfVEVYVCcsXG4gICAgICAgIGljb246ICdUX1RBR19DT0xPUl9ZRUxMT1dfSUNPTicsXG4gICAgICAgIGJvcmRlcjogJ1RfVEFHX0NPTE9SX1lFTExPV19CT1JERVInLFxuICAgICAgICBkaXZpZGVyOiAnVF9UQUdfQ09MT1JfWUVMTE9XX0RJVklERVInLFxuICAgICAgICBiZzogJ1RfVEFHX0NPTE9SX1lFTExPV19CR19MSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9UQUdfQ09MT1JfWUVMTE9XX0JHX0RBUksnXG4gICAgfSxcbiAgICByZWQ6IHtcbiAgICAgICAgY29sb3I6ICdUX1RBR19DT0xPUl9SRURfVEVYVCcsXG4gICAgICAgIGljb246ICdUX1RBR19DT0xPUl9SRURfSUNPTicsXG4gICAgICAgIGJvcmRlcjogJ1RfVEFHX0NPTE9SX1JFRF9CT1JERVInLFxuICAgICAgICBkaXZpZGVyOiAnVF9UQUdfQ09MT1JfUkVEX0RJVklERVInLFxuICAgICAgICBiZzogJ1RfVEFHX0NPTE9SX1JFRF9CR19MSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9UQUdfQ09MT1JfUkVEX0JHX0RBUksnXG4gICAgfSxcbiAgICBwcmltYXJ5OiB7XG4gICAgICAgIGNvbG9yOiAnVF9UQUdfQ09MT1JfUFJJTUFSWV9URVhUJyxcbiAgICAgICAgaWNvbjogJ1RfVEFHX0NPTE9SX1BSSU1BUllfSUNPTicsXG4gICAgICAgIGJvcmRlcjogJ1RfVEFHX0NPTE9SX1BSSU1BUllfQk9SREVSJyxcbiAgICAgICAgZGl2aWRlcjogJ1RfVEFHX0NPTE9SX1BSSU1BUllfRElWSURFUicsXG4gICAgICAgIGJnOiAnVF9UQUdfQ09MT1JfUFJJTUFSWV9CR19MSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9UQUdfQ09MT1JfUFJJTUFSWV9CR19EQVJLJ1xuICAgIH0sXG4gICAgcHVycGxlOiB7XG4gICAgICAgIGNvbG9yOiAnVF9UQUdfQ09MT1JfUFVSUExFX1RFWFQnLFxuICAgICAgICBpY29uOiAnVF9UQUdfQ09MT1JfUFVSUExFX0lDT04nLFxuICAgICAgICBib3JkZXI6ICdUX1RBR19DT0xPUl9QVVJQTEVfQk9SREVSJyxcbiAgICAgICAgZGl2aWRlcjogJ1RfVEFHX0NPTE9SX1BVUlBMRV9ESVZJREVSJyxcbiAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9QVVJQTEVfQkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX1BVUlBMRV9CR19EQVJLJ1xuICAgIH0sXG4gICAgbGlnaHRibHVlOiB7XG4gICAgICAgIGNvbG9yOiAnVF9UQUdfQ09MT1JfTElHSFRCTFVFX1RFWFQnLFxuICAgICAgICBpY29uOiAnVF9UQUdfQ09MT1JfTElHSFRCTFVFX0lDT04nLFxuICAgICAgICBib3JkZXI6ICdUX1RBR19DT0xPUl9MSUdIVEJMVUVfQk9SREVSJyxcbiAgICAgICAgZGl2aWRlcjogJ1RfVEFHX0NPTE9SX0xJR0hUQkxVRV9ESVZJREVSJyxcbiAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9MSUdIVEJMVUVfQkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX0xJR0hUQkxVRV9CR19EQVJLJ1xuICAgIH0sXG4gICAgYmx1ZToge1xuICAgICAgICBjb2xvcjogJ1RfVEFHX0NPTE9SX0JMVUVfVEVYVCcsXG4gICAgICAgIGljb246ICdUX1RBR19DT0xPUl9CTFVFX0lDT04nLFxuICAgICAgICBib3JkZXI6ICdUX1RBR19DT0xPUl9CTFVFX0JPUkRFUicsXG4gICAgICAgIGRpdmlkZXI6ICdUX1RBR19DT0xPUl9CTFVFX0RJVklERVInLFxuICAgICAgICBiZzogJ1RfVEFHX0NPTE9SX0JMVUVfQkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX0JMVUVfQkdfREFSSydcbiAgICB9LFxuICAgIG9yYW5nZToge1xuICAgICAgICBjb2xvcjogJ1RfVEFHX0NPTE9SX09SQU5HRV9URVhUJyxcbiAgICAgICAgaWNvbjogJ1RfVEFHX0NPTE9SX09SQU5HRV9JQ09OJyxcbiAgICAgICAgYm9yZGVyOiAnVF9UQUdfQ09MT1JfT1JBTkdFX0JPUkRFUicsXG4gICAgICAgIGRpdmlkZXI6ICdUX1RBR19DT0xPUl9PUkFOR19ESVZJREVSJyxcbiAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9PUkFOR0VfQkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX09SQU5HRV9CR19EQVJLJ1xuICAgIH0sXG4gICAgY3lhbjoge1xuICAgICAgICBjb2xvcjogJ1RfVEFHX0NPTE9SX0NZQU5fRVhUJyxcbiAgICAgICAgaWNvbjogJ1RfVEFHX0NPTE9SX0NZQU5fSUNPTicsXG4gICAgICAgIGJvcmRlcjogJ1RfVEFHX0NPTE9SX0NZQU5fQk9SREVSJyxcbiAgICAgICAgZGl2aWRlcjogJ1RfVEFHX0NPTE9SX0NZQU5fRElWSURFUicsXG4gICAgICAgIGJnOiAnVF9UQUdfQ09MT1JfQ1lBTl9CR19MSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9UQUdfQ09MT1JfQ1lBTl9CR19EQVJLJ1xuICAgIH1cbn07XG5cbltcbiAgICBbJ2RlZmF1bHQnLCAnZ3JheSddLFxuICAgIFsnc3VjY2VzcycsICdncmVlbiddLFxuICAgIFsnd2FybmluZycsICd5ZWxsb3cnXSxcbiAgICBbJ2Vycm9yJywgJ3JlZCddXG5dLm1hcCgoW3N0eWxlVHlwZSwgY29sb3JdKSA9PiB7XG4gICAgc3R5bGVNYXBbc3R5bGVUeXBlXSA9IHN0eWxlTWFwW2NvbG9yXTtcbn0pO1xuXG5jb25zdCBmaWxsZWRTdHlsZU1hcCA9IHtcbiAgICBwdXJwbGU6IHtcbiAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9QVVJQTEVfRklMTEJHX0xJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX1RBR19DT0xPUl9QVVJQTEVfRklMTEJHX0RBUksnXG4gICAgfSxcbiAgICBsaWdodGJsdWU6IHtcbiAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9MSUdIVEJMVUVfRklMTEJHX0xJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX1RBR19DT0xPUl9MSUdIVEJMVUVfRklMTEJHX0RBUksnXG4gICAgfSxcbiAgICBibHVlOiB7XG4gICAgICAgIGJnOiAnVF9UQUdfQ09MT1JfQkxVRV9GSUxMQkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX0JMVUVfRklMTEJHX0RBUksnXG4gICAgfSxcbiAgICBvcmFuZ2U6IHtcbiAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9PUkFOR0VfRklMTEJHX0xJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX1RBR19DT0xPUl9PUkFOR0VfRklMTEJHX0RBUksnXG4gICAgfSxcbiAgICB5ZWxsb3c6IHtcbiAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9ZRUxMT1dfRklMTEJHX0xJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX1RBR19DT0xPUl9ZRUxMT1dfRklMTEJHX0RBUksnXG4gICAgfSxcbiAgICBjeWFuOiB7XG4gICAgICAgIGJnOiAnVF9UQUdfQ09MT1JfQ1lBTl9GSUxMQkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX0NZQU5fRklMTEJHX0RBUksnXG4gICAgfSxcbiAgICByZWQ6IHtcbiAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9SRURfRklMTEJHX0xJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX1RBR19DT0xPUl9SRURfRklMTEJHX0RBUksnXG4gICAgfVxufTtcblxuT2JqZWN0LmtleXMoZmlsbGVkU3R5bGVNYXApLm1hcChrZXkgPT4ge1xuICAgIGNvbnN0IG1hcCA9IGZpbGxlZFN0eWxlTWFwW2tleV07XG4gICAgc3R5bGVNYXBba2V5ICsgJy1maWxsZWQnXSA9IHtcbiAgICAgICAgLi4ubWFwLFxuICAgICAgICBib3JkZXI6IG1hcC5iZyxcbiAgICAgICAgZGl2aWRlcjogbWFwLmJnLFxuICAgICAgICBjb2xvcjogJ1RfQ09MT1JfVEVYVF9TWVNURU1fV0hJVEUnXG4gICAgfTtcbn0pO1xuXG5jb25zdCBzdGF0ZVN0eWxlTWFwID0ge1xuICAgIGdyZWVuOiB7XG4gICAgICAgIGNvbG9yOiAnVF9UQUdfQ09MT1JfR1JFRU5fVEVYVCcsXG4gICAgICAgIGljb246ICdUX1RBR19DT0xPUl9HUkVFTl9JQ09OJyxcbiAgICAgICAgZGl2aWRlcjogJ1RfVEFHX0NPTE9SX0dSRUVOX0RJVklERVInLFxuICAgICAgICBiZzogJ1RfQ09MT1JfQkdfREVGQVVMVF9CUklHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfQ09MT1JfQkdfREVGQVVMVF9CUklHSFQnLFxuICAgICAgICBib3JkZXI6ICdUX0NPTE9SX0xJTkVfTk9USUNFX0xJR0hUJyxcbiAgICAgICAgZm9udENvbG9yOiAnVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSSydcbiAgICB9LFxuICAgIGJsdWU6IHtcbiAgICAgICAgY29sb3I6ICdUX1RBR19DT0xPUl9CTFVFX1RFWFQnLFxuICAgICAgICBpY29uOiAnVF9UQUdfQ09MT1JfQkxVRV9JQ09OJyxcbiAgICAgICAgZGl2aWRlcjogJ1RfVEFHX0NPTE9SX0JMVUVfRElWSURFUicsXG4gICAgICAgIGJnOiAnVF9DT0xPUl9CR19ERUZBVUxUX0JSSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9DT0xPUl9CR19ERUZBVUxUX0JSSUdIVCcsXG4gICAgICAgIGJvcmRlcjogJ1RfQ09MT1JfTElORV9OT1RJQ0VfTElHSFQnLFxuICAgICAgICBmb250Q29sb3I6ICdUX0NPTE9SX1RFWFRfREVGQVVMVF9EQVJLJ1xuICAgIH0sXG4gICAgeWVsbG93OiB7XG4gICAgICAgIGNvbG9yOiAnVF9UQUdfQ09MT1JfWUVMTE9XX1RFWFQnLFxuICAgICAgICBpY29uOiAnVF9UQUdfQ09MT1JfWUVMTE9XX0lDT04nLFxuICAgICAgICBkaXZpZGVyOiAnVF9UQUdfQ09MT1JfWUVMTE9XX0RJVklERVInLFxuICAgICAgICBiZzogJ1RfQ09MT1JfQkdfREVGQVVMVF9CUklHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfQ09MT1JfQkdfREVGQVVMVF9CUklHSFQnLFxuICAgICAgICBib3JkZXI6ICdUX0NPTE9SX0xJTkVfTk9USUNFX0xJR0hUJyxcbiAgICAgICAgZm9udENvbG9yOiAnVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSSydcbiAgICB9LFxuICAgIHJlZDoge1xuICAgICAgICBjb2xvcjogJ1RfVEFHX0NPTE9SX1JFRF9URVhUJyxcbiAgICAgICAgaWNvbjogJ1RfVEFHX0NPTE9SX1JFRF9JQ09OJyxcbiAgICAgICAgZGl2aWRlcjogJ1RfVEFHX0NPTE9SX1JFRF9ESVZJREVSJyxcbiAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9SRURfQkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX1JFRF9CR19EQVJLJyxcbiAgICAgICAgYm9yZGVyOiAnVF9UQUdfQ09MT1JfUkVEX0RJVklERVInLFxuICAgICAgICBmb250Q29sb3I6ICdUX0NPTE9SX1RFWFRfREVGQVVMVF9EQVJLJ1xuICAgIH1cbn07XG5cbk9iamVjdC5rZXlzKHN0YXRlU3R5bGVNYXApLm1hcChrZXkgPT4ge1xuICAgIGNvbnN0IG1hcCA9IHN0YXRlU3R5bGVNYXBba2V5XTtcbiAgICBzdHlsZU1hcFtrZXkgKyAnLWNyaXNwZWQnXSA9IHtcbiAgICAgICAgLi4ubWFwXG4gICAgfTtcbn0pO1xuXG5leHBvcnQgY29uc3QgQ2xvc2VJY29uID0gc3R5bGVkKFN2Z0ljb24pYFxuICAgIC8qIGVtcHR5ICovXG5gO1xuXG5leHBvcnQgY29uc3QgQ2xvc2VJY29uV3JhcHBlciA9IHN0eWxlZCgnc3BhbicpYFxuICAgIC8qIGVtcHR5ICovXG5gO1xuXG5leHBvcnQgY29uc3QgUHJlZml4SWNvbiA9IHdpdGhQcm9wcyh7XG4gICAgY2xhc3NOYW1lOiBpY29uQ2xzXG59KShcbiAgICBzdHlsZWQoSWNvbikocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzaXplLFxuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcbiAgICAgICAgY29uc3QgaWNvblNpemUgPSBEVFtgVF9UQUdfSUNPTl9TSVpFXyR7KHNpemUgfHwgJ3NtJykudG9Mb2NhbGVVcHBlckNhc2UoKX1gXTtcbiAgICAgICAgcmV0dXJuIGBcbiAgICAgICAgIGZvbnQtc2l6ZToke2ljb25TaXplfTtcbiAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgU3ZnSWNvbldyYXBwZXIgPSB3aXRoUHJvcHMoe1xuICAgIGNsYXNzTmFtZTogaWNvbkNsc1xufSkoXG4gICAgc3R5bGVkKCdpJykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzaXplLFxuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcbiAgICAgICAgY29uc3QgaWNvblNpemUgPSBEVFtgVF9UQUdfSUNPTl9TSVpFXyR7KHNpemUgfHwgJ3NtJykudG9Mb2NhbGVVcHBlckNhc2UoKX1gXTtcbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIHN2ZyB7XG4gICAgICAgICAgICAgICAgd2lkdGg6ICR7aWNvblNpemV9O1xuICAgICAgICAgICAgICAgIGhlaWdodDogJHtpY29uU2l6ZX07XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5leHBvcnQgY29uc3QgUHJlZml4SWNvbldyYXBwZXIgPSBzdHlsZWQoJ3NwYW4nKWBcbiAgICAvKiBlbXB0eSAqL1xuYDtcbmV4cG9ydCBjb25zdCBTdWZmaXhJY29uV3JhcHBlciA9IHN0eWxlZCgnc3BhbicpYFxuICAgIC8qIGVtcHR5ICovXG5gO1xuY29uc3QgZ2V0Q29sb3JNYXAgPSAoc3R5bGVUeXBlLCBkaXNhYmxlZCkgPT4ge1xuICAgIGlmICgvLWZpbGwkLy50ZXN0KHN0eWxlVHlwZSkpIHtcbiAgICAgICAgc3R5bGVUeXBlICs9ICdlZCc7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgKGRpc2FibGVkXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAnVF9UQUdfQ09MT1JfRElTQUJMRURfVEVYVCcsXG4gICAgICAgICAgICAgICAgICBib3JkZXI6ICdUX1RBR19DT0xPUl9ESVNBQkxFRF9CT1JERVInLFxuICAgICAgICAgICAgICAgICAgZGl2aWRlcjogJ1RfVEFHX0NPTE9SX0RJU0FCTEVEX0RJVklERVInLFxuICAgICAgICAgICAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9ESVNBQkxFRF9CR19MSUdIVCcsXG4gICAgICAgICAgICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX0RJU0FCTEVEX0JHX0xJR0hUJ1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHN0eWxlTWFwW3N0eWxlVHlwZV0pIHx8IHt9XG4gICAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBUYWdXcmFwcGVyID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IHByZWZpeENsc1xufSkoXG4gICAgc3R5bGVkKCdzcGFuJykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBib3JkZXI6IGN1c3RvbUJvcmRlcixcbiAgICAgICAgICAgIGJvcmRlclR5cGU6IGN1c3RvbUJvcmRlclR5cGUsXG4gICAgICAgICAgICBzdHlsZVR5cGUsXG4gICAgICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfSxcbiAgICAgICAgICAgIGN1c3RvbVN0eWxlLFxuICAgICAgICAgICAgY2xvc2FibGVcbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIGNvbnN0IGNvbG9yTWFwID0gZ2V0Q29sb3JNYXAoc3R5bGVUeXBlLCBkaXNhYmxlZCk7XG5cbiAgICAgICAgY29uc3QgY29sb3IgPSBjdXN0b21TdHlsZT8uY29sb3IgfHwgRFRbY29sb3JNYXAuY29sb3JdO1xuICAgICAgICBjb25zdCBpY29uQ29sb3IgPSBjdXN0b21TdHlsZT8uY29sb3IgfHwgRFRbY29sb3JNYXAuaWNvbl07XG4gICAgICAgIGNvbnN0IGJnID0gY3VzdG9tU3R5bGU/LmJhY2tncm91bmQgfHwgRFRbY29sb3JNYXAuYmddO1xuXG4gICAgICAgIGZ1bmN0aW9uIGdldEJvcmRlcihjdXN0b21Cb3JkZXIpIHtcbiAgICAgICAgICAgIGlmIChjdXN0b21Cb3JkZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VzdG9tU3R5bGU/LmJvcmRlckNvbG9yIHx8IERUW2NvbG9yTWFwLmJvcmRlcl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gRFRbJ1RfQ09MT1JfTElORV9ERUZBVUxUX1RSQU5TUEFSRU5UJ107XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBib3JkZXIgPSBnZXRCb3JkZXIoY3VzdG9tQm9yZGVyKTtcbiAgICAgICAgY29uc3QgYm9yZGVyUmFkaXVzID1cbiAgICAgICAgICAgIGN1c3RvbUJvcmRlclR5cGUgPT09ICdjaXJjbGUnXG4gICAgICAgICAgICAgICAgPyBgY2FsYygke0RUWydUX1RBR19IRUlHSFRfU00nXX0gKiAke0RUWydUX0NPUk5FUl9DSVJDTEUnXS5yZXBsYWNlKCclJywgJycpIC8gMTAwfSlgXG4gICAgICAgICAgICAgICAgOiBEVFsnVF9UQUdfQk9SREVSX1JBRElVUyddO1xuXG4gICAgICAgIGNvbnN0IGNsb3NlSWNvbkJvcmRlclJhZGl1cyA9IGN1c3RvbUJvcmRlclR5cGUgPT09ICdjaXJjbGUnID8gJ2NhbGMoKDIwcHggLSAycHgpLzIpJyA6ICcwIDJweCAycHggMCc7XG5cbiAgICAgICAgY29uc3QgcGFkZGluZ1JpZ2h0ID0gY2xvc2FibGUgPyAwIDogJzhweCc7XG4gICAgICAgIGNvbnN0IGZvbnRDb2xvciA9IERUW2NvbG9yTWFwLmZvbnRDb2xvciB8fCBjb2xvck1hcC5jb2xvcl07XG4gICAgICAgIGNvbnN0IGRpdmlkZXIgPSBEVFtjb2xvck1hcC5kaXZpZGVyXTtcblxuICAgICAgICBjb25zdCBpY29uSG92ZXJCRyA9XG4gICAgICAgICAgICBjdXN0b21TdHlsZT8uY2xvc2VJY29uSG92ZXJCYWNrZ3JvdW5kIHx8XG4gICAgICAgICAgICAoc3R5bGVUeXBlLmluY2x1ZGVzKCctY3Jpc3BlZCcpID8gRFRbJ1RfQ09MT1JfQkdfVFJBTlNQQVJFTlQnXSA6IERUW2NvbG9yTWFwLmljb25Ib3ZlckJHXSk7XG4gICAgICAgIGNvbnN0IGNsb3NlSWNvbkNvbG9yID0gc3R5bGVUeXBlLmluY2x1ZGVzKCctY3Jpc3BlZCcpID8gRFRbJ1RfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUksnXSA6IGNvbG9yO1xuICAgICAgICBjb25zdCBjbG9zZUljb25Ib3ZlckNvbG9yID0gc3R5bGVUeXBlLmluY2x1ZGVzKCctY3Jpc3BlZCcpXG4gICAgICAgICAgICA/IERUWydUX0NPTE9SX1RFWFRfREVGQVVMVF9EQVJLJ11cbiAgICAgICAgICAgIDogRFQuVF9UQUdfSUNPTl9DTE9TRTtcbiAgICAgICAgY29uc3QgY2xvc2VJY29uT3BhY2l0eSA9IHN0eWxlVHlwZS5pbmNsdWRlcygnLWNyaXNwZWQnKSA/ICcwLjUnIDogRFRbJ1RfVEFHX0lDT05fT1BBQ0lUWV9ERUZBVUxUJ107XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgaGVpZ2h0OiAke0RUWydUX1RBR19IRUlHSFRfU00nXX07XG4gICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDhweDtcbiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6ICR7cGFkZGluZ1JpZ2h0fTtcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgIGNvbG9yOiAke2NvbG9yfTtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7Ymd9O1xuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHtib3JkZXJ9O1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogJHtib3JkZXJSYWRpdXN9O1xuXG4gICAgICAgICAgICAke1ByZWZpeEljb25XcmFwcGVyfSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDRweDtcbiAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogY2FsYygke0RUWydUX1RBR19IRUlHSFRfU00nXX0gLSAycHgpO1xuICAgICAgICAgICAgICAgIGZsZXgtc2hyaW5rOiAwO1xuICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgbWluLXdpZHRoOiAke0RUWydUX1RBR19JQ09OX1dJRFRIX1NNJ119O1xuICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICAgICAgIGNvbG9yOiAke2ljb25Db2xvcn07XG4gICAgICAgICAgICAgICAgaSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAke0NvbnRlbnRXcmFwcGVyfSB7XG4gICAgICAgICAgICAgICAgY29sb3I6ICR7Zm9udENvbG9yfTtcbiAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogY2FsYygke0RUWydUX1RBR19IRUlHSFRfU00nXX0gLSAycHgpO1xuICAgICAgICAgICAgICAgIGZsZXg6IDEgMSBhdXRvO1xuICAgICAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgICAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgICAgICAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICR7U3VmZml4SWNvbldyYXBwZXJ9IHtcbiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogNHB4O1xuICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiBjYWxjKCR7RFRbJ1RfVEFHX0hFSUdIVF9TTSddfSAtIDJweCk7XG4gICAgICAgICAgICAgICAgZmxleC1zaHJpbms6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAke0Nsb3NlSWNvbldyYXBwZXJ9IHtcbiAgICAgICAgICAgICAgICBmbG9hdDogcmlnaHQ7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICAgICAgIHdpZHRoOiAxOHB4O1xuICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiA0cHg7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBjYWxjKCR7RFRbJ1RfVEFHX0hFSUdIVF9TTSddfSAtIDJweCk7XG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IGNhbGMoJHtEVFsnVF9UQUdfSEVJR0hUX1NNJ119IC0gMnB4KTtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDA7XG4gICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6ICR7Y2xvc2VJY29uQm9yZGVyUmFkaXVzfTtcbiAgICAgICAgICAgICAgICAkeyFkaXNhYmxlZCAmJiAnY3Vyc29yOiBwb2ludGVyJ307XG4gICAgICAgICAgICAgICAgY29sb3I6ICR7Y2xvc2VJY29uQ29sb3J9O1xuICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQgMC4zcztcbiAgICAgICAgICAgICAgICBmbGV4LXNocmluazogMDtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAke2Nsb3NlSWNvbk9wYWNpdHl9O1xuICAgICAgICAgICAgICAgICR7Q2xvc2VJY29ufSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGw6ICR7Y2xvc2VJY29uQ29sb3J9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkeyFkaXNhYmxlZCAmJlxuICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAgICAgOmhvdmVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7aWNvbkhvdmVyQkd9O1xuICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogJHtEVFsnVF9UQUdfSUNPTl9PUEFDSVRZX0hPVkVSJ119O1xuICAgICAgICAgICAgICAgICAgICAgICAgJHtDbG9zZUljb259IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiAke2Nsb3NlSWNvbkhvdmVyQ29sb3J9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6OmFmdGVyIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke2RpdmlkZXJ9O1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgQ29udGVudFdyYXBwZXIgPSBzdHlsZWQoJ3NwYW4nKWBcbiAgICAvKiBlbXB0eSAqL1xuYDtcblxuZXhwb3J0IGNvbnN0IEljb25UYWcgPSBzdHlsZWQoSWNvbilgXG4gICAgLyogZW1wdHkgKi9cbmA7XG5leHBvcnQgY29uc3QgSWNvblRhZ1dyYXBwZXIgPSB3aXRoUHJvcHMoe1xuICAgIGNsYXNzTmFtZTogaWNvbkNsc1xufSkoXG4gICAgc3R5bGVkKCdzcGFuJykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzdHlsZVR5cGUgPSAnZGVmYXVsdCcsXG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH0sXG4gICAgICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgICAgIGN1c3RvbVN0eWxlLFxuICAgICAgICAgICAgYm9yZGVyVHlwZTogY3VzdG9tQm9yZGVyVHlwZSxcbiAgICAgICAgICAgIGljb25TaXplOiBzaXplLFxuICAgICAgICAgICAgYm9yZGVyOiBjdXN0b21Cb3JkZXJcbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIGZ1bmN0aW9uIGdldEJvcmRlcihjdXN0b21Cb3JkZXIpIHtcbiAgICAgICAgICAgIGlmIChjdXN0b21Cb3JkZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VzdG9tU3R5bGU/LmJvcmRlckNvbG9yIHx8IERUW2NvbG9yTWFwLmJvcmRlcl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gRFRbJ1RfQ09MT1JfTElORV9ERUZBVUxUX1RSQU5TUEFSRU5UJ107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaWNvblNpemUgPSBEVFtgVF9UQUdfSUNPTl9TSVpFXyR7KHNpemUgfHwgJ3NtJykudG9Mb2NhbGVVcHBlckNhc2UoKX1gXTtcblxuICAgICAgICBjb25zdCBjb2xvck1hcCA9IGdldENvbG9yTWFwKHN0eWxlVHlwZSwgZGlzYWJsZWQpO1xuICAgICAgICBjb25zdCBjb2xvciA9IGN1c3RvbVN0eWxlPy5jb2xvciB8fCBEVFtjb2xvck1hcC5jb2xvcl07XG4gICAgICAgIGNvbnN0IGJnID0gY3VzdG9tU3R5bGU/LmJhY2tncm91bmQgfHwgRFRbY29sb3JNYXAuYmddO1xuXG4gICAgICAgIGNvbnN0IGJvcmRlciA9IGdldEJvcmRlcihjdXN0b21Cb3JkZXIpO1xuICAgICAgICBjb25zdCBib3JkZXJSYWRpdXMgPVxuICAgICAgICAgICAgY3VzdG9tQm9yZGVyVHlwZSA9PT0gJ2NpcmNsZSdcbiAgICAgICAgICAgICAgICA/IGBjYWxjKCR7RFRbJ1RfVEFHX0hFSUdIVF9TTSddfSAqICR7RFRbJ1RfQ09STkVSX0NJUkNMRSddLnJlcGxhY2UoJyUnLCAnJykgLyAxMDB9KWBcbiAgICAgICAgICAgICAgICA6IERUWydUX1RBR19CT1JERVJfUkFESVVTJ107XG4gICAgICAgIGNvbnN0IGRpdmlkZXIgPSBEVFtjb2xvck1hcC5kaXZpZGVyXTtcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgIGhlaWdodDogJHtEVFsnVF9UQUdfSEVJR0hUX1NNJ119O1xuICAgICAgICAgICAgd2lkdGg6IDIwcHg7XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogY2FsYygke0RUWydUX1RBR19IRUlHSFRfU00nXX0gLSAycHgpO1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogJHtib3JkZXJSYWRpdXN9O1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHtib3JkZXJ9O1xuICAgICAgICAgICAgY29sb3I6ICR7Y29sb3J9O1xuICAgICAgICAgICAgYmFja2dyb3VuZDogJHtiZ307XG4gICAgICAgICAgICBmb250LXNpemU6ICR7aWNvblNpemV9O1xuICAgICAgICAgICAgOjphZnRlciB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgIHJpZ2h0OiAtMXB4O1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7ZGl2aWRlcn07XG4gICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgICAgICBib3JkZXI6IDAgc29saWQgJHtiZ307XG4gICAgICAgICAgICAgICAgYm9yZGVyLXdpZHRoOiA1cHggMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IFRhZ0dyb3VwV3JhcHBlciA9IHdpdGhQcm9wcygpKFxuICAgIHN0eWxlZCgnZGl2JykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7IGNvbXBhY3QgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjb21wYWN0XG4gICAgICAgICAgICA/IGNzc2BcbiAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IC00cHg7XG4gICAgICAgICAgICAgICAgICAuJHtwcmVmaXhDbHN9LCAuJHtpY29uQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWxlZnQtc3R5bGU6IG5vbmU7XG4gICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJpZ2h0LXN0eWxlOiBub25lO1xuICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA0cHg7XG4gICAgICAgICAgICAgICAgICAgICAgOmZpcnN0LW9mLXR5cGUge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItbGVmdC1zdHlsZTogc29saWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDJweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMnB4O1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICA6YWZ0ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnICc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogOHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMXB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDVweCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIDpsYXN0LW9mLXR5cGUge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmlnaHQtc3R5bGU6IHNvbGlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMnB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMnB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICA6OmFmdGVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IG5vbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAuJHtpY29uQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgOmFmdGVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IDUwJTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgLiR7cHJlZml4Q2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA0cHg7XG4gICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMHB4O1xuICAgICAgICAgICAgICAgICAgICAgIDpmaXJzdC1vZi10eXBlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA4cHg7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICR7Q29udGVudFdyYXBwZXJ9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIDpsYXN0LW9mLXR5cGUge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAke0NvbnRlbnRXcmFwcGVyfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDhweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgOiBjc3NgXG4gICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAtNHB4O1xuICAgICAgICAgICAgICAgICAgLiR7cHJlZml4Q2xzfSwgLiR7aWNvbkNsc30ge1xuICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogNHB4O1xuICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDRweDtcbiAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBgO1xuICAgIH0pXG4pO1xuZXhwb3J0IGNvbnN0IFNXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IGljb25DbHNcbn0pKFxuICAgIHN0eWxlZChDb21iaW5lKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHsgZXhwb3NlQ291bnQgfSA9IHByb3BzO1xuICAgICAgICByZXR1cm4gZXhwb3NlQ291bnQgPT09IHZvaWQgMFxuICAgICAgICAgICAgPyAnJ1xuICAgICAgICAgICAgOiBjc3NgXG4gICAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICAgICAgICAgICAgLiR7cHJlZml4Q2xzfSwgLiR7aWNvbkNsc30ge1xuICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMHB4O1xuICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDBweDtcbiAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgLiR7aWNvbkNsc30ge1xuICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDBweDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYDtcbiAgICB9KVxuKTtcbmV4cG9ydCBjb25zdCBUYWdNZW51V2FwcGVyID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IGljb25DbHNcbn0pKFxuICAgIHN0eWxlZCgnZGl2JykocHJvcHMgPT4ge1xuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgLiR7bWVudUNsc30ge1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDhweCAwIDRweCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLiR7cHJlZml4Q2xzfSwuJHtpY29uQ2xzfSB7XG4gICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogNHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuZXhwb3J0IGNvbnN0IFRhZ1BvcG92ZXJXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IGljb25DbHNcbn0pKFxuICAgIHN0eWxlZCgnZGl2JykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgcGFkZGluZzogMCA4cHg7XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogJHtEVFsnVF9UQUdfSEVJR0hUX1NNJ119O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgVGFnTW9yZVdhcHBlciA9IHdpdGhQcm9wcyh7XG4gICAgY2xhc3NOYW1lOiBpY29uQ2xzXG59KShcbiAgICBzdHlsZWQoJ3NwYW4nKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIC4ke3ByZWZpeENsc30ge1xuICAgICAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAke0RUWydUX1RBR19IRUlHSFRfU00nXX07XG4gICAgICAgICAgICAgICAgcGFkZGluZzogMCA2cHg7XG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IGNhbGMoJHtEVFsnVF9UQUdfSEVJR0hUX1NNJ119IC0gMnB4KTtcbiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6ICR7RFRbJ1RfVEFHX0JPUkRFUl9SQURJVVMnXX07XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4ICR7RFRbJ1RfTElORV9TVFlMRV9EQVNIRUQnXX0gJHtEVFsnVF9QT1BPVkVSX0NPTE9SX0xJTkVfTElHSFQnXX07XG4gICAgICAgICAgICAgICAgY29sb3I6ICR7RFRbJ1RfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUksnXX07XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogbm9uZTtcbiAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG4iXX0= */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.TagPopoverWrap = TagPopoverWrap;
var TagMoreWapper = (0, _withProps.default)({
  className: iconCls
})(( /*#__PURE__*/0, _styledBase.default)('span', {
  target: "e19zfbcx14",
  label: "TagMoreWapper"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var DT = props.theme.designTokens;
  return /*#__PURE__*/(0, _core.css)(".", prefixCls, "{box-sizing:border-box;height:", DT['T_TAG_HEIGHT_SM'], ";padding:0 6px;line-height:calc(", DT['T_TAG_HEIGHT_SM'], " - 2px);text-align:center;display:inline-block;border-radius:", DT['T_TAG_BORDER_RADIUS'], ";position:relative;border:1px ", DT['T_LINE_STYLE_DASHED'], " ", DT['T_POPOVER_COLOR_LINE_LIGHT'], ";color:", DT['T_COLOR_TEXT_DEFAULT_DARK'], ";background-color:none;cursor:pointer;};label:TagMoreWapper;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RhZy9zdHlsZS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEyakJrQiIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9UYWcvc3R5bGUvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBDb21iaW5lIGZyb20gJ3NyYy9jb21wb25lbnRzL0NvbWJpbmUnO1xuaW1wb3J0IGNvbmZpZyBmcm9tICdzcmMvY29uZmlnJztcbmltcG9ydCBTdmdJY29uIGZyb20gJ3NyYy9jb21wb25lbnRzL1N2Z0ljb24nO1xuaW1wb3J0IEljb24gZnJvbSAnc3JjL2NvbXBvbmVudHMvSWNvbic7XG5pbXBvcnQgd2l0aFByb3BzIGZyb20gJ3NyYy91dGlscy93aXRoUHJvcHMnO1xuXG5jb25zdCB7IHByZWZpeENsczogX3ByZWZpeENscyB9ID0gY29uZmlnO1xuZXhwb3J0IGNvbnN0IHByZWZpeENscyA9IF9wcmVmaXhDbHMgKyAnLXRhZyc7XG5leHBvcnQgY29uc3QgbWVudUNscyA9IF9wcmVmaXhDbHMgKyAnLW1lbnUnO1xuZXhwb3J0IGNvbnN0IGljb25DbHMgPSBfcHJlZml4Q2xzICsgJy10YWctaWNvbic7XG5cbmV4cG9ydCBjb25zdCBzdHlsZU1hcCA9IHtcbiAgICBncmF5OiB7XG4gICAgICAgIGNvbG9yOiAnVF9UQUdfQ09MT1JfR1JBWV9URVhUJyxcbiAgICAgICAgaWNvbjogJ1RfVEFHX0NPTE9SX0dSQVlfSUNPTicsXG4gICAgICAgIGJvcmRlcjogJ1RfVEFHX0NPTE9SX0dSQVlfQk9SREVSJyxcbiAgICAgICAgZGl2aWRlcjogJ1RfVEFHX0NPTE9SX0dSQVlfRElWSURFUicsXG4gICAgICAgIGJnOiAnVF9UQUdfQ09MT1JfR1JBWV9CR19MSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9UQUdfQ09MT1JfR1JBWV9CR19EQVJLJ1xuICAgIH0sXG4gICAgZ3JlZW46IHtcbiAgICAgICAgY29sb3I6ICdUX1RBR19DT0xPUl9HUkVFTl9URVhUJyxcbiAgICAgICAgaWNvbjogJ1RfVEFHX0NPTE9SX0dSRUVOX0lDT04nLFxuICAgICAgICBib3JkZXI6ICdUX1RBR19DT0xPUl9HUkVFTl9CT1JERVInLFxuICAgICAgICBkaXZpZGVyOiAnVF9UQUdfQ09MT1JfR1JFRU5fRElWSURFUicsXG4gICAgICAgIGJnOiAnVF9UQUdfQ09MT1JfR1JFRU5fQkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX0dSRUVOX0JHX0RBUksnXG4gICAgfSxcbiAgICB5ZWxsb3c6IHtcbiAgICAgICAgY29sb3I6ICdUX1RBR19DT0xPUl9ZRUxMT1dfVEVYVCcsXG4gICAgICAgIGljb246ICdUX1RBR19DT0xPUl9ZRUxMT1dfSUNPTicsXG4gICAgICAgIGJvcmRlcjogJ1RfVEFHX0NPTE9SX1lFTExPV19CT1JERVInLFxuICAgICAgICBkaXZpZGVyOiAnVF9UQUdfQ09MT1JfWUVMTE9XX0RJVklERVInLFxuICAgICAgICBiZzogJ1RfVEFHX0NPTE9SX1lFTExPV19CR19MSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9UQUdfQ09MT1JfWUVMTE9XX0JHX0RBUksnXG4gICAgfSxcbiAgICByZWQ6IHtcbiAgICAgICAgY29sb3I6ICdUX1RBR19DT0xPUl9SRURfVEVYVCcsXG4gICAgICAgIGljb246ICdUX1RBR19DT0xPUl9SRURfSUNPTicsXG4gICAgICAgIGJvcmRlcjogJ1RfVEFHX0NPTE9SX1JFRF9CT1JERVInLFxuICAgICAgICBkaXZpZGVyOiAnVF9UQUdfQ09MT1JfUkVEX0RJVklERVInLFxuICAgICAgICBiZzogJ1RfVEFHX0NPTE9SX1JFRF9CR19MSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9UQUdfQ09MT1JfUkVEX0JHX0RBUksnXG4gICAgfSxcbiAgICBwcmltYXJ5OiB7XG4gICAgICAgIGNvbG9yOiAnVF9UQUdfQ09MT1JfUFJJTUFSWV9URVhUJyxcbiAgICAgICAgaWNvbjogJ1RfVEFHX0NPTE9SX1BSSU1BUllfSUNPTicsXG4gICAgICAgIGJvcmRlcjogJ1RfVEFHX0NPTE9SX1BSSU1BUllfQk9SREVSJyxcbiAgICAgICAgZGl2aWRlcjogJ1RfVEFHX0NPTE9SX1BSSU1BUllfRElWSURFUicsXG4gICAgICAgIGJnOiAnVF9UQUdfQ09MT1JfUFJJTUFSWV9CR19MSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9UQUdfQ09MT1JfUFJJTUFSWV9CR19EQVJLJ1xuICAgIH0sXG4gICAgcHVycGxlOiB7XG4gICAgICAgIGNvbG9yOiAnVF9UQUdfQ09MT1JfUFVSUExFX1RFWFQnLFxuICAgICAgICBpY29uOiAnVF9UQUdfQ09MT1JfUFVSUExFX0lDT04nLFxuICAgICAgICBib3JkZXI6ICdUX1RBR19DT0xPUl9QVVJQTEVfQk9SREVSJyxcbiAgICAgICAgZGl2aWRlcjogJ1RfVEFHX0NPTE9SX1BVUlBMRV9ESVZJREVSJyxcbiAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9QVVJQTEVfQkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX1BVUlBMRV9CR19EQVJLJ1xuICAgIH0sXG4gICAgbGlnaHRibHVlOiB7XG4gICAgICAgIGNvbG9yOiAnVF9UQUdfQ09MT1JfTElHSFRCTFVFX1RFWFQnLFxuICAgICAgICBpY29uOiAnVF9UQUdfQ09MT1JfTElHSFRCTFVFX0lDT04nLFxuICAgICAgICBib3JkZXI6ICdUX1RBR19DT0xPUl9MSUdIVEJMVUVfQk9SREVSJyxcbiAgICAgICAgZGl2aWRlcjogJ1RfVEFHX0NPTE9SX0xJR0hUQkxVRV9ESVZJREVSJyxcbiAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9MSUdIVEJMVUVfQkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX0xJR0hUQkxVRV9CR19EQVJLJ1xuICAgIH0sXG4gICAgYmx1ZToge1xuICAgICAgICBjb2xvcjogJ1RfVEFHX0NPTE9SX0JMVUVfVEVYVCcsXG4gICAgICAgIGljb246ICdUX1RBR19DT0xPUl9CTFVFX0lDT04nLFxuICAgICAgICBib3JkZXI6ICdUX1RBR19DT0xPUl9CTFVFX0JPUkRFUicsXG4gICAgICAgIGRpdmlkZXI6ICdUX1RBR19DT0xPUl9CTFVFX0RJVklERVInLFxuICAgICAgICBiZzogJ1RfVEFHX0NPTE9SX0JMVUVfQkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX0JMVUVfQkdfREFSSydcbiAgICB9LFxuICAgIG9yYW5nZToge1xuICAgICAgICBjb2xvcjogJ1RfVEFHX0NPTE9SX09SQU5HRV9URVhUJyxcbiAgICAgICAgaWNvbjogJ1RfVEFHX0NPTE9SX09SQU5HRV9JQ09OJyxcbiAgICAgICAgYm9yZGVyOiAnVF9UQUdfQ09MT1JfT1JBTkdFX0JPUkRFUicsXG4gICAgICAgIGRpdmlkZXI6ICdUX1RBR19DT0xPUl9PUkFOR19ESVZJREVSJyxcbiAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9PUkFOR0VfQkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX09SQU5HRV9CR19EQVJLJ1xuICAgIH0sXG4gICAgY3lhbjoge1xuICAgICAgICBjb2xvcjogJ1RfVEFHX0NPTE9SX0NZQU5fRVhUJyxcbiAgICAgICAgaWNvbjogJ1RfVEFHX0NPTE9SX0NZQU5fSUNPTicsXG4gICAgICAgIGJvcmRlcjogJ1RfVEFHX0NPTE9SX0NZQU5fQk9SREVSJyxcbiAgICAgICAgZGl2aWRlcjogJ1RfVEFHX0NPTE9SX0NZQU5fRElWSURFUicsXG4gICAgICAgIGJnOiAnVF9UQUdfQ09MT1JfQ1lBTl9CR19MSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9UQUdfQ09MT1JfQ1lBTl9CR19EQVJLJ1xuICAgIH1cbn07XG5cbltcbiAgICBbJ2RlZmF1bHQnLCAnZ3JheSddLFxuICAgIFsnc3VjY2VzcycsICdncmVlbiddLFxuICAgIFsnd2FybmluZycsICd5ZWxsb3cnXSxcbiAgICBbJ2Vycm9yJywgJ3JlZCddXG5dLm1hcCgoW3N0eWxlVHlwZSwgY29sb3JdKSA9PiB7XG4gICAgc3R5bGVNYXBbc3R5bGVUeXBlXSA9IHN0eWxlTWFwW2NvbG9yXTtcbn0pO1xuXG5jb25zdCBmaWxsZWRTdHlsZU1hcCA9IHtcbiAgICBwdXJwbGU6IHtcbiAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9QVVJQTEVfRklMTEJHX0xJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX1RBR19DT0xPUl9QVVJQTEVfRklMTEJHX0RBUksnXG4gICAgfSxcbiAgICBsaWdodGJsdWU6IHtcbiAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9MSUdIVEJMVUVfRklMTEJHX0xJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX1RBR19DT0xPUl9MSUdIVEJMVUVfRklMTEJHX0RBUksnXG4gICAgfSxcbiAgICBibHVlOiB7XG4gICAgICAgIGJnOiAnVF9UQUdfQ09MT1JfQkxVRV9GSUxMQkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX0JMVUVfRklMTEJHX0RBUksnXG4gICAgfSxcbiAgICBvcmFuZ2U6IHtcbiAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9PUkFOR0VfRklMTEJHX0xJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX1RBR19DT0xPUl9PUkFOR0VfRklMTEJHX0RBUksnXG4gICAgfSxcbiAgICB5ZWxsb3c6IHtcbiAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9ZRUxMT1dfRklMTEJHX0xJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX1RBR19DT0xPUl9ZRUxMT1dfRklMTEJHX0RBUksnXG4gICAgfSxcbiAgICBjeWFuOiB7XG4gICAgICAgIGJnOiAnVF9UQUdfQ09MT1JfQ1lBTl9GSUxMQkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX0NZQU5fRklMTEJHX0RBUksnXG4gICAgfSxcbiAgICByZWQ6IHtcbiAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9SRURfRklMTEJHX0xJR0hUJyxcbiAgICAgICAgaWNvbkhvdmVyQkc6ICdUX1RBR19DT0xPUl9SRURfRklMTEJHX0RBUksnXG4gICAgfVxufTtcblxuT2JqZWN0LmtleXMoZmlsbGVkU3R5bGVNYXApLm1hcChrZXkgPT4ge1xuICAgIGNvbnN0IG1hcCA9IGZpbGxlZFN0eWxlTWFwW2tleV07XG4gICAgc3R5bGVNYXBba2V5ICsgJy1maWxsZWQnXSA9IHtcbiAgICAgICAgLi4ubWFwLFxuICAgICAgICBib3JkZXI6IG1hcC5iZyxcbiAgICAgICAgZGl2aWRlcjogbWFwLmJnLFxuICAgICAgICBjb2xvcjogJ1RfQ09MT1JfVEVYVF9TWVNURU1fV0hJVEUnXG4gICAgfTtcbn0pO1xuXG5jb25zdCBzdGF0ZVN0eWxlTWFwID0ge1xuICAgIGdyZWVuOiB7XG4gICAgICAgIGNvbG9yOiAnVF9UQUdfQ09MT1JfR1JFRU5fVEVYVCcsXG4gICAgICAgIGljb246ICdUX1RBR19DT0xPUl9HUkVFTl9JQ09OJyxcbiAgICAgICAgZGl2aWRlcjogJ1RfVEFHX0NPTE9SX0dSRUVOX0RJVklERVInLFxuICAgICAgICBiZzogJ1RfQ09MT1JfQkdfREVGQVVMVF9CUklHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfQ09MT1JfQkdfREVGQVVMVF9CUklHSFQnLFxuICAgICAgICBib3JkZXI6ICdUX0NPTE9SX0xJTkVfTk9USUNFX0xJR0hUJyxcbiAgICAgICAgZm9udENvbG9yOiAnVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSSydcbiAgICB9LFxuICAgIGJsdWU6IHtcbiAgICAgICAgY29sb3I6ICdUX1RBR19DT0xPUl9CTFVFX1RFWFQnLFxuICAgICAgICBpY29uOiAnVF9UQUdfQ09MT1JfQkxVRV9JQ09OJyxcbiAgICAgICAgZGl2aWRlcjogJ1RfVEFHX0NPTE9SX0JMVUVfRElWSURFUicsXG4gICAgICAgIGJnOiAnVF9DT0xPUl9CR19ERUZBVUxUX0JSSUdIVCcsXG4gICAgICAgIGljb25Ib3ZlckJHOiAnVF9DT0xPUl9CR19ERUZBVUxUX0JSSUdIVCcsXG4gICAgICAgIGJvcmRlcjogJ1RfQ09MT1JfTElORV9OT1RJQ0VfTElHSFQnLFxuICAgICAgICBmb250Q29sb3I6ICdUX0NPTE9SX1RFWFRfREVGQVVMVF9EQVJLJ1xuICAgIH0sXG4gICAgeWVsbG93OiB7XG4gICAgICAgIGNvbG9yOiAnVF9UQUdfQ09MT1JfWUVMTE9XX1RFWFQnLFxuICAgICAgICBpY29uOiAnVF9UQUdfQ09MT1JfWUVMTE9XX0lDT04nLFxuICAgICAgICBkaXZpZGVyOiAnVF9UQUdfQ09MT1JfWUVMTE9XX0RJVklERVInLFxuICAgICAgICBiZzogJ1RfQ09MT1JfQkdfREVGQVVMVF9CUklHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfQ09MT1JfQkdfREVGQVVMVF9CUklHSFQnLFxuICAgICAgICBib3JkZXI6ICdUX0NPTE9SX0xJTkVfTk9USUNFX0xJR0hUJyxcbiAgICAgICAgZm9udENvbG9yOiAnVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSSydcbiAgICB9LFxuICAgIHJlZDoge1xuICAgICAgICBjb2xvcjogJ1RfVEFHX0NPTE9SX1JFRF9URVhUJyxcbiAgICAgICAgaWNvbjogJ1RfVEFHX0NPTE9SX1JFRF9JQ09OJyxcbiAgICAgICAgZGl2aWRlcjogJ1RfVEFHX0NPTE9SX1JFRF9ESVZJREVSJyxcbiAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9SRURfQkdfTElHSFQnLFxuICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX1JFRF9CR19EQVJLJyxcbiAgICAgICAgYm9yZGVyOiAnVF9UQUdfQ09MT1JfUkVEX0RJVklERVInLFxuICAgICAgICBmb250Q29sb3I6ICdUX0NPTE9SX1RFWFRfREVGQVVMVF9EQVJLJ1xuICAgIH1cbn07XG5cbk9iamVjdC5rZXlzKHN0YXRlU3R5bGVNYXApLm1hcChrZXkgPT4ge1xuICAgIGNvbnN0IG1hcCA9IHN0YXRlU3R5bGVNYXBba2V5XTtcbiAgICBzdHlsZU1hcFtrZXkgKyAnLWNyaXNwZWQnXSA9IHtcbiAgICAgICAgLi4ubWFwXG4gICAgfTtcbn0pO1xuXG5leHBvcnQgY29uc3QgQ2xvc2VJY29uID0gc3R5bGVkKFN2Z0ljb24pYFxuICAgIC8qIGVtcHR5ICovXG5gO1xuXG5leHBvcnQgY29uc3QgQ2xvc2VJY29uV3JhcHBlciA9IHN0eWxlZCgnc3BhbicpYFxuICAgIC8qIGVtcHR5ICovXG5gO1xuXG5leHBvcnQgY29uc3QgUHJlZml4SWNvbiA9IHdpdGhQcm9wcyh7XG4gICAgY2xhc3NOYW1lOiBpY29uQ2xzXG59KShcbiAgICBzdHlsZWQoSWNvbikocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzaXplLFxuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcbiAgICAgICAgY29uc3QgaWNvblNpemUgPSBEVFtgVF9UQUdfSUNPTl9TSVpFXyR7KHNpemUgfHwgJ3NtJykudG9Mb2NhbGVVcHBlckNhc2UoKX1gXTtcbiAgICAgICAgcmV0dXJuIGBcbiAgICAgICAgIGZvbnQtc2l6ZToke2ljb25TaXplfTtcbiAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgU3ZnSWNvbldyYXBwZXIgPSB3aXRoUHJvcHMoe1xuICAgIGNsYXNzTmFtZTogaWNvbkNsc1xufSkoXG4gICAgc3R5bGVkKCdpJykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzaXplLFxuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcbiAgICAgICAgY29uc3QgaWNvblNpemUgPSBEVFtgVF9UQUdfSUNPTl9TSVpFXyR7KHNpemUgfHwgJ3NtJykudG9Mb2NhbGVVcHBlckNhc2UoKX1gXTtcbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIHN2ZyB7XG4gICAgICAgICAgICAgICAgd2lkdGg6ICR7aWNvblNpemV9O1xuICAgICAgICAgICAgICAgIGhlaWdodDogJHtpY29uU2l6ZX07XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5leHBvcnQgY29uc3QgUHJlZml4SWNvbldyYXBwZXIgPSBzdHlsZWQoJ3NwYW4nKWBcbiAgICAvKiBlbXB0eSAqL1xuYDtcbmV4cG9ydCBjb25zdCBTdWZmaXhJY29uV3JhcHBlciA9IHN0eWxlZCgnc3BhbicpYFxuICAgIC8qIGVtcHR5ICovXG5gO1xuY29uc3QgZ2V0Q29sb3JNYXAgPSAoc3R5bGVUeXBlLCBkaXNhYmxlZCkgPT4ge1xuICAgIGlmICgvLWZpbGwkLy50ZXN0KHN0eWxlVHlwZSkpIHtcbiAgICAgICAgc3R5bGVUeXBlICs9ICdlZCc7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgKGRpc2FibGVkXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAnVF9UQUdfQ09MT1JfRElTQUJMRURfVEVYVCcsXG4gICAgICAgICAgICAgICAgICBib3JkZXI6ICdUX1RBR19DT0xPUl9ESVNBQkxFRF9CT1JERVInLFxuICAgICAgICAgICAgICAgICAgZGl2aWRlcjogJ1RfVEFHX0NPTE9SX0RJU0FCTEVEX0RJVklERVInLFxuICAgICAgICAgICAgICAgICAgYmc6ICdUX1RBR19DT0xPUl9ESVNBQkxFRF9CR19MSUdIVCcsXG4gICAgICAgICAgICAgICAgICBpY29uSG92ZXJCRzogJ1RfVEFHX0NPTE9SX0RJU0FCTEVEX0JHX0xJR0hUJ1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHN0eWxlTWFwW3N0eWxlVHlwZV0pIHx8IHt9XG4gICAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBUYWdXcmFwcGVyID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IHByZWZpeENsc1xufSkoXG4gICAgc3R5bGVkKCdzcGFuJykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBib3JkZXI6IGN1c3RvbUJvcmRlcixcbiAgICAgICAgICAgIGJvcmRlclR5cGU6IGN1c3RvbUJvcmRlclR5cGUsXG4gICAgICAgICAgICBzdHlsZVR5cGUsXG4gICAgICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfSxcbiAgICAgICAgICAgIGN1c3RvbVN0eWxlLFxuICAgICAgICAgICAgY2xvc2FibGVcbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIGNvbnN0IGNvbG9yTWFwID0gZ2V0Q29sb3JNYXAoc3R5bGVUeXBlLCBkaXNhYmxlZCk7XG5cbiAgICAgICAgY29uc3QgY29sb3IgPSBjdXN0b21TdHlsZT8uY29sb3IgfHwgRFRbY29sb3JNYXAuY29sb3JdO1xuICAgICAgICBjb25zdCBpY29uQ29sb3IgPSBjdXN0b21TdHlsZT8uY29sb3IgfHwgRFRbY29sb3JNYXAuaWNvbl07XG4gICAgICAgIGNvbnN0IGJnID0gY3VzdG9tU3R5bGU/LmJhY2tncm91bmQgfHwgRFRbY29sb3JNYXAuYmddO1xuXG4gICAgICAgIGZ1bmN0aW9uIGdldEJvcmRlcihjdXN0b21Cb3JkZXIpIHtcbiAgICAgICAgICAgIGlmIChjdXN0b21Cb3JkZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VzdG9tU3R5bGU/LmJvcmRlckNvbG9yIHx8IERUW2NvbG9yTWFwLmJvcmRlcl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gRFRbJ1RfQ09MT1JfTElORV9ERUZBVUxUX1RSQU5TUEFSRU5UJ107XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBib3JkZXIgPSBnZXRCb3JkZXIoY3VzdG9tQm9yZGVyKTtcbiAgICAgICAgY29uc3QgYm9yZGVyUmFkaXVzID1cbiAgICAgICAgICAgIGN1c3RvbUJvcmRlclR5cGUgPT09ICdjaXJjbGUnXG4gICAgICAgICAgICAgICAgPyBgY2FsYygke0RUWydUX1RBR19IRUlHSFRfU00nXX0gKiAke0RUWydUX0NPUk5FUl9DSVJDTEUnXS5yZXBsYWNlKCclJywgJycpIC8gMTAwfSlgXG4gICAgICAgICAgICAgICAgOiBEVFsnVF9UQUdfQk9SREVSX1JBRElVUyddO1xuXG4gICAgICAgIGNvbnN0IGNsb3NlSWNvbkJvcmRlclJhZGl1cyA9IGN1c3RvbUJvcmRlclR5cGUgPT09ICdjaXJjbGUnID8gJ2NhbGMoKDIwcHggLSAycHgpLzIpJyA6ICcwIDJweCAycHggMCc7XG5cbiAgICAgICAgY29uc3QgcGFkZGluZ1JpZ2h0ID0gY2xvc2FibGUgPyAwIDogJzhweCc7XG4gICAgICAgIGNvbnN0IGZvbnRDb2xvciA9IERUW2NvbG9yTWFwLmZvbnRDb2xvciB8fCBjb2xvck1hcC5jb2xvcl07XG4gICAgICAgIGNvbnN0IGRpdmlkZXIgPSBEVFtjb2xvck1hcC5kaXZpZGVyXTtcblxuICAgICAgICBjb25zdCBpY29uSG92ZXJCRyA9XG4gICAgICAgICAgICBjdXN0b21TdHlsZT8uY2xvc2VJY29uSG92ZXJCYWNrZ3JvdW5kIHx8XG4gICAgICAgICAgICAoc3R5bGVUeXBlLmluY2x1ZGVzKCctY3Jpc3BlZCcpID8gRFRbJ1RfQ09MT1JfQkdfVFJBTlNQQVJFTlQnXSA6IERUW2NvbG9yTWFwLmljb25Ib3ZlckJHXSk7XG4gICAgICAgIGNvbnN0IGNsb3NlSWNvbkNvbG9yID0gc3R5bGVUeXBlLmluY2x1ZGVzKCctY3Jpc3BlZCcpID8gRFRbJ1RfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUksnXSA6IGNvbG9yO1xuICAgICAgICBjb25zdCBjbG9zZUljb25Ib3ZlckNvbG9yID0gc3R5bGVUeXBlLmluY2x1ZGVzKCctY3Jpc3BlZCcpXG4gICAgICAgICAgICA/IERUWydUX0NPTE9SX1RFWFRfREVGQVVMVF9EQVJLJ11cbiAgICAgICAgICAgIDogRFQuVF9UQUdfSUNPTl9DTE9TRTtcbiAgICAgICAgY29uc3QgY2xvc2VJY29uT3BhY2l0eSA9IHN0eWxlVHlwZS5pbmNsdWRlcygnLWNyaXNwZWQnKSA/ICcwLjUnIDogRFRbJ1RfVEFHX0lDT05fT1BBQ0lUWV9ERUZBVUxUJ107XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgaGVpZ2h0OiAke0RUWydUX1RBR19IRUlHSFRfU00nXX07XG4gICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDhweDtcbiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6ICR7cGFkZGluZ1JpZ2h0fTtcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgIGNvbG9yOiAke2NvbG9yfTtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7Ymd9O1xuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHtib3JkZXJ9O1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogJHtib3JkZXJSYWRpdXN9O1xuXG4gICAgICAgICAgICAke1ByZWZpeEljb25XcmFwcGVyfSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDRweDtcbiAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogY2FsYygke0RUWydUX1RBR19IRUlHSFRfU00nXX0gLSAycHgpO1xuICAgICAgICAgICAgICAgIGZsZXgtc2hyaW5rOiAwO1xuICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgbWluLXdpZHRoOiAke0RUWydUX1RBR19JQ09OX1dJRFRIX1NNJ119O1xuICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICAgICAgIGNvbG9yOiAke2ljb25Db2xvcn07XG4gICAgICAgICAgICAgICAgaSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAke0NvbnRlbnRXcmFwcGVyfSB7XG4gICAgICAgICAgICAgICAgY29sb3I6ICR7Zm9udENvbG9yfTtcbiAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogY2FsYygke0RUWydUX1RBR19IRUlHSFRfU00nXX0gLSAycHgpO1xuICAgICAgICAgICAgICAgIGZsZXg6IDEgMSBhdXRvO1xuICAgICAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgICAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgICAgICAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICR7U3VmZml4SWNvbldyYXBwZXJ9IHtcbiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogNHB4O1xuICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiBjYWxjKCR7RFRbJ1RfVEFHX0hFSUdIVF9TTSddfSAtIDJweCk7XG4gICAgICAgICAgICAgICAgZmxleC1zaHJpbms6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAke0Nsb3NlSWNvbldyYXBwZXJ9IHtcbiAgICAgICAgICAgICAgICBmbG9hdDogcmlnaHQ7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgICAgICAgIHdpZHRoOiAxOHB4O1xuICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiA0cHg7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBjYWxjKCR7RFRbJ1RfVEFHX0hFSUdIVF9TTSddfSAtIDJweCk7XG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IGNhbGMoJHtEVFsnVF9UQUdfSEVJR0hUX1NNJ119IC0gMnB4KTtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDA7XG4gICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6ICR7Y2xvc2VJY29uQm9yZGVyUmFkaXVzfTtcbiAgICAgICAgICAgICAgICAkeyFkaXNhYmxlZCAmJiAnY3Vyc29yOiBwb2ludGVyJ307XG4gICAgICAgICAgICAgICAgY29sb3I6ICR7Y2xvc2VJY29uQ29sb3J9O1xuICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQgMC4zcztcbiAgICAgICAgICAgICAgICBmbGV4LXNocmluazogMDtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAke2Nsb3NlSWNvbk9wYWNpdHl9O1xuICAgICAgICAgICAgICAgICR7Q2xvc2VJY29ufSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGw6ICR7Y2xvc2VJY29uQ29sb3J9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkeyFkaXNhYmxlZCAmJlxuICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAgICAgOmhvdmVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7aWNvbkhvdmVyQkd9O1xuICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogJHtEVFsnVF9UQUdfSUNPTl9PUEFDSVRZX0hPVkVSJ119O1xuICAgICAgICAgICAgICAgICAgICAgICAgJHtDbG9zZUljb259IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiAke2Nsb3NlSWNvbkhvdmVyQ29sb3J9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6OmFmdGVyIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke2RpdmlkZXJ9O1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgQ29udGVudFdyYXBwZXIgPSBzdHlsZWQoJ3NwYW4nKWBcbiAgICAvKiBlbXB0eSAqL1xuYDtcblxuZXhwb3J0IGNvbnN0IEljb25UYWcgPSBzdHlsZWQoSWNvbilgXG4gICAgLyogZW1wdHkgKi9cbmA7XG5leHBvcnQgY29uc3QgSWNvblRhZ1dyYXBwZXIgPSB3aXRoUHJvcHMoe1xuICAgIGNsYXNzTmFtZTogaWNvbkNsc1xufSkoXG4gICAgc3R5bGVkKCdzcGFuJykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzdHlsZVR5cGUgPSAnZGVmYXVsdCcsXG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH0sXG4gICAgICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgICAgIGN1c3RvbVN0eWxlLFxuICAgICAgICAgICAgYm9yZGVyVHlwZTogY3VzdG9tQm9yZGVyVHlwZSxcbiAgICAgICAgICAgIGljb25TaXplOiBzaXplLFxuICAgICAgICAgICAgYm9yZGVyOiBjdXN0b21Cb3JkZXJcbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIGZ1bmN0aW9uIGdldEJvcmRlcihjdXN0b21Cb3JkZXIpIHtcbiAgICAgICAgICAgIGlmIChjdXN0b21Cb3JkZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VzdG9tU3R5bGU/LmJvcmRlckNvbG9yIHx8IERUW2NvbG9yTWFwLmJvcmRlcl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gRFRbJ1RfQ09MT1JfTElORV9ERUZBVUxUX1RSQU5TUEFSRU5UJ107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaWNvblNpemUgPSBEVFtgVF9UQUdfSUNPTl9TSVpFXyR7KHNpemUgfHwgJ3NtJykudG9Mb2NhbGVVcHBlckNhc2UoKX1gXTtcblxuICAgICAgICBjb25zdCBjb2xvck1hcCA9IGdldENvbG9yTWFwKHN0eWxlVHlwZSwgZGlzYWJsZWQpO1xuICAgICAgICBjb25zdCBjb2xvciA9IGN1c3RvbVN0eWxlPy5jb2xvciB8fCBEVFtjb2xvck1hcC5jb2xvcl07XG4gICAgICAgIGNvbnN0IGJnID0gY3VzdG9tU3R5bGU/LmJhY2tncm91bmQgfHwgRFRbY29sb3JNYXAuYmddO1xuXG4gICAgICAgIGNvbnN0IGJvcmRlciA9IGdldEJvcmRlcihjdXN0b21Cb3JkZXIpO1xuICAgICAgICBjb25zdCBib3JkZXJSYWRpdXMgPVxuICAgICAgICAgICAgY3VzdG9tQm9yZGVyVHlwZSA9PT0gJ2NpcmNsZSdcbiAgICAgICAgICAgICAgICA/IGBjYWxjKCR7RFRbJ1RfVEFHX0hFSUdIVF9TTSddfSAqICR7RFRbJ1RfQ09STkVSX0NJUkNMRSddLnJlcGxhY2UoJyUnLCAnJykgLyAxMDB9KWBcbiAgICAgICAgICAgICAgICA6IERUWydUX1RBR19CT1JERVJfUkFESVVTJ107XG4gICAgICAgIGNvbnN0IGRpdmlkZXIgPSBEVFtjb2xvck1hcC5kaXZpZGVyXTtcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgIGhlaWdodDogJHtEVFsnVF9UQUdfSEVJR0hUX1NNJ119O1xuICAgICAgICAgICAgd2lkdGg6IDIwcHg7XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogY2FsYygke0RUWydUX1RBR19IRUlHSFRfU00nXX0gLSAycHgpO1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogJHtib3JkZXJSYWRpdXN9O1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHtib3JkZXJ9O1xuICAgICAgICAgICAgY29sb3I6ICR7Y29sb3J9O1xuICAgICAgICAgICAgYmFja2dyb3VuZDogJHtiZ307XG4gICAgICAgICAgICBmb250LXNpemU6ICR7aWNvblNpemV9O1xuICAgICAgICAgICAgOjphZnRlciB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgIHJpZ2h0OiAtMXB4O1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7ZGl2aWRlcn07XG4gICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgICAgICBib3JkZXI6IDAgc29saWQgJHtiZ307XG4gICAgICAgICAgICAgICAgYm9yZGVyLXdpZHRoOiA1cHggMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IFRhZ0dyb3VwV3JhcHBlciA9IHdpdGhQcm9wcygpKFxuICAgIHN0eWxlZCgnZGl2JykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7IGNvbXBhY3QgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjb21wYWN0XG4gICAgICAgICAgICA/IGNzc2BcbiAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IC00cHg7XG4gICAgICAgICAgICAgICAgICAuJHtwcmVmaXhDbHN9LCAuJHtpY29uQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWxlZnQtc3R5bGU6IG5vbmU7XG4gICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJpZ2h0LXN0eWxlOiBub25lO1xuICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA0cHg7XG4gICAgICAgICAgICAgICAgICAgICAgOmZpcnN0LW9mLXR5cGUge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItbGVmdC1zdHlsZTogc29saWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDJweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMnB4O1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICA6YWZ0ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnICc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogOHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMXB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDVweCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIDpsYXN0LW9mLXR5cGUge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmlnaHQtc3R5bGU6IHNvbGlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMnB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMnB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICA6OmFmdGVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IG5vbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAuJHtpY29uQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgOmFmdGVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IDUwJTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgLiR7cHJlZml4Q2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA0cHg7XG4gICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMHB4O1xuICAgICAgICAgICAgICAgICAgICAgIDpmaXJzdC1vZi10eXBlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA4cHg7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICR7Q29udGVudFdyYXBwZXJ9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIDpsYXN0LW9mLXR5cGUge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAke0NvbnRlbnRXcmFwcGVyfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDhweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgOiBjc3NgXG4gICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAtNHB4O1xuICAgICAgICAgICAgICAgICAgLiR7cHJlZml4Q2xzfSwgLiR7aWNvbkNsc30ge1xuICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogNHB4O1xuICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDRweDtcbiAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBgO1xuICAgIH0pXG4pO1xuZXhwb3J0IGNvbnN0IFNXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IGljb25DbHNcbn0pKFxuICAgIHN0eWxlZChDb21iaW5lKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHsgZXhwb3NlQ291bnQgfSA9IHByb3BzO1xuICAgICAgICByZXR1cm4gZXhwb3NlQ291bnQgPT09IHZvaWQgMFxuICAgICAgICAgICAgPyAnJ1xuICAgICAgICAgICAgOiBjc3NgXG4gICAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICAgICAgICAgICAgLiR7cHJlZml4Q2xzfSwgLiR7aWNvbkNsc30ge1xuICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMHB4O1xuICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDBweDtcbiAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgLiR7aWNvbkNsc30ge1xuICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDBweDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYDtcbiAgICB9KVxuKTtcbmV4cG9ydCBjb25zdCBUYWdNZW51V2FwcGVyID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IGljb25DbHNcbn0pKFxuICAgIHN0eWxlZCgnZGl2JykocHJvcHMgPT4ge1xuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgLiR7bWVudUNsc30ge1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDhweCAwIDRweCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLiR7cHJlZml4Q2xzfSwuJHtpY29uQ2xzfSB7XG4gICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogNHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuZXhwb3J0IGNvbnN0IFRhZ1BvcG92ZXJXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IGljb25DbHNcbn0pKFxuICAgIHN0eWxlZCgnZGl2JykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgcGFkZGluZzogMCA4cHg7XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogJHtEVFsnVF9UQUdfSEVJR0hUX1NNJ119O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgVGFnTW9yZVdhcHBlciA9IHdpdGhQcm9wcyh7XG4gICAgY2xhc3NOYW1lOiBpY29uQ2xzXG59KShcbiAgICBzdHlsZWQoJ3NwYW4nKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIC4ke3ByZWZpeENsc30ge1xuICAgICAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAke0RUWydUX1RBR19IRUlHSFRfU00nXX07XG4gICAgICAgICAgICAgICAgcGFkZGluZzogMCA2cHg7XG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IGNhbGMoJHtEVFsnVF9UQUdfSEVJR0hUX1NNJ119IC0gMnB4KTtcbiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6ICR7RFRbJ1RfVEFHX0JPUkRFUl9SQURJVVMnXX07XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4ICR7RFRbJ1RfTElORV9TVFlMRV9EQVNIRUQnXX0gJHtEVFsnVF9QT1BPVkVSX0NPTE9SX0xJTkVfTElHSFQnXX07XG4gICAgICAgICAgICAgICAgY29sb3I6ICR7RFRbJ1RfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUksnXX07XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogbm9uZTtcbiAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG4iXX0= */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.TagMoreWapper = TagMoreWapper;