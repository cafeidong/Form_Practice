export const prefixCls: string;
export const menuCls: string;
export const iconCls: string;
export namespace styleMap {
    namespace gray {
        const color: string;
        const icon: string;
        const border: string;
        const divider: string;
        const bg: string;
        const iconHoverBG: string;
    }
    namespace green {
        const color_1: string;
        export { color_1 as color };
        const icon_1: string;
        export { icon_1 as icon };
        const border_1: string;
        export { border_1 as border };
        const divider_1: string;
        export { divider_1 as divider };
        const bg_1: string;
        export { bg_1 as bg };
        const iconHoverBG_1: string;
        export { iconHoverBG_1 as iconHoverBG };
    }
    namespace yellow {
        const color_2: string;
        export { color_2 as color };
        const icon_2: string;
        export { icon_2 as icon };
        const border_2: string;
        export { border_2 as border };
        const divider_2: string;
        export { divider_2 as divider };
        const bg_2: string;
        export { bg_2 as bg };
        const iconHoverBG_2: string;
        export { iconHoverBG_2 as iconHoverBG };
    }
    namespace red {
        const color_3: string;
        export { color_3 as color };
        const icon_3: string;
        export { icon_3 as icon };
        const border_3: string;
        export { border_3 as border };
        const divider_3: string;
        export { divider_3 as divider };
        const bg_3: string;
        export { bg_3 as bg };
        const iconHoverBG_3: string;
        export { iconHoverBG_3 as iconHoverBG };
    }
    namespace primary {
        const color_4: string;
        export { color_4 as color };
        const icon_4: string;
        export { icon_4 as icon };
        const border_4: string;
        export { border_4 as border };
        const divider_4: string;
        export { divider_4 as divider };
        const bg_4: string;
        export { bg_4 as bg };
        const iconHoverBG_4: string;
        export { iconHoverBG_4 as iconHoverBG };
    }
    namespace purple {
        const color_5: string;
        export { color_5 as color };
        const icon_5: string;
        export { icon_5 as icon };
        const border_5: string;
        export { border_5 as border };
        const divider_5: string;
        export { divider_5 as divider };
        const bg_5: string;
        export { bg_5 as bg };
        const iconHoverBG_5: string;
        export { iconHoverBG_5 as iconHoverBG };
    }
    namespace lightblue {
        const color_6: string;
        export { color_6 as color };
        const icon_6: string;
        export { icon_6 as icon };
        const border_6: string;
        export { border_6 as border };
        const divider_6: string;
        export { divider_6 as divider };
        const bg_6: string;
        export { bg_6 as bg };
        const iconHoverBG_6: string;
        export { iconHoverBG_6 as iconHoverBG };
    }
    namespace blue {
        const color_7: string;
        export { color_7 as color };
        const icon_7: string;
        export { icon_7 as icon };
        const border_7: string;
        export { border_7 as border };
        const divider_7: string;
        export { divider_7 as divider };
        const bg_7: string;
        export { bg_7 as bg };
        const iconHoverBG_7: string;
        export { iconHoverBG_7 as iconHoverBG };
    }
    namespace orange {
        const color_8: string;
        export { color_8 as color };
        const icon_8: string;
        export { icon_8 as icon };
        const border_8: string;
        export { border_8 as border };
        const divider_8: string;
        export { divider_8 as divider };
        const bg_8: string;
        export { bg_8 as bg };
        const iconHoverBG_8: string;
        export { iconHoverBG_8 as iconHoverBG };
    }
    namespace cyan {
        const color_9: string;
        export { color_9 as color };
        const icon_9: string;
        export { icon_9 as icon };
        const border_9: string;
        export { border_9 as border };
        const divider_9: string;
        export { divider_9 as divider };
        const bg_9: string;
        export { bg_9 as bg };
        const iconHoverBG_9: string;
        export { iconHoverBG_9 as iconHoverBG };
    }
}
export const CloseIcon: import("@emotion/styled-base").StyledComponent<Pick<any, string | number | symbol> & import("react").RefAttributes<SvgIcon>, Pick<Pick<any, string | number | symbol> & import("react").RefAttributes<SvgIcon>, string | number | symbol>, object>;
export const CloseIconWrapper: import("@emotion/styled-base").StyledComponent<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, Pick<import("react").ClassAttributes<HTMLSpanElement> & import("react").HTMLAttributes<HTMLSpanElement>, keyof import("react").HTMLAttributes<HTMLSpanElement>>, object>;
export const PrefixIcon: import("react").SFC<import("emotion-theming/types/helper").AddOptionalTo<Pick<any, string | number | symbol> & import("react").RefAttributes<any>, "theme">>;
export const SvgIconWrapper: import("react").SFC<import("emotion-theming/types/helper").AddOptionalTo<Pick<any, string | number | symbol> & import("react").RefAttributes<any>, "theme">>;
export const PrefixIconWrapper: import("@emotion/styled-base").StyledComponent<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, Pick<import("react").ClassAttributes<HTMLSpanElement> & import("react").HTMLAttributes<HTMLSpanElement>, keyof import("react").HTMLAttributes<HTMLSpanElement>>, object>;
export const SuffixIconWrapper: import("@emotion/styled-base").StyledComponent<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, Pick<import("react").ClassAttributes<HTMLSpanElement> & import("react").HTMLAttributes<HTMLSpanElement>, keyof import("react").HTMLAttributes<HTMLSpanElement>>, object>;
export const TagWrapper: import("react").SFC<import("emotion-theming/types/helper").AddOptionalTo<Pick<any, string | number | symbol> & import("react").RefAttributes<any>, "theme">>;
export const ContentWrapper: import("@emotion/styled-base").StyledComponent<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, Pick<import("react").ClassAttributes<HTMLSpanElement> & import("react").HTMLAttributes<HTMLSpanElement>, keyof import("react").HTMLAttributes<HTMLSpanElement>>, object>;
export const IconTag: import("@emotion/styled-base").StyledComponent<import("../../Icon/Icon").IconProps & Omit<import("react").HTMLAttributes<HTMLElement>, keyof import("../../Icon/Icon").IconProps>, Pick<import("../../Icon/Icon").IconProps & Omit<import("react").HTMLAttributes<HTMLElement>, keyof import("../../Icon/Icon").IconProps>, "className" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "id" | "lang" | "placeholder" | "slot" | "spellCheck" | "style" | "tabIndex" | "title" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "color" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "css" | keyof import("../../Icon/Icon").IconProps>, object>;
export const IconTagWrapper: import("react").SFC<import("emotion-theming/types/helper").AddOptionalTo<Pick<any, string | number | symbol> & import("react").RefAttributes<any>, "theme">>;
export const TagGroupWrapper: import("react").SFC<import("emotion-theming/types/helper").AddOptionalTo<Pick<any, string | number | symbol> & import("react").RefAttributes<any>, "theme">>;
export const SWrap: import("react").SFC<import("emotion-theming/types/helper").AddOptionalTo<Pick<any, string | number | symbol> & import("react").RefAttributes<any>, "theme">>;
export const TagMenuWapper: import("react").SFC<import("emotion-theming/types/helper").AddOptionalTo<Pick<any, string | number | symbol> & import("react").RefAttributes<any>, "theme">>;
export const TagPopoverWrap: import("react").SFC<import("emotion-theming/types/helper").AddOptionalTo<Pick<any, string | number | symbol> & import("react").RefAttributes<any>, "theme">>;
export const TagMoreWapper: import("react").SFC<import("emotion-theming/types/helper").AddOptionalTo<Pick<any, string | number | symbol> & import("react").RefAttributes<any>, "theme">>;
import SvgIcon from "../../../components/SvgIcon";
