export default Tag;
declare class Tag extends React.PureComponent<any, any, any> {
    static propTypes: {
        /** @ignore */
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        /**
         * 样式风格
         */
        styleType: PropTypes.Requireable<string>;
        /**
         * 是否显示关闭按钮
         */
        closable: PropTypes.Requireable<boolean>;
        /**
         * 关闭回调
         */
        onClose: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * 自定义前置 icon
         */
        icon: PropTypes.Requireable<string | number | boolean | {} | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>;
        /**
         * icon 大小
         */
        iconSize: PropTypes.Requireable<string>;
        /**
         * 是否开启border样式
         */
        border: PropTypes.Requireable<boolean>;
        /**
         * border 类型
         */
        borderType: PropTypes.Requireable<string>;
        /**
         * 后缀
         */
        suffix: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        /**
         * 是否禁用
         */
        disabled: PropTypes.Requireable<boolean>;
        /**
         * 自定义样式
         */
        customStyle: PropTypes.Requireable<PropTypes.InferProps<{
            /** 字色/图标色 */
            color: PropTypes.Requireable<string>;
            /** 边框色 */
            borderColor: PropTypes.Requireable<string>;
            /** 背景色 */
            background: PropTypes.Requireable<string>;
            /** 关闭按钮 hover 背景色 */
            closeIconHoverBackground: PropTypes.Requireable<string>;
        }>>;
    };
    static defaultProps: {
        styleType: string;
        borderType: string;
        iconSize: string;
        border: boolean;
    };
    constructor(props: any);
    constructor(props: any, context: any);
    render(): JSX.Element;
}
declare namespace Tag {
    export { StyleType };
}
export const StyleType: string[];
import React from "react";
import PropTypes from "prop-types";
