"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TooltipWrap = exports.ArrowInner = exports.Arrow = exports.ContentWrap = exports.contentCls = exports.tooltipPopupClassName = exports.prefixCls = void 0;

var _newArrowCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/newArrowCheck"));

var _emotion = require("emotion");

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _core = require("@emotion/core");

var _style = require("../../../components/Popover/style");

var _config = _interopRequireDefault(require("../../../config"));

var _style2 = require("../../../style");

var _this = void 0;

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

var _prefixCls = _config.default.prefixCls;
var prefixCls = _prefixCls + '-tooltip';
exports.prefixCls = prefixCls;
var arrowWidth = '6px';
var borderWidth = '1px';
var tooltipPopupClassName = prefixCls + '-popup';
exports.tooltipPopupClassName = tooltipPopupClassName;
var contentCls = prefixCls + '-content';
exports.contentCls = contentCls;
var ContentWrap = (0, _style2.sWrap)({
  className: contentCls
})(( /*#__PURE__*/0, _styledBase.default)('div', {
  target: "ek8sttx0",
  label: "ContentWrap"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var DT = props.theme.designTokens,
      themeType = props.themeType,
      customStyle = props.customStyle;
  var map = {
    light: {
      text: DT.T_COLOR_TEXT_DEFAULT_DARK,
      border: DT.T_POPOVER_COLOR_LINE_LIGHT,
      background: DT.T_POPOVER_COLOR_BG_LIGHT
    },
    dark: {
      text: DT.T_COLOR_TEXT_WHITE,
      border: DT.T_POPOVER_COLOR_BG_DARK,
      background: DT.T_POPOVER_COLOR_BG_DARK
    }
  };
  var colorMap = map[themeType];
  return /*#__PURE__*/(0, _core.css)("line-height:20px;padding:", (customStyle === null || customStyle === void 0 ? void 0 : customStyle.popupWrapperPadding) || '8px 10px', ";border:", DT.T_LINE_WIDTH_BASE, " solid ", colorMap.border, ";border-radius:3px;font-size:12px;text-align:left;text-decoration:none;word-break:keep-all;box-sizing:border-box;color:", colorMap.text, ";background:", colorMap.background, ";;label:ContentWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.ContentWrap = ContentWrap;
var arrowMixin = process.env.NODE_ENV === "production" ? {
  name: "g2pqji-arrowMixin",
  styles: "display:inline-block;position:absolute;width:0;height:0;border-width:0;border-color:transparent;border-style:solid;;label:arrowMixin;"
} : {
  name: "g2pqji-arrowMixin",
  styles: "display:inline-block;position:absolute;width:0;height:0;border-width:0;border-color:transparent;border-style:solid;;label:arrowMixin;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
var Arrow = ( /*#__PURE__*/0, _styledBase.default)('span', {
  target: "ek8sttx1",
  label: "Arrow"
})(arrowMixin, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.Arrow = Arrow;
var ArrowInner = ( /*#__PURE__*/0, _styledBase.default)('span', {
  target: "ek8sttx2",
  label: "ArrowInner"
})(arrowMixin, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.ArrowInner = ArrowInner;
(0, _emotion.injectGlobal)(".", tooltipPopupClassName, "{&.", _style.prefixCls, "-placement-bottom,&.", _style.prefixCls, "-placement-bottomLeft,&.", _style.prefixCls, "-placement-bottomRight{", Arrow, ",", ArrowInner, "{margin-left:-", arrowWidth, ";border-width:0 ", arrowWidth, " ", arrowWidth, " ", arrowWidth, ";border-top-color:transparent;border-left-color:transparent;border-right-color:transparent;}", Arrow, "{top:-", arrowWidth, ";}", ArrowInner, "{top:", borderWidth, ";}}&.", _style.prefixCls, "-placement-top,&.", _style.prefixCls, "-placement-topLeft,&.", _style.prefixCls, "-placement-topRight{", Arrow, ",", ArrowInner, "{margin-left:-", arrowWidth, ";border-width:", arrowWidth, " ", arrowWidth, " 0 ", arrowWidth, ";border-bottom-color:transparent;border-left-color:transparent;border-right-color:transparent;}", Arrow, "{bottom:-", arrowWidth, ";}", ArrowInner, "{bottom:", borderWidth, ";}}&.", _style.prefixCls, "-placement-left,&.", _style.prefixCls, "-placement-leftTop,&.", _style.prefixCls, "-placement-leftBottom{", Arrow, ",", ArrowInner, "{margin-top:-", arrowWidth, ";border-width:", arrowWidth, " 0 ", arrowWidth, " ", arrowWidth, ";border-top-color:transparent;border-bottom-color:transparent;border-right-color:transparent;}", Arrow, "{right:-", arrowWidth, ";}", ArrowInner, "{right:", borderWidth, ";}}&.", _style.prefixCls, "-placement-right,&.", _style.prefixCls, "-placement-rightTop,&.", _style.prefixCls, "-placement-rightBottom{", Arrow, ",", ArrowInner, "{margin-top:-", arrowWidth, ";border-width:", arrowWidth, " ", arrowWidth, " ", arrowWidth, " 0;border-top-color:transparent;border-bottom-color:transparent;border-left-color:transparent;}", Arrow, "{left:-", arrowWidth, ";}", ArrowInner, "{left:", borderWidth, ";}}&.", _style.prefixCls, "-placement-bottomLeft,&.", _style.prefixCls, "-placement-topLeft{", Arrow, "{left:16px;}.", contentCls, "{min-width:32px;}}&.", _style.prefixCls, "-placement-bottomRight,&.", _style.prefixCls, "-placement-topRight{", Arrow, "{right:10px;}.", contentCls, "{min-width:32px;}}&.", _style.prefixCls, "-placement-leftTop,&.", _style.prefixCls, "-placement-rightTop{", Arrow, "{top:5px;margin-top:0;}.", contentCls, "{min-height:22px;}}&.", _style.prefixCls, "-placement-leftBottom,&.", _style.prefixCls, "-placement-rightBottom{", Arrow, "{bottom:5px;}.", contentCls, "{min-height:22px;}}&.", _style.prefixCls, "-placement-top,&.", _style.prefixCls, "-placement-bottom{", Arrow, "{left:50%;}.", contentCls, "{min-width:32px;}}&.", _style.prefixCls, "-placement-left,&.", _style.prefixCls, "-placement-right{", Arrow, "{top:50%;}.", contentCls, "{min-height:22px;}}}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1Rvb2x0aXAvc3R5bGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeUVZIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1Rvb2x0aXAvc3R5bGUvaW5kZXgudHMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCB7IGluamVjdEdsb2JhbCB9IGZyb20gJ2Vtb3Rpb24nO1xuXG5pbXBvcnQgeyBwcmVmaXhDbHMgYXMgcG9wb3ZlclByZWZpeENscyB9IGZyb20gJ3NyYy9jb21wb25lbnRzL1BvcG92ZXIvc3R5bGUnO1xuaW1wb3J0IGNvbmZpZyBmcm9tICdzcmMvY29uZmlnJztcbmltcG9ydCB7IHNXcmFwIH0gZnJvbSAnc3JjL3N0eWxlJztcblxuY29uc3QgeyBwcmVmaXhDbHM6IF9wcmVmaXhDbHMgfSA9IGNvbmZpZztcbmV4cG9ydCBjb25zdCBwcmVmaXhDbHMgPSBfcHJlZml4Q2xzICsgJy10b29sdGlwJztcblxuY29uc3QgYXJyb3dXaWR0aCA9ICc2cHgnO1xuY29uc3QgYm9yZGVyV2lkdGggPSAnMXB4JztcblxuZXhwb3J0IGNvbnN0IHRvb2x0aXBQb3B1cENsYXNzTmFtZSA9IHByZWZpeENscyArICctcG9wdXAnO1xuZXhwb3J0IGNvbnN0IGNvbnRlbnRDbHMgPSBwcmVmaXhDbHMgKyAnLWNvbnRlbnQnO1xuXG5leHBvcnQgY29uc3QgQ29udGVudFdyYXAgPSBzV3JhcDx7IHRoZW1lVHlwZTogJ2xpZ2h0JyB8ICdkYXJrJzsgY3VzdG9tU3R5bGU/OiB7IHBvcHVwV3JhcHBlclBhZGRpbmc/OiBzdHJpbmcgfSB9Pih7XG4gICAgY2xhc3NOYW1lOiBjb250ZW50Q2xzXG59KShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9LFxuICAgICAgICAgICAgdGhlbWVUeXBlLFxuICAgICAgICAgICAgY3VzdG9tU3R5bGVcbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIGNvbnN0IG1hcCA9IHtcbiAgICAgICAgICAgIGxpZ2h0OiB7XG4gICAgICAgICAgICAgICAgdGV4dDogRFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSSyxcbiAgICAgICAgICAgICAgICBib3JkZXI6IERULlRfUE9QT1ZFUl9DT0xPUl9MSU5FX0xJR0hULFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IERULlRfUE9QT1ZFUl9DT0xPUl9CR19MSUdIVFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhcms6IHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBEVC5UX0NPTE9SX1RFWFRfV0hJVEUsXG4gICAgICAgICAgICAgICAgYm9yZGVyOiBEVC5UX1BPUE9WRVJfQ09MT1JfQkdfREFSSyxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBEVC5UX1BPUE9WRVJfQ09MT1JfQkdfREFSS1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBjb2xvck1hcCA9IG1hcFt0aGVtZVR5cGVdO1xuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgICAgICAgICBwYWRkaW5nOiAke2N1c3RvbVN0eWxlPy5wb3B1cFdyYXBwZXJQYWRkaW5nIHx8ICc4cHggMTBweCd9O1xuICAgICAgICAgICAgYm9yZGVyOiAke0RULlRfTElORV9XSURUSF9CQVNFfSBzb2xpZCAke2NvbG9yTWFwLmJvcmRlcn07XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gICAgICAgICAgICBmb250LXNpemU6IDEycHg7XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgd29yZC1icmVhazoga2VlcC1hbGw7XG4gICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgY29sb3I6ICR7Y29sb3JNYXAudGV4dH07XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAke2NvbG9yTWFwLmJhY2tncm91bmR9O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5jb25zdCBhcnJvd01peGluID0gY3NzYFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgd2lkdGg6IDA7XG4gICAgaGVpZ2h0OiAwO1xuICAgIGJvcmRlci13aWR0aDogMDtcbiAgICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIGJvcmRlci1zdHlsZTogc29saWQ7XG5gO1xuXG5leHBvcnQgY29uc3QgQXJyb3cgPSBzdHlsZWQoJ3NwYW4nKWBcbiAgICAke2Fycm93TWl4aW59O1xuYDtcbmV4cG9ydCBjb25zdCBBcnJvd0lubmVyID0gc3R5bGVkKCdzcGFuJylgXG4gICAgJHthcnJvd01peGlufTtcbmA7XG5cbmluamVjdEdsb2JhbGBcbiAgICAuJHt0b29sdGlwUG9wdXBDbGFzc05hbWV9IHtcbiAgICAgICAgJi4ke3BvcG92ZXJQcmVmaXhDbHN9LXBsYWNlbWVudC1ib3R0b20sXG4gICAgICAgICYuJHtwb3BvdmVyUHJlZml4Q2xzfS1wbGFjZW1lbnQtYm90dG9tTGVmdCxcbiAgICAgICAgJi4ke3BvcG92ZXJQcmVmaXhDbHN9LXBsYWNlbWVudC1ib3R0b21SaWdodCB7XG4gICAgICAgICAgICAke0Fycm93fSwgJHtBcnJvd0lubmVyfSB7XG4gICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IC0ke2Fycm93V2lkdGh9O1xuICAgICAgICAgICAgICAgIGJvcmRlci13aWR0aDogMCAke2Fycm93V2lkdGh9ICR7YXJyb3dXaWR0aH0gJHthcnJvd1dpZHRofTtcbiAgICAgICAgICAgICAgICBib3JkZXItdG9wLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICAgICAgICBib3JkZXItbGVmdC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICAgICAgYm9yZGVyLXJpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICR7QXJyb3d9IHtcbiAgICAgICAgICAgICAgICB0b3A6IC0ke2Fycm93V2lkdGh9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHtBcnJvd0lubmVyfSB7XG4gICAgICAgICAgICAgICAgdG9wOiAke2JvcmRlcldpZHRofTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAmLiR7cG9wb3ZlclByZWZpeENsc30tcGxhY2VtZW50LXRvcCxcbiAgICAgICAgJi4ke3BvcG92ZXJQcmVmaXhDbHN9LXBsYWNlbWVudC10b3BMZWZ0LFxuICAgICAgICAmLiR7cG9wb3ZlclByZWZpeENsc30tcGxhY2VtZW50LXRvcFJpZ2h0IHtcbiAgICAgICAgICAgICR7QXJyb3d9LCAke0Fycm93SW5uZXJ9IHtcbiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogLSR7YXJyb3dXaWR0aH07XG4gICAgICAgICAgICAgICAgYm9yZGVyLXdpZHRoOiAke2Fycm93V2lkdGh9ICR7YXJyb3dXaWR0aH0gMCAke2Fycm93V2lkdGh9O1xuICAgICAgICAgICAgICAgIGJvcmRlci1ib3R0b20tY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgICAgICAgICAgIGJvcmRlci1sZWZ0LWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICAgICAgICBib3JkZXItcmlnaHQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHtBcnJvd30ge1xuICAgICAgICAgICAgICAgIGJvdHRvbTogLSR7YXJyb3dXaWR0aH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAke0Fycm93SW5uZXJ9IHtcbiAgICAgICAgICAgICAgICBib3R0b206ICR7Ym9yZGVyV2lkdGh9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICYuJHtwb3BvdmVyUHJlZml4Q2xzfS1wbGFjZW1lbnQtbGVmdCxcbiAgICAgICAgJi4ke3BvcG92ZXJQcmVmaXhDbHN9LXBsYWNlbWVudC1sZWZ0VG9wLFxuICAgICAgICAmLiR7cG9wb3ZlclByZWZpeENsc30tcGxhY2VtZW50LWxlZnRCb3R0b20ge1xuICAgICAgICAgICAgJHtBcnJvd30sICR7QXJyb3dJbm5lcn0ge1xuICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IC0ke2Fycm93V2lkdGh9O1xuICAgICAgICAgICAgICAgIGJvcmRlci13aWR0aDogJHthcnJvd1dpZHRofSAwICR7YXJyb3dXaWR0aH0gJHthcnJvd1dpZHRofTtcbiAgICAgICAgICAgICAgICBib3JkZXItdG9wLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICAgICAgICBib3JkZXItYm90dG9tLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICAgICAgICBib3JkZXItcmlnaHQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHtBcnJvd30ge1xuICAgICAgICAgICAgICAgIHJpZ2h0OiAtJHthcnJvd1dpZHRofTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICR7QXJyb3dJbm5lcn0ge1xuICAgICAgICAgICAgICAgIHJpZ2h0OiAke2JvcmRlcldpZHRofTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAmLiR7cG9wb3ZlclByZWZpeENsc30tcGxhY2VtZW50LXJpZ2h0LFxuICAgICAgICAmLiR7cG9wb3ZlclByZWZpeENsc30tcGxhY2VtZW50LXJpZ2h0VG9wLFxuICAgICAgICAmLiR7cG9wb3ZlclByZWZpeENsc30tcGxhY2VtZW50LXJpZ2h0Qm90dG9tIHtcbiAgICAgICAgICAgICR7QXJyb3d9LCAke0Fycm93SW5uZXJ9IHtcbiAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAtJHthcnJvd1dpZHRofTtcbiAgICAgICAgICAgICAgICBib3JkZXItd2lkdGg6ICR7YXJyb3dXaWR0aH0gJHthcnJvd1dpZHRofSAke2Fycm93V2lkdGh9IDA7XG4gICAgICAgICAgICAgICAgYm9yZGVyLXRvcC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICAgICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICAgICAgYm9yZGVyLWxlZnQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHtBcnJvd30ge1xuICAgICAgICAgICAgICAgIGxlZnQ6IC0ke2Fycm93V2lkdGh9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHtBcnJvd0lubmVyfSB7XG4gICAgICAgICAgICAgICAgbGVmdDogJHtib3JkZXJXaWR0aH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgJi4ke3BvcG92ZXJQcmVmaXhDbHN9LXBsYWNlbWVudC1ib3R0b21MZWZ0LFxuICAgICAgICAmLiR7cG9wb3ZlclByZWZpeENsc30tcGxhY2VtZW50LXRvcExlZnQge1xuICAgICAgICAgICAgJHtBcnJvd30ge1xuICAgICAgICAgICAgICAgIGxlZnQ6IDE2cHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuJHtjb250ZW50Q2xzfSB7XG4gICAgICAgICAgICAgICAgbWluLXdpZHRoOiAzMnB4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICYuJHtwb3BvdmVyUHJlZml4Q2xzfS1wbGFjZW1lbnQtYm90dG9tUmlnaHQsXG4gICAgICAgICYuJHtwb3BvdmVyUHJlZml4Q2xzfS1wbGFjZW1lbnQtdG9wUmlnaHQge1xuICAgICAgICAgICAgJHtBcnJvd30ge1xuICAgICAgICAgICAgICAgIHJpZ2h0OiAxMHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLiR7Y29udGVudENsc30ge1xuICAgICAgICAgICAgICAgIG1pbi13aWR0aDogMzJweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAmLiR7cG9wb3ZlclByZWZpeENsc30tcGxhY2VtZW50LWxlZnRUb3AsXG4gICAgICAgICYuJHtwb3BvdmVyUHJlZml4Q2xzfS1wbGFjZW1lbnQtcmlnaHRUb3Age1xuICAgICAgICAgICAgJHtBcnJvd30ge1xuICAgICAgICAgICAgICAgIHRvcDogNXB4O1xuICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuJHtjb250ZW50Q2xzfSB7XG4gICAgICAgICAgICAgICAgbWluLWhlaWdodDogMjJweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAmLiR7cG9wb3ZlclByZWZpeENsc30tcGxhY2VtZW50LWxlZnRCb3R0b20sXG4gICAgICAgICYuJHtwb3BvdmVyUHJlZml4Q2xzfS1wbGFjZW1lbnQtcmlnaHRCb3R0b20ge1xuICAgICAgICAgICAgJHtBcnJvd30ge1xuICAgICAgICAgICAgICAgIGJvdHRvbTogNXB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLiR7Y29udGVudENsc30ge1xuICAgICAgICAgICAgICAgIG1pbi1oZWlnaHQ6IDIycHg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgJi4ke3BvcG92ZXJQcmVmaXhDbHN9LXBsYWNlbWVudC10b3AsXG4gICAgICAgICYuJHtwb3BvdmVyUHJlZml4Q2xzfS1wbGFjZW1lbnQtYm90dG9tIHtcbiAgICAgICAgICAgICR7QXJyb3d9IHtcbiAgICAgICAgICAgICAgICBsZWZ0OiA1MCU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuJHtjb250ZW50Q2xzfSB7XG4gICAgICAgICAgICAgICAgbWluLXdpZHRoOiAzMnB4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICYuJHtwb3BvdmVyUHJlZml4Q2xzfS1wbGFjZW1lbnQtbGVmdCxcbiAgICAgICAgJi4ke3BvcG92ZXJQcmVmaXhDbHN9LXBsYWNlbWVudC1yaWdodCB7XG4gICAgICAgICAgICAke0Fycm93fSB7XG4gICAgICAgICAgICAgICAgdG9wOiA1MCU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuJHtjb250ZW50Q2xzfSB7XG4gICAgICAgICAgICAgICAgbWluLWhlaWdodDogMjJweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBUb29sdGlwV3JhcCA9IHNXcmFwPHsgdGhlbWVUeXBlOiAnbGlnaHQnIHwgJ2RhcmsnIH0+KHt9KShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9LFxuICAgICAgICAgICAgdGhlbWVUeXBlXG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICBjb25zdCBtYXAgPSB7XG4gICAgICAgICAgICBsaWdodDoge1xuICAgICAgICAgICAgICAgIGJvcmRlcjogRFQuVF9QT1BPVkVSX0NPTE9SX0xJTkVfTElHSFQsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogRFQuVF9QT1BPVkVSX0NPTE9SX0JHX0xJR0hUXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGFyazoge1xuICAgICAgICAgICAgICAgIGJvcmRlcjogRFQuVF9QT1BPVkVSX0NPTE9SX0JHX0RBUkssXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogRFQuVF9QT1BPVkVSX0NPTE9SX0JHX0RBUktcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY29sb3JNYXAgPSBtYXBbdGhlbWVUeXBlXTtcbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgICR7QXJyb3d9IHtcbiAgICAgICAgICAgICAgICBib3JkZXItY29sb3I6ICR7Y29sb3JNYXAuYm9yZGVyfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICR7QXJyb3dJbm5lcn0ge1xuICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogJHtjb2xvck1hcC5iYWNrZ3JvdW5kfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9KVxuKTtcbiJdfQ== */"));
var TooltipWrap = (0, _style2.sWrap)({})(( /*#__PURE__*/0, _styledBase.default)('div', {
  target: "ek8sttx3",
  label: "TooltipWrap"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var DT = props.theme.designTokens,
      themeType = props.themeType;
  var map = {
    light: {
      border: DT.T_POPOVER_COLOR_LINE_LIGHT,
      background: DT.T_POPOVER_COLOR_BG_LIGHT
    },
    dark: {
      border: DT.T_POPOVER_COLOR_BG_DARK,
      background: DT.T_POPOVER_COLOR_BG_DARK
    }
  };
  var colorMap = map[themeType];
  return /*#__PURE__*/(0, _core.css)(Arrow, "{border-color:", colorMap.border, ";}", ArrowInner, "{border-color:", colorMap.background, ";};label:TooltipWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.TooltipWrap = TooltipWrap;