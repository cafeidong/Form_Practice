/// <reference types="jest" />
import React, { ReactNode } from 'react';
import { CascadeData, Key, LoadData } from './interface';
declare const Wrapper: ({ onChange, onExpand, children }: {
    onChange?: ((value: Key[]) => void) | undefined;
    onExpand?: ((expandedValue: Key[]) => void) | undefined;
    children: ReactNode;
}) => JSX.Element;
declare type SharedProps = Pick<ArgsType<typeof Wrapper>[0], 'onChange' | 'onExpand'>;
declare const CascadeSearchResult: React.NamedExoticComponent<{
    dataSource?: CascadeData[] | undefined;
    value?: string[] | undefined;
    loading?: boolean | undefined;
    empty?: boolean | undefined;
    error?: Error | undefined;
} & SharedProps>;
declare const _default: React.MemoExoticComponent<({ dataSource, value, onChange, expandedValue, onExpand, loadData, topExtraRender }: {
    dataSource?: CascadeData[] | undefined;
    value?: string[] | undefined;
    expandedValue: string[];
    loadData?: LoadData | undefined;
    topExtraRender?: ((props: {
        index: number;
        parents?: CascadeData[] | undefined;
        items?: CascadeData[] | undefined;
    }) => React.ReactNode) | undefined;
} & SharedProps) => JSX.Element>;
export default _default;
export { CascadeSearchResult };
