"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SwitchWrap = exports.buttonCls = exports.innerCls = exports.offTipCls = exports.onTipCls = exports.dotCls = exports.prefixCls = void 0;

var _newArrowCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/newArrowCheck"));

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _core = require("@emotion/core");

var _config = _interopRequireDefault(require("../../../config"));

var _style = require("../../../style");

var _this = void 0;

var _prefixCls = _config.default.prefixCls;
var prefixCls = _prefixCls + '-switch';
exports.prefixCls = prefixCls;
var dotCls = prefixCls + '-dot';
exports.dotCls = dotCls;
var onTipCls = prefixCls + '-tip-on';
exports.onTipCls = onTipCls;
var offTipCls = prefixCls + '-tip-off';
exports.offTipCls = offTipCls;
var innerCls = prefixCls + '-inner';
exports.innerCls = innerCls;
var buttonCls = prefixCls + '-button';
exports.buttonCls = buttonCls;
var switchTheme = {
  Width: {
    sm: '44px',
    md: '73px',
    lg: '87px'
  },
  BorderWidth: {
    sm: 0,
    md: '1px',
    lg: '1px'
  },
  BtnPadding: {
    sm: '0',
    md: '2px',
    lg: '2px'
  },
  BtnSize: {
    sm: 'T_HEIGHT_SM',
    md: 'T_HEIGHT_MD',
    lg: 'T_HEIGHT_LG'
  }
};
var SizeMap = {
  sm: 'T_HEIGHT_SM',
  md: 'T_HEIGHT_MD',
  lg: 'T_HEIGHT_LG'
};
var SwitchWrap = (0, _style.sWrap)({})(( /*#__PURE__*/0, _styledBase.default)('div', {
  target: "e8db89p0",
  label: "SwitchWrap"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var DT = props.theme.designTokens,
      disabled = props.disabled,
      size = props.size,
      checked = props.checked;
  var Width = switchTheme.Width,
      BtnPadding = switchTheme.BtnPadding,
      BorderWidth = switchTheme.BorderWidth,
      BtnSize = switchTheme.BtnSize;
  var size_token = BtnSize[size];
  var btn_size_style = DT["".concat(size_token)];
  return /*#__PURE__*/(0, _core.css)("position:relative;cursor:pointer;font-size:12px;display:inline-block;vertical-align:middle;height:", DT[SizeMap[size]], ";line-height:", DT[SizeMap[size]], ";width:", Width[size], ";.", innerCls, "{border-radius:", DT.T_SWITCH_CORNER, ";box-sizing:border-box;display:inline-flex;align-items:center;width:100%;height:100%;user-select:none;transition:color 0.3s;}.", dotCls, "{position:absolute;display:block;right:6px;top:50%;margin-top:-2px;width:4px;height:4px;border-radius:50%;transition:background 0.3s;}.", buttonCls, "{position:absolute;display:block;box-sizing:border-box;left:0;top:0;transition:all 0.3s;> span{display:block;width:100%;height:100%;border-radius:", DT.T_SWITCH_CORNER, ";box-sizing:border-box;}}.", onTipCls, ",.", offTipCls, "{width:100%;text-align:center;box-sizing:border-box;display:block;}.", innerCls, "{background:", DT.T_SWITCH_COLOR_BG_INNER_OFF, ";border-color:", DT.T_COLOR_LINE_DEFAULT_LIGHT, ";border-width:", BorderWidth[size], ";border-style:solid;box-shadow:", DT.T_SHADOW_INSET_1, ";color:", DT.T_COLOR_TEXT_DEFAULT_LIGHT, ";}.", buttonCls, "{width:", btn_size_style, ";height:", btn_size_style, ";padding:", BtnPadding[size], ";> span{background:", DT.T_BUTTON_SECONDARY_COLOR_BG_DEFAULT, ";box-shadow:", DT.T_SHADOW_BUTTON_DEFAULT, ";border:", BorderWidth[size], " solid ", DT.T_COLOR_LINE_DEFAULT_LIGHT, ";}}.", dotCls, "{background:", DT.T_SWITCH_COLOR_BG_DOT_OFF, ";}", !disabled && /*#__PURE__*/(0, _core.css)(":hover{.", innerCls, "{border-color:", DT.T_COLOR_LINE_DEFAULT_DARK, ";", checked && /*#__PURE__*/(0, _core.css)("border-color:", DT.T_SWITCH_COLOR_LINE_INNER_ON, ";;label:SwitchWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), "}};label:SwitchWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), " ", size === 'sm' && /*#__PURE__*/(0, _core.css)(".", onTipCls, ",.", offTipCls, "{display:none;};label:SwitchWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), ";", size === 'md' && /*#__PURE__*/(0, _core.css)(".", onTipCls, "{padding-right:", btn_size_style, ";}.", offTipCls, "{padding-left:", btn_size_style, ";};label:SwitchWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), ";", size === 'lg' && /*#__PURE__*/(0, _core.css)(".", onTipCls, "{padding-right:", btn_size_style, ";}.", offTipCls, "{padding-left:", btn_size_style, ";};label:SwitchWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), ";", checked ? /*#__PURE__*/(0, _core.css)(".", innerCls, "{color:", DT.T_COLOR_TEXT_SYSTEM_WHITE, ";border-color:", DT.T_SWITCH_COLOR_LINE_INNER_ON, ";background:", DT.T_SWITCH_COLOR_BG_INNER_ON, ";}.", buttonCls, "{left:100%;margin-left:-", btn_size_style, ";}.", dotCls, "{background:", DT.T_SWITCH_COLOR_BG_DOT_ON, ";}.", offTipCls, "{display:none;};label:SwitchWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")) : /*#__PURE__*/(0, _core.css)(".", onTipCls, "{display:none;};label:SwitchWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), ";", disabled && /*#__PURE__*/(0, _core.css)("cursor:default;.", innerCls, "{border-color:", DT.T_COLOR_LINE_DISABLED_LIGHT, ";background:", DT.T_COLOR_BG_DISABLED_DARK, ";color:", DT.T_COLOR_TEXT_SYSTEM_WHITE, ";}.", dotCls, "{background:", DT.T_SWITCH_COLOR_BG_DOT_DISABLED, ";};label:SwitchWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), ";;label:SwitchWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.SwitchWrap = SwitchWrap;