"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ErrorTipWrap = exports.DropZoneWrap = exports.ListWrap = exports.SelectorWrap = exports.UploadWrap = exports.dropzoneTipSubCls = exports.dropzoneTipMainCls = exports.dropzoneMaskTipCls = exports.dropzoneTipCls = exports.dragingCls = exports.dropzoneCls = exports.tipCls = exports.iconWrapCls = exports.unknownIconCls = exports.pdfIconCls = exports.textIconCls = exports.imageIconCls = exports.docsIconCls = exports.archiveIconCls = exports.iconCls = exports.separatorCls = exports.menuCls = exports.imageCls = exports.uploadingIconCLs = exports.uploadingTipCLs = exports.errorIconCls = exports.fullThumbnailCls = exports.thumbnailCls = exports.removeCls = exports.actionIconCls = exports.actionCls = exports.detailCls = exports.progressWrapCls = exports.progressCls = exports.nameCls = exports.previewAbleCls = exports.itemErrorCls = exports.itemCls = exports.errorCls = exports.listWrapCls = exports.cardListCls = exports.listCls = exports.selectorCls = exports.prefixCls = void 0;

var _newArrowCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/newArrowCheck"));

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _core = require("@emotion/core");

var _withProps = _interopRequireDefault(require("../../../utils/withProps"));

var _config = _interopRequireDefault(require("../../../config"));

var _style = require("../../../style");

var _this = void 0;

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

var _prefixCls = _config.default.prefixCls;
var prefixCls = _prefixCls + '-upload'; // selector

exports.prefixCls = prefixCls;
var selectorCls = prefixCls + '-selector'; // list

exports.selectorCls = selectorCls;
var listCls = prefixCls + '-list';
exports.listCls = listCls;
var cardListCls = listCls + '-card-list';
exports.cardListCls = cardListCls;
var listWrapCls = listCls + '-wrap';
exports.listWrapCls = listWrapCls;
var errorCls = prefixCls + '-error';
exports.errorCls = errorCls;
var itemCls = prefixCls + '-item';
exports.itemCls = itemCls;
var itemErrorCls = itemCls + '-error';
exports.itemErrorCls = itemErrorCls;
var previewAbleCls = itemCls + '-preview-able';
exports.previewAbleCls = previewAbleCls;
var nameCls = prefixCls + '-name';
exports.nameCls = nameCls;
var progressCls = prefixCls + '-progress';
exports.progressCls = progressCls;
var progressWrapCls = progressCls + '-wrap';
exports.progressWrapCls = progressWrapCls;
var detailCls = prefixCls + '-detail';
exports.detailCls = detailCls;
var actionCls = prefixCls + '-action';
exports.actionCls = actionCls;
var actionIconCls = actionCls + '-icon';
exports.actionIconCls = actionIconCls;
var removeCls = prefixCls + '-remove';
exports.removeCls = removeCls;
var thumbnailCls = prefixCls + '-thumbnail';
exports.thumbnailCls = thumbnailCls;
var fullThumbnailCls = thumbnailCls + '-full';
exports.fullThumbnailCls = fullThumbnailCls;
var errorIconCls = errorCls + '-icon';
exports.errorIconCls = errorIconCls;
var uploadingTipCLs = prefixCls + '-uploading-tip';
exports.uploadingTipCLs = uploadingTipCLs;
var uploadingIconCLs = uploadingTipCLs + '-icon';
exports.uploadingIconCLs = uploadingIconCLs;
var imageCls = prefixCls + '-image';
exports.imageCls = imageCls;
var menuCls = prefixCls + '-menu';
exports.menuCls = menuCls;
var separatorCls = prefixCls + '-separator'; // icons

exports.separatorCls = separatorCls;
var iconCls = prefixCls + '-icon';
exports.iconCls = iconCls;
var archiveIconCls = iconCls + '-archive';
exports.archiveIconCls = archiveIconCls;
var docsIconCls = iconCls + '-docs';
exports.docsIconCls = docsIconCls;
var imageIconCls = iconCls + '-image';
exports.imageIconCls = imageIconCls;
var textIconCls = iconCls + '-text';
exports.textIconCls = textIconCls;
var pdfIconCls = iconCls + '-pdf';
exports.pdfIconCls = pdfIconCls;
var unknownIconCls = iconCls + '-unknown';
exports.unknownIconCls = unknownIconCls;
var iconWrapCls = iconCls + '-wrap';
exports.iconWrapCls = iconWrapCls;
var tipCls = prefixCls + '-tip'; // dropzone

exports.tipCls = tipCls;
var dropzoneCls = prefixCls + '-dropzone';
exports.dropzoneCls = dropzoneCls;
var dragingCls = prefixCls + '-draging';
exports.dragingCls = dragingCls;
var dropzoneTipCls = dropzoneCls + '-tip';
exports.dropzoneTipCls = dropzoneTipCls;
var dropzoneMaskTipCls = dropzoneCls + '-tip-mask';
exports.dropzoneMaskTipCls = dropzoneMaskTipCls;
var dropzoneTipMainCls = dropzoneTipCls + '-main';
exports.dropzoneTipMainCls = dropzoneTipMainCls;
var dropzoneTipSubCls = dropzoneTipCls + '-sub';
exports.dropzoneTipSubCls = dropzoneTipSubCls;
var UploadWrap = (0, _withProps.default)({
  className: prefixCls
})(( /*#__PURE__*/0, _styledBase.default)('div', {
  target: "e1j8vdr50",
  label: "UploadWrap"
})(".", selectorCls, " + .", listWrapCls, ",.", selectorCls, " + .", dropzoneCls, "{margin-top:12px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")));
exports.UploadWrap = UploadWrap;

var _ref = process.env.NODE_ENV === "production" ? {
  name: "ruyjmz-SelectorWrap",
  styles: "pointer-events:none;;label:SelectorWrap;"
} : {
  name: "ruyjmz-SelectorWrap",
  styles: "pointer-events:none;;label:SelectorWrap;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1VwbG9hZC9zdHlsZS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFnRmUiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVXBsb2FkL3N0eWxlL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5cbmltcG9ydCB3aXRoUHJvcHMgZnJvbSAnc3JjL3V0aWxzL3dpdGhQcm9wcyc7XG5pbXBvcnQgY29uZmlnIGZyb20gJ3NyYy9jb25maWcnO1xuaW1wb3J0IHsgY2xlYXJGaXhNaXhpbiB9IGZyb20gJ3NyYy9zdHlsZSc7XG5cbmNvbnN0IHsgcHJlZml4Q2xzOiBfcHJlZml4Q2xzIH0gPSBjb25maWc7XG5leHBvcnQgY29uc3QgcHJlZml4Q2xzID0gX3ByZWZpeENscyArICctdXBsb2FkJztcblxuLy8gc2VsZWN0b3JcbmV4cG9ydCBjb25zdCBzZWxlY3RvckNscyA9IHByZWZpeENscyArICctc2VsZWN0b3InO1xuXG4vLyBsaXN0XG5leHBvcnQgY29uc3QgbGlzdENscyA9IHByZWZpeENscyArICctbGlzdCc7XG5leHBvcnQgY29uc3QgY2FyZExpc3RDbHMgPSBsaXN0Q2xzICsgJy1jYXJkLWxpc3QnO1xuZXhwb3J0IGNvbnN0IGxpc3RXcmFwQ2xzID0gbGlzdENscyArICctd3JhcCc7XG5leHBvcnQgY29uc3QgZXJyb3JDbHMgPSBwcmVmaXhDbHMgKyAnLWVycm9yJztcbmV4cG9ydCBjb25zdCBpdGVtQ2xzID0gcHJlZml4Q2xzICsgJy1pdGVtJztcbmV4cG9ydCBjb25zdCBpdGVtRXJyb3JDbHMgPSBpdGVtQ2xzICsgJy1lcnJvcic7XG5leHBvcnQgY29uc3QgcHJldmlld0FibGVDbHMgPSBpdGVtQ2xzICsgJy1wcmV2aWV3LWFibGUnO1xuZXhwb3J0IGNvbnN0IG5hbWVDbHMgPSBwcmVmaXhDbHMgKyAnLW5hbWUnO1xuZXhwb3J0IGNvbnN0IHByb2dyZXNzQ2xzID0gcHJlZml4Q2xzICsgJy1wcm9ncmVzcyc7XG5leHBvcnQgY29uc3QgcHJvZ3Jlc3NXcmFwQ2xzID0gcHJvZ3Jlc3NDbHMgKyAnLXdyYXAnO1xuZXhwb3J0IGNvbnN0IGRldGFpbENscyA9IHByZWZpeENscyArICctZGV0YWlsJztcbmV4cG9ydCBjb25zdCBhY3Rpb25DbHMgPSBwcmVmaXhDbHMgKyAnLWFjdGlvbic7XG5leHBvcnQgY29uc3QgYWN0aW9uSWNvbkNscyA9IGFjdGlvbkNscyArICctaWNvbic7XG5leHBvcnQgY29uc3QgcmVtb3ZlQ2xzID0gcHJlZml4Q2xzICsgJy1yZW1vdmUnO1xuZXhwb3J0IGNvbnN0IHRodW1ibmFpbENscyA9IHByZWZpeENscyArICctdGh1bWJuYWlsJztcbmV4cG9ydCBjb25zdCBmdWxsVGh1bWJuYWlsQ2xzID0gdGh1bWJuYWlsQ2xzICsgJy1mdWxsJztcbmV4cG9ydCBjb25zdCBlcnJvckljb25DbHMgPSBlcnJvckNscyArICctaWNvbic7XG5leHBvcnQgY29uc3QgdXBsb2FkaW5nVGlwQ0xzID0gcHJlZml4Q2xzICsgJy11cGxvYWRpbmctdGlwJztcbmV4cG9ydCBjb25zdCB1cGxvYWRpbmdJY29uQ0xzID0gdXBsb2FkaW5nVGlwQ0xzICsgJy1pY29uJztcbmV4cG9ydCBjb25zdCBpbWFnZUNscyA9IHByZWZpeENscyArICctaW1hZ2UnO1xuZXhwb3J0IGNvbnN0IG1lbnVDbHMgPSBwcmVmaXhDbHMgKyAnLW1lbnUnO1xuZXhwb3J0IGNvbnN0IHNlcGFyYXRvckNscyA9IHByZWZpeENscyArICctc2VwYXJhdG9yJztcblxuLy8gaWNvbnNcbmV4cG9ydCBjb25zdCBpY29uQ2xzID0gcHJlZml4Q2xzICsgJy1pY29uJztcbmV4cG9ydCBjb25zdCBhcmNoaXZlSWNvbkNscyA9IGljb25DbHMgKyAnLWFyY2hpdmUnO1xuZXhwb3J0IGNvbnN0IGRvY3NJY29uQ2xzID0gaWNvbkNscyArICctZG9jcyc7XG5leHBvcnQgY29uc3QgaW1hZ2VJY29uQ2xzID0gaWNvbkNscyArICctaW1hZ2UnO1xuZXhwb3J0IGNvbnN0IHRleHRJY29uQ2xzID0gaWNvbkNscyArICctdGV4dCc7XG5leHBvcnQgY29uc3QgcGRmSWNvbkNscyA9IGljb25DbHMgKyAnLXBkZic7XG5leHBvcnQgY29uc3QgdW5rbm93bkljb25DbHMgPSBpY29uQ2xzICsgJy11bmtub3duJztcbmV4cG9ydCBjb25zdCBpY29uV3JhcENscyA9IGljb25DbHMgKyAnLXdyYXAnO1xuZXhwb3J0IGNvbnN0IHRpcENscyA9IHByZWZpeENscyArICctdGlwJztcblxuLy8gZHJvcHpvbmVcbmV4cG9ydCBjb25zdCBkcm9wem9uZUNscyA9IHByZWZpeENscyArICctZHJvcHpvbmUnO1xuZXhwb3J0IGNvbnN0IGRyYWdpbmdDbHMgPSBwcmVmaXhDbHMgKyAnLWRyYWdpbmcnO1xuZXhwb3J0IGNvbnN0IGRyb3B6b25lVGlwQ2xzID0gZHJvcHpvbmVDbHMgKyAnLXRpcCc7XG5leHBvcnQgY29uc3QgZHJvcHpvbmVNYXNrVGlwQ2xzID0gZHJvcHpvbmVDbHMgKyAnLXRpcC1tYXNrJztcbmV4cG9ydCBjb25zdCBkcm9wem9uZVRpcE1haW5DbHMgPSBkcm9wem9uZVRpcENscyArICctbWFpbic7XG5leHBvcnQgY29uc3QgZHJvcHpvbmVUaXBTdWJDbHMgPSBkcm9wem9uZVRpcENscyArICctc3ViJztcblxuZXhwb3J0IGNvbnN0IFVwbG9hZFdyYXAgPSB3aXRoUHJvcHMoe1xuICAgIGNsYXNzTmFtZTogcHJlZml4Q2xzXG59KShcbiAgICBzdHlsZWQoJ2RpdicpYFxuICAgICAgICAuJHtzZWxlY3RvckNsc30gKyAuJHtsaXN0V3JhcENsc30sIC4ke3NlbGVjdG9yQ2xzfSArIC4ke2Ryb3B6b25lQ2xzfSB7XG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAxMnB4O1xuICAgICAgICB9XG4gICAgYFxuKTtcblxuZXhwb3J0IGNvbnN0IFNlbGVjdG9yV3JhcCA9IHdpdGhQcm9wcyh7XG4gICAgY2xhc3NOYW1lOiBzZWxlY3RvckNsc1xufSkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGRpc2FibGVkLFxuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuXG4gICAgICAgICAgICAke2Rpc2FibGVkICYmXG4gICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICAgICAgICBgfTtcblxuICAgICAgICAgICAgLiR7dGlwQ2xzfSB7XG4gICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDVweDtcbiAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfREVGQVVMVF9MSUdIVH07XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBMaXN0V3JhcCA9IHdpdGhQcm9wcyh7XG4gICAgY2xhc3NOYW1lOiBsaXN0V3JhcENsc1xufSkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfSxcbiAgICAgICAgICAgIGN1c3RvbVN0eWxlID0ge31cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBtYXgtaGVpZ2h0OiAke2N1c3RvbVN0eWxlLmxpc3RNYXhIZWlnaHQgfHwgJzI0MHB4J307XG4gICAgICAgICAgICBvdmVyZmxvdzogYXV0bztcbiAgICAgICAgICAgID4gZGl2IHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAuJHtsaXN0Q2xzfSB7XG4gICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfQ09MT1JfQkdfREVGQVVMVF9EQVJLfTtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiA0cHggMTZweDtcblxuICAgICAgICAgICAgICAgIC4ke2l0ZW1DbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdGFibGU7XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlLWxheW91dDogZml4ZWQ7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJHtEVC5UX0NPTE9SX0xJTkVfREVGQVVMVF9MSUdIVH07XG4gICAgICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiA4cHggMDtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSS307XG5cbiAgICAgICAgICAgICAgICAgICAgJjpsYXN0LW9mLXR5cGUge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC4ke3RodW1ibmFpbENsc30ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdGFibGUtY2VsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDRweCAxNnB4IDRweCAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC4ke2RldGFpbENsc30ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdGFibGUtY2VsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLiR7YWN0aW9uQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiB0YWJsZS1jZWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA4cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwcHg7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC4ke3JlbW92ZUNsc30ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDEycHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0xJR0hUfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAmLiR7cHJldmlld0FibGVDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIDpob3ZlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLiR7ZGV0YWlsQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICYuJHtpdGVtRXJyb3JDbHN9LiR7aXRlbUVycm9yQ2xzfS4ke2l0ZW1FcnJvckNsc30ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLiR7ZGV0YWlsQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX1JFTUFSS19EQVJLfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC4ke2ljb25XcmFwQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0VSUk9SX0RBUkt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuJHtpY29uQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfTk9STUFMfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLiR7ZXJyb3JDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDRweDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAuJHtlcnJvckljb25DbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9URVhUX0VSUk9SfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogNHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAuJHt1cGxvYWRpbmdUaXBDTHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9SRU1BUktfREFSS307XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLiR7dXBsb2FkaW5nSWNvbkNMc30ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogJHtEVC5UX0NPTE9SX1RFWFRfUkVNQVJLX0RBUkt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA0cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAuJHtjYXJkTGlzdENsc30ge1xuICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogLTE2cHg7XG4gICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogLTE2cHg7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICAgICAgICAke2NsZWFyRml4TWl4aW59O1xuXG4gICAgICAgICAgICAgICAgLiR7aXRlbUNsc30ge1xuICAgICAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxNDBweDtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxNDBweDtcbiAgICAgICAgICAgICAgICAgICAgZmxvYXQ6IGxlZnQ7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTZweDtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHtEVC5UX0NPTE9SX0xJTkVfREVGQVVMVF9MSUdIVH07XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfTk9STUFMfTtcblxuICAgICAgICAgICAgICAgICAgICAuJHt0aHVtYm5haWxDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAzMnB4IGF1dG8gMjRweCBhdXRvO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC4ke25hbWVDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDAgMTJweDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAuJHtwcm9ncmVzc1dyYXBDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDAgMThweDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAuJHtlcnJvckNsc30ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMCAxMnB4O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgJi4ke2l0ZW1FcnJvckNsc30uJHtpdGVtRXJyb3JDbHN9LiR7aXRlbUVycm9yQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItY29sb3I6ICR7RFQuVF9DT0xPUl9MSU5FX0VSUk9SX0RBUkt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0VSUk9SX0xJR0hUfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC4ke21lbnVDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3R0b206IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfTU9EQUxfQ09MT1JfTEFZRVJfREVGQVVMVH07XG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAuJHtuYW1lQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX1NZU1RFTV9XSElURX07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAuJHthY3Rpb25DbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDQwcHggYXV0byAzMHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC4ke2FjdGlvbkljb25DbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDAgMTZweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogJHtEVC5UX0NPTE9SX1RFWFRfU1lTVEVNX1dISVRFfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC4ke2FjdGlvbkljb25DbHN9ICsgLiR7YWN0aW9uSWNvbkNsc30ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC4ke3NlcGFyYXRvckNsc30ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMXB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjRweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfQ09MT1JfVEVYVF9TWVNURU1fV0hJVEV9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOmhvdmVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4ke21lbnVDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAuJHtmdWxsVGh1bWJuYWlsQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC4ke2Vycm9yQ2xzfSB7XG4gICAgICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0VSUk9SfTtcbiAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMjBweDtcbiAgICAgICAgICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICAgICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC4ke3Byb2dyZXNzV3JhcENsc30ge1xuICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgICAgIC4ke3Byb2dyZXNzQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAuJHtuYW1lQ2xzfSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgICAgICAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLiR7dGh1bWJuYWlsQ2xzfSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICAgICAgICB3aWR0aDogMzhweDtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDM4cHg7XG4gICAgICAgICAgICAgICAgLiR7aW1hZ2VDbHN9LCAuJHtpY29uV3JhcENsc30ge1xuICAgICAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC4ke2ltYWdlQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHdoaXRlIGNlbnRlciBjZW50ZXIgbm8tcmVwZWF0O1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAuJHtpY29uV3JhcENsc30ge1xuICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMzZweDtcbiAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAke0RULlRfQ09MT1JfTElORV9ERUZBVUxUX0xJR0hUfTtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfTk9STUFMfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC4ke2ltYWdlSWNvbkNsc30ge1xuICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9MRUdFTkRfQ1lBTl81fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC4ke2FyY2hpdmVJY29uQ2xzfSB7XG4gICAgICAgICAgICAgICAgZmlsbDogJHtEVC5UX0NPTE9SX0xFR0VORF9PUkFOR0VfNX07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuJHtkb2NzSWNvbkNsc30ge1xuICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9MRUdFTkRfQkxVRV81fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC4ke3Vua25vd25JY29uQ2xzfSB7XG4gICAgICAgICAgICAgICAgZmlsbDogJHtEVC5UX0NPTE9SX0xFR0VORF9QVVJQTEVfNX07XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBEcm9wWm9uZVdyYXAgPSB3aXRoUHJvcHMoe1xuICAgIGNsYXNzTmFtZTogZHJvcHpvbmVDbHNcbn0pKFxuICAgIHN0eWxlZCgnZGl2JykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH0sXG4gICAgICAgICAgICBjdXN0b21TdHlsZSA9IHt9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgYm9yZGVyOiAxcHggZGFzaGVkICR7RFQuVF9DT0xPUl9MSU5FX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgICAgICB0cmFuc2l0aW9uOiAwLjNzIGJvcmRlci1jb2xvcjtcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19ERUZBVUxUX0RBUkt9O1xuXG4gICAgICAgICAgICAuJHtsaXN0V3JhcENsc30ge1xuICAgICAgICAgICAgICAgIG1pbi1oZWlnaHQ6IDIxMHB4O1xuICAgICAgICAgICAgICAgIG1heC1oZWlnaHQ6ICR7Y3VzdG9tU3R5bGUubGlzdE1heEhlaWdodCB8fCAnMzAwcHgnfTtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogYXV0bztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC4ke2NhcmRMaXN0Q2xzfSB7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogMjRweDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLiR7ZHJvcHpvbmVUaXBDbHN9IHtcbiAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiA0MHB4IDA7XG4gICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IDAuM3MgYmFja2dyb3VuZC1jb2xvcjtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfQ09MT1JfQkdfREVGQVVMVF9MSUdIVH07XG5cbiAgICAgICAgICAgICAgICAuJHtpY29uQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IDAuM3MgZmlsbDtcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogJHtEVC5UX0NPTE9SX1RFWFRfUkVNQVJLX0xJR0hUfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLiR7ZHJvcHpvbmVUaXBNYWluQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyNnB4O1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA0cHg7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDI0cHg7XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAuJHtkcm9wem9uZVRpcFN1YkNsc30ge1xuICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMjJweDtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfREVGQVVMVF9MSUdIVH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLiR7ZHJvcHpvbmVNYXNrVGlwQ2xzfSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgdG9wOiAwO1xuICAgICAgICAgICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICAgICAgICAgIGJvdHRvbTogMDtcbiAgICAgICAgICAgICAgICBsZWZ0OiAwO1xuXG4gICAgICAgICAgICAgICAgLiR7ZHJvcHpvbmVUaXBDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfTU9EQUxfQ09MT1JfTEFZRVJfREVGQVVMVH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAmLiR7ZHJhZ2luZ0Nsc30ge1xuICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogJHtEVC5UX0NPTE9SX0xJTkVfUFJJTUFSWV9ERUZBVUxUfTtcblxuICAgICAgICAgICAgICAgIC4ke2Ryb3B6b25lVGlwQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgICAgICAgICAuJHtpY29uQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiAke0RULlRfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFR9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC4ke2Ryb3B6b25lTWFza1RpcENsc30ge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcblxuICAgICAgICAgICAgICAgICAgICAuJHtkcm9wem9uZVRpcENsc30ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX01PREFMX0NPTE9SX0xBWUVSX0RFRkFVTFR9O1xuICAgICAgICAgICAgICAgICAgICAgICAgLiR7aWNvbkNsc30ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9URVhUX1NZU1RFTV9XSElURX07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAuJHtkcm9wem9uZVRpcE1haW5DbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfU1lTVEVNX1dISVRFfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC4ke2Ryb3B6b25lVGlwU3ViQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX1NZU1RFTV9XSElURX07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBFcnJvclRpcFdyYXAgPSBzdHlsZWQuZGl2YFxuICAgIHBhZGRpbmc6IDE2cHg7XG5gO1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var SelectorWrap = (0, _withProps.default)({
  className: selectorCls
})(( /*#__PURE__*/0, _styledBase.default)('div', {
  target: "e1j8vdr51",
  label: "SelectorWrap"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var disabled = props.disabled,
      DT = props.theme.designTokens;
  return /*#__PURE__*/(0, _core.css)("display:inline-block;cursor:pointer;", disabled && _ref, ";.", tipCls, "{margin-left:5px;color:", DT.T_COLOR_TEXT_DEFAULT_LIGHT, ";};label:SelectorWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.SelectorWrap = SelectorWrap;
var ListWrap = (0, _withProps.default)({
  className: listWrapCls
})(( /*#__PURE__*/0, _styledBase.default)('div', {
  target: "e1j8vdr52",
  label: "ListWrap"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var DT = props.theme.designTokens,
      _props$customStyle = props.customStyle,
      customStyle = _props$customStyle === void 0 ? {} : _props$customStyle;
  return /*#__PURE__*/(0, _core.css)("max-height:", customStyle.listMaxHeight || '240px', ";overflow:auto;> div{overflow:hidden;}.", listCls, "{box-sizing:border-box;background:", DT.T_COLOR_BG_DEFAULT_DARK, ";padding:4px 16px;.", itemCls, "{display:table;table-layout:fixed;width:100%;border-bottom:1px solid ", DT.T_COLOR_LINE_DEFAULT_LIGHT, ";line-height:20px;padding:8px 0;color:", DT.T_COLOR_TEXT_DEFAULT_DARK, ";&:last-of-type{border-bottom:none;}.", thumbnailCls, "{display:table-cell;padding:4px 16px 4px 0;}.", detailCls, "{display:table-cell;vertical-align:middle;}.", actionCls, "{display:table-cell;padding-left:8px;width:100px;white-space:nowrap;text-align:right;vertical-align:middle;}.", removeCls, "{cursor:pointer;margin-left:12px;fill:", DT.T_COLOR_TEXT_DEFAULT_LIGHT, ";}&.", previewAbleCls, "{:hover{.", detailCls, "{cursor:pointer;color:", DT.T_COLOR_TEXT_PRIMARY_DEFAULT, ";}}}&.", itemErrorCls, ".", itemErrorCls, ".", itemErrorCls, "{.", detailCls, "{color:", DT.T_COLOR_TEXT_REMARK_DARK, ";}.", iconWrapCls, "{background:", DT.T_COLOR_BG_ERROR_DARK, ";border:none;.", iconCls, "{fill:", DT.T_COLOR_TEXT_DEFAULT_NORMAL, ";}}}.", errorCls, "{margin-top:4px;}.", errorIconCls, "{fill:", DT.T_COLOR_TEXT_ERROR, ";margin-right:4px;vertical-align:middle;}.", uploadingTipCLs, "{color:", DT.T_COLOR_TEXT_REMARK_DARK, ";}.", uploadingIconCLs, "{fill:", DT.T_COLOR_TEXT_REMARK_DARK, ";margin-right:4px;vertical-align:middle;}}}.", cardListCls, "{margin-right:-16px;margin-bottom:-16px;overflow:hidden;", _style.clearFixMixin, ";.", itemCls, "{box-sizing:border-box;position:relative;width:140px;height:140px;float:left;margin-right:16px;margin-bottom:16px;border:1px solid ", DT.T_COLOR_LINE_DEFAULT_LIGHT, ";border-radius:4px;background:", DT.T_COLOR_BG_DEFAULT_NORMAL, ";.", thumbnailCls, "{display:block;margin:32px auto 24px auto;}.", nameCls, "{text-align:center;padding:0 12px;}.", progressWrapCls, "{padding:0 18px;}.", errorCls, "{text-align:center;padding:0 12px;}&.", itemErrorCls, ".", itemErrorCls, ".", itemErrorCls, "{border-color:", DT.T_COLOR_LINE_ERROR_DARK, ";background:", DT.T_COLOR_BG_ERROR_LIGHT, ";}.", menuCls, "{display:none;position:absolute;top:0;left:0;right:0;bottom:0;background:", DT.T_MODAL_COLOR_LAYER_DEFAULT, ";border-radius:4px;.", nameCls, "{color:", DT.T_COLOR_TEXT_SYSTEM_WHITE, ";}.", actionCls, "{line-height:24px;margin:40px auto 30px;text-align:center;}.", actionIconCls, "{margin:0 16px;cursor:pointer;fill:", DT.T_COLOR_TEXT_SYSTEM_WHITE, ";}.", actionIconCls, " + .", actionIconCls, "{position:relative;}.", separatorCls, "{display:inline-block;width:1px;height:24px;background:", DT.T_COLOR_TEXT_SYSTEM_WHITE, ";vertical-align:middle;}}:hover{.", menuCls, "{display:block;}}.", fullThumbnailCls, "{width:100%;height:100%;margin:0;}}}.", errorCls, "{color:", DT.T_COLOR_TEXT_ERROR, ";line-height:20px;text-overflow:ellipsis;overflow:hidden;white-space:nowrap;}.", progressWrapCls, "{line-height:20px;.", progressCls, "{display:inline-block;width:100%;vertical-align:middle;}}.", nameCls, "{display:block;line-height:20px;text-overflow:ellipsis;overflow:hidden;white-space:nowrap;}.", thumbnailCls, "{overflow:hidden;width:38px;height:38px;.", imageCls, ",.", iconWrapCls, "{box-sizing:border-box;width:100%;height:100%;border-radius:4px;}.", imageCls, "{background:white center center no-repeat;background-size:cover;}.", iconWrapCls, "{line-height:36px;text-align:center;border:1px solid ", DT.T_COLOR_LINE_DEFAULT_LIGHT, ";background:", DT.T_COLOR_BG_DEFAULT_NORMAL, ";}}.", imageIconCls, "{fill:", DT.T_COLOR_LEGEND_CYAN_5, ";}.", archiveIconCls, "{fill:", DT.T_COLOR_LEGEND_ORANGE_5, ";}.", docsIconCls, "{fill:", DT.T_COLOR_LEGEND_BLUE_5, ";}.", unknownIconCls, "{fill:", DT.T_COLOR_LEGEND_PURPLE_5, ";};label:ListWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.ListWrap = ListWrap;
var DropZoneWrap = (0, _withProps.default)({
  className: dropzoneCls
})(( /*#__PURE__*/0, _styledBase.default)('div', {
  target: "e1j8vdr53",
  label: "DropZoneWrap"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var DT = props.theme.designTokens,
      _props$customStyle2 = props.customStyle,
      customStyle = _props$customStyle2 === void 0 ? {} : _props$customStyle2;
  return /*#__PURE__*/(0, _core.css)("border:1px dashed ", DT.T_COLOR_LINE_DEFAULT_DARK, ";border-radius:4px;transition:0.3s border-color;position:relative;background:", DT.T_COLOR_BG_DEFAULT_DARK, ";.", listWrapCls, "{min-height:210px;max-height:", customStyle.listMaxHeight || '300px', ";overflow:auto;}.", cardListCls, "{padding:24px;}.", dropzoneTipCls, "{box-sizing:border-box;height:100%;padding:40px 0;text-align:center;transition:0.3s background-color;background:", DT.T_COLOR_BG_DEFAULT_LIGHT, ";.", iconCls, "{transition:0.3s fill;fill:", DT.T_COLOR_TEXT_REMARK_LIGHT, ";}.", dropzoneTipMainCls, "{line-height:26px;margin-bottom:4px;margin-top:24px;font-size:18px;color:", DT.T_COLOR_TEXT_DEFAULT_DARK, ";font-weight:bold;}.", dropzoneTipSubCls, "{line-height:22px;font-size:14px;color:", DT.T_COLOR_TEXT_DEFAULT_LIGHT, ";}}.", dropzoneMaskTipCls, "{display:none;position:absolute;top:0;right:0;bottom:0;left:0;.", dropzoneTipCls, "{height:100%;box-sizing:border-box;background:", DT.T_MODAL_COLOR_LAYER_DEFAULT, ";}}&.", dragingCls, "{border-color:", DT.T_COLOR_LINE_PRIMARY_DEFAULT, ";.", dropzoneTipCls, "{background:", DT.T_COLOR_BG_DEFAULT_DARK, ";.", iconCls, "{fill:", DT.T_COLOR_TEXT_PRIMARY_DEFAULT, ";}}.", dropzoneMaskTipCls, "{display:block;.", dropzoneTipCls, "{background:", DT.T_MODAL_COLOR_LAYER_DEFAULT, ";.", iconCls, "{fill:", DT.T_COLOR_TEXT_SYSTEM_WHITE, ";}.", dropzoneTipMainCls, "{color:", DT.T_COLOR_TEXT_SYSTEM_WHITE, ";}.", dropzoneTipSubCls, "{color:", DT.T_COLOR_TEXT_SYSTEM_WHITE, ";}}}};label:DropZoneWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1VwbG9hZC9zdHlsZS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFxVmtCIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1VwbG9hZC9zdHlsZS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuXG5pbXBvcnQgd2l0aFByb3BzIGZyb20gJ3NyYy91dGlscy93aXRoUHJvcHMnO1xuaW1wb3J0IGNvbmZpZyBmcm9tICdzcmMvY29uZmlnJztcbmltcG9ydCB7IGNsZWFyRml4TWl4aW4gfSBmcm9tICdzcmMvc3R5bGUnO1xuXG5jb25zdCB7IHByZWZpeENsczogX3ByZWZpeENscyB9ID0gY29uZmlnO1xuZXhwb3J0IGNvbnN0IHByZWZpeENscyA9IF9wcmVmaXhDbHMgKyAnLXVwbG9hZCc7XG5cbi8vIHNlbGVjdG9yXG5leHBvcnQgY29uc3Qgc2VsZWN0b3JDbHMgPSBwcmVmaXhDbHMgKyAnLXNlbGVjdG9yJztcblxuLy8gbGlzdFxuZXhwb3J0IGNvbnN0IGxpc3RDbHMgPSBwcmVmaXhDbHMgKyAnLWxpc3QnO1xuZXhwb3J0IGNvbnN0IGNhcmRMaXN0Q2xzID0gbGlzdENscyArICctY2FyZC1saXN0JztcbmV4cG9ydCBjb25zdCBsaXN0V3JhcENscyA9IGxpc3RDbHMgKyAnLXdyYXAnO1xuZXhwb3J0IGNvbnN0IGVycm9yQ2xzID0gcHJlZml4Q2xzICsgJy1lcnJvcic7XG5leHBvcnQgY29uc3QgaXRlbUNscyA9IHByZWZpeENscyArICctaXRlbSc7XG5leHBvcnQgY29uc3QgaXRlbUVycm9yQ2xzID0gaXRlbUNscyArICctZXJyb3InO1xuZXhwb3J0IGNvbnN0IHByZXZpZXdBYmxlQ2xzID0gaXRlbUNscyArICctcHJldmlldy1hYmxlJztcbmV4cG9ydCBjb25zdCBuYW1lQ2xzID0gcHJlZml4Q2xzICsgJy1uYW1lJztcbmV4cG9ydCBjb25zdCBwcm9ncmVzc0NscyA9IHByZWZpeENscyArICctcHJvZ3Jlc3MnO1xuZXhwb3J0IGNvbnN0IHByb2dyZXNzV3JhcENscyA9IHByb2dyZXNzQ2xzICsgJy13cmFwJztcbmV4cG9ydCBjb25zdCBkZXRhaWxDbHMgPSBwcmVmaXhDbHMgKyAnLWRldGFpbCc7XG5leHBvcnQgY29uc3QgYWN0aW9uQ2xzID0gcHJlZml4Q2xzICsgJy1hY3Rpb24nO1xuZXhwb3J0IGNvbnN0IGFjdGlvbkljb25DbHMgPSBhY3Rpb25DbHMgKyAnLWljb24nO1xuZXhwb3J0IGNvbnN0IHJlbW92ZUNscyA9IHByZWZpeENscyArICctcmVtb3ZlJztcbmV4cG9ydCBjb25zdCB0aHVtYm5haWxDbHMgPSBwcmVmaXhDbHMgKyAnLXRodW1ibmFpbCc7XG5leHBvcnQgY29uc3QgZnVsbFRodW1ibmFpbENscyA9IHRodW1ibmFpbENscyArICctZnVsbCc7XG5leHBvcnQgY29uc3QgZXJyb3JJY29uQ2xzID0gZXJyb3JDbHMgKyAnLWljb24nO1xuZXhwb3J0IGNvbnN0IHVwbG9hZGluZ1RpcENMcyA9IHByZWZpeENscyArICctdXBsb2FkaW5nLXRpcCc7XG5leHBvcnQgY29uc3QgdXBsb2FkaW5nSWNvbkNMcyA9IHVwbG9hZGluZ1RpcENMcyArICctaWNvbic7XG5leHBvcnQgY29uc3QgaW1hZ2VDbHMgPSBwcmVmaXhDbHMgKyAnLWltYWdlJztcbmV4cG9ydCBjb25zdCBtZW51Q2xzID0gcHJlZml4Q2xzICsgJy1tZW51JztcbmV4cG9ydCBjb25zdCBzZXBhcmF0b3JDbHMgPSBwcmVmaXhDbHMgKyAnLXNlcGFyYXRvcic7XG5cbi8vIGljb25zXG5leHBvcnQgY29uc3QgaWNvbkNscyA9IHByZWZpeENscyArICctaWNvbic7XG5leHBvcnQgY29uc3QgYXJjaGl2ZUljb25DbHMgPSBpY29uQ2xzICsgJy1hcmNoaXZlJztcbmV4cG9ydCBjb25zdCBkb2NzSWNvbkNscyA9IGljb25DbHMgKyAnLWRvY3MnO1xuZXhwb3J0IGNvbnN0IGltYWdlSWNvbkNscyA9IGljb25DbHMgKyAnLWltYWdlJztcbmV4cG9ydCBjb25zdCB0ZXh0SWNvbkNscyA9IGljb25DbHMgKyAnLXRleHQnO1xuZXhwb3J0IGNvbnN0IHBkZkljb25DbHMgPSBpY29uQ2xzICsgJy1wZGYnO1xuZXhwb3J0IGNvbnN0IHVua25vd25JY29uQ2xzID0gaWNvbkNscyArICctdW5rbm93bic7XG5leHBvcnQgY29uc3QgaWNvbldyYXBDbHMgPSBpY29uQ2xzICsgJy13cmFwJztcbmV4cG9ydCBjb25zdCB0aXBDbHMgPSBwcmVmaXhDbHMgKyAnLXRpcCc7XG5cbi8vIGRyb3B6b25lXG5leHBvcnQgY29uc3QgZHJvcHpvbmVDbHMgPSBwcmVmaXhDbHMgKyAnLWRyb3B6b25lJztcbmV4cG9ydCBjb25zdCBkcmFnaW5nQ2xzID0gcHJlZml4Q2xzICsgJy1kcmFnaW5nJztcbmV4cG9ydCBjb25zdCBkcm9wem9uZVRpcENscyA9IGRyb3B6b25lQ2xzICsgJy10aXAnO1xuZXhwb3J0IGNvbnN0IGRyb3B6b25lTWFza1RpcENscyA9IGRyb3B6b25lQ2xzICsgJy10aXAtbWFzayc7XG5leHBvcnQgY29uc3QgZHJvcHpvbmVUaXBNYWluQ2xzID0gZHJvcHpvbmVUaXBDbHMgKyAnLW1haW4nO1xuZXhwb3J0IGNvbnN0IGRyb3B6b25lVGlwU3ViQ2xzID0gZHJvcHpvbmVUaXBDbHMgKyAnLXN1Yic7XG5cbmV4cG9ydCBjb25zdCBVcGxvYWRXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IHByZWZpeENsc1xufSkoXG4gICAgc3R5bGVkKCdkaXYnKWBcbiAgICAgICAgLiR7c2VsZWN0b3JDbHN9ICsgLiR7bGlzdFdyYXBDbHN9LCAuJHtzZWxlY3RvckNsc30gKyAuJHtkcm9wem9uZUNsc30ge1xuICAgICAgICAgICAgbWFyZ2luLXRvcDogMTJweDtcbiAgICAgICAgfVxuICAgIGBcbik7XG5cbmV4cG9ydCBjb25zdCBTZWxlY3RvcldyYXAgPSB3aXRoUHJvcHMoe1xuICAgIGNsYXNzTmFtZTogc2VsZWN0b3JDbHNcbn0pKFxuICAgIHN0eWxlZCgnZGl2JykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcblxuICAgICAgICAgICAgJHtkaXNhYmxlZCAmJlxuICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgICAgICAgYH07XG5cbiAgICAgICAgICAgIC4ke3RpcENsc30ge1xuICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiA1cHg7XG4gICAgICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfTElHSFR9O1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgTGlzdFdyYXAgPSB3aXRoUHJvcHMoe1xuICAgIGNsYXNzTmFtZTogbGlzdFdyYXBDbHNcbn0pKFxuICAgIHN0eWxlZCgnZGl2JykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH0sXG4gICAgICAgICAgICBjdXN0b21TdHlsZSA9IHt9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgbWF4LWhlaWdodDogJHtjdXN0b21TdHlsZS5saXN0TWF4SGVpZ2h0IHx8ICcyNDBweCd9O1xuICAgICAgICAgICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgICAgICAgICA+IGRpdiB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLiR7bGlzdENsc30ge1xuICAgICAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICAgICAgcGFkZGluZzogNHB4IDE2cHg7XG5cbiAgICAgICAgICAgICAgICAuJHtpdGVtQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IHRhYmxlO1xuICAgICAgICAgICAgICAgICAgICB0YWJsZS1sYXlvdXQ6IGZpeGVkO1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICR7RFQuVF9DT0xPUl9MSU5FX0RFRkFVTFRfTElHSFR9O1xuICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMjBweDtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogOHB4IDA7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuXG4gICAgICAgICAgICAgICAgICAgICY6bGFzdC1vZi10eXBlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1ib3R0b206IG5vbmU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAuJHt0aHVtYm5haWxDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IHRhYmxlLWNlbGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiA0cHggMTZweCA0cHggMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAuJHtkZXRhaWxDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IHRhYmxlLWNlbGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC4ke2FjdGlvbkNsc30ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdGFibGUtY2VsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogOHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAuJHtyZW1vdmVDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxMnB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogJHtEVC5UX0NPTE9SX1RFWFRfREVGQVVMVF9MSUdIVH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgJi4ke3ByZXZpZXdBYmxlQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICA6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4ke2RldGFpbENsc30ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFR9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAmLiR7aXRlbUVycm9yQ2xzfS4ke2l0ZW1FcnJvckNsc30uJHtpdGVtRXJyb3JDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4ke2RldGFpbENsc30ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9SRU1BUktfREFSS307XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAuJHtpY29uV3JhcENsc30ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19FUlJPUl9EQVJLfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLiR7aWNvbkNsc30ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX05PUk1BTH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC4ke2Vycm9yQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiA0cHg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLiR7ZXJyb3JJY29uQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiAke0RULlRfQ09MT1JfVEVYVF9FUlJPUn07XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDRweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLiR7dXBsb2FkaW5nVGlwQ0xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfUkVNQVJLX0RBUkt9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC4ke3VwbG9hZGluZ0ljb25DTHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9URVhUX1JFTUFSS19EQVJLfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogNHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLiR7Y2FyZExpc3RDbHN9IHtcbiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IC0xNnB4O1xuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IC0xNnB4O1xuICAgICAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgICAgICAgICAgJHtjbGVhckZpeE1peGlufTtcblxuICAgICAgICAgICAgICAgIC4ke2l0ZW1DbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTQwcHg7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTQwcHg7XG4gICAgICAgICAgICAgICAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDE2cHg7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDE2cHg7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICR7RFQuVF9DT0xPUl9MSU5FX0RFRkFVTFRfTElHSFR9O1xuICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19ERUZBVUxUX05PUk1BTH07XG5cbiAgICAgICAgICAgICAgICAgICAgLiR7dGh1bWJuYWlsQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMzJweCBhdXRvIDI0cHggYXV0bztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAuJHtuYW1lQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwIDEycHg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLiR7cHJvZ3Jlc3NXcmFwQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwIDE4cHg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLiR7ZXJyb3JDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDAgMTJweDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICYuJHtpdGVtRXJyb3JDbHN9LiR7aXRlbUVycm9yQ2xzfS4ke2l0ZW1FcnJvckNsc30ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiAke0RULlRfQ09MT1JfTElORV9FUlJPUl9EQVJLfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19FUlJPUl9MSUdIVH07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAuJHttZW51Q2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX01PREFMX0NPTE9SX0xBWUVSX0RFRkFVTFR9O1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgLiR7bmFtZUNsc30ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9TWVNURU1fV0hJVEV9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLiR7YWN0aW9uQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiA0MHB4IGF1dG8gMzBweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAuJHthY3Rpb25JY29uQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwIDE2cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9URVhUX1NZU1RFTV9XSElURX07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAuJHthY3Rpb25JY29uQ2xzfSArIC4ke2FjdGlvbkljb25DbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAuJHtzZXBhcmF0b3JDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDFweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDI0cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX1RFWFRfU1lTVEVNX1dISVRFfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDpob3ZlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuJHttZW51Q2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLiR7ZnVsbFRodW1ibmFpbENsc30ge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuJHtlcnJvckNsc30ge1xuICAgICAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9FUlJPUn07XG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgICAgICAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAuJHtwcm9ncmVzc1dyYXBDbHN9IHtcbiAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMjBweDtcbiAgICAgICAgICAgICAgICAuJHtwcm9ncmVzc0Nsc30ge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLiR7bmFtZUNsc30ge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgICAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgICAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC4ke3RodW1ibmFpbENsc30ge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgICAgICAgICAgd2lkdGg6IDM4cHg7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAzOHB4O1xuICAgICAgICAgICAgICAgIC4ke2ltYWdlQ2xzfSwgLiR7aWNvbldyYXBDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAuJHtpbWFnZUNsc30ge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB3aGl0ZSBjZW50ZXIgY2VudGVyIG5vLXJlcGVhdDtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLiR7aWNvbldyYXBDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDM2cHg7XG4gICAgICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHtEVC5UX0NPTE9SX0xJTkVfREVGQVVMVF9MSUdIVH07XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19ERUZBVUxUX05PUk1BTH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAuJHtpbWFnZUljb25DbHN9IHtcbiAgICAgICAgICAgICAgICBmaWxsOiAke0RULlRfQ09MT1JfTEVHRU5EX0NZQU5fNX07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuJHthcmNoaXZlSWNvbkNsc30ge1xuICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9MRUdFTkRfT1JBTkdFXzV9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLiR7ZG9jc0ljb25DbHN9IHtcbiAgICAgICAgICAgICAgICBmaWxsOiAke0RULlRfQ09MT1JfTEVHRU5EX0JMVUVfNX07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuJHt1bmtub3duSWNvbkNsc30ge1xuICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9MRUdFTkRfUFVSUExFXzV9O1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgRHJvcFpvbmVXcmFwID0gd2l0aFByb3BzKHtcbiAgICBjbGFzc05hbWU6IGRyb3B6b25lQ2xzXG59KShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9LFxuICAgICAgICAgICAgY3VzdG9tU3R5bGUgPSB7fVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGJvcmRlcjogMXB4IGRhc2hlZCAke0RULlRfQ09MT1JfTElORV9ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogMC4zcyBib3JkZXItY29sb3I7XG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfQ09MT1JfQkdfREVGQVVMVF9EQVJLfTtcblxuICAgICAgICAgICAgLiR7bGlzdFdyYXBDbHN9IHtcbiAgICAgICAgICAgICAgICBtaW4taGVpZ2h0OiAyMTBweDtcbiAgICAgICAgICAgICAgICBtYXgtaGVpZ2h0OiAke2N1c3RvbVN0eWxlLmxpc3RNYXhIZWlnaHQgfHwgJzMwMHB4J307XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuJHtjYXJkTGlzdENsc30ge1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDI0cHg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC4ke2Ryb3B6b25lVGlwQ2xzfSB7XG4gICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogNDBweCAwO1xuICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiAwLjNzIGJhY2tncm91bmQtY29sb3I7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfTElHSFR9O1xuXG4gICAgICAgICAgICAgICAgLiR7aWNvbkNsc30ge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiAwLjNzIGZpbGw7XG4gICAgICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9URVhUX1JFTUFSS19MSUdIVH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC4ke2Ryb3B6b25lVGlwTWFpbkNsc30ge1xuICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMjZweDtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogNHB4O1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAyNHB4O1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE4cHg7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLiR7ZHJvcHpvbmVUaXBTdWJDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIycHg7XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfTElHSFR9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC4ke2Ryb3B6b25lTWFza1RpcENsc30ge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgIHRvcDogMDtcbiAgICAgICAgICAgICAgICByaWdodDogMDtcbiAgICAgICAgICAgICAgICBib3R0b206IDA7XG4gICAgICAgICAgICAgICAgbGVmdDogMDtcblxuICAgICAgICAgICAgICAgIC4ke2Ryb3B6b25lVGlwQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX01PREFMX0NPTE9SX0xBWUVSX0RFRkFVTFR9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJi4ke2RyYWdpbmdDbHN9IHtcbiAgICAgICAgICAgICAgICBib3JkZXItY29sb3I6ICR7RFQuVF9DT0xPUl9MSU5FX1BSSU1BUllfREVGQVVMVH07XG5cbiAgICAgICAgICAgICAgICAuJHtkcm9wem9uZVRpcENsc30ge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfQ09MT1JfQkdfREVGQVVMVF9EQVJLfTtcbiAgICAgICAgICAgICAgICAgICAgLiR7aWNvbkNsc30ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogJHtEVC5UX0NPTE9SX1RFWFRfUFJJTUFSWV9ERUZBVUxUfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAuJHtkcm9wem9uZU1hc2tUaXBDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG5cbiAgICAgICAgICAgICAgICAgICAgLiR7ZHJvcHpvbmVUaXBDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9NT0RBTF9DT0xPUl9MQVlFUl9ERUZBVUxUfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4ke2ljb25DbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiAke0RULlRfQ09MT1JfVEVYVF9TWVNURU1fV0hJVEV9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLiR7ZHJvcHpvbmVUaXBNYWluQ2xzfSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX1NZU1RFTV9XSElURX07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAuJHtkcm9wem9uZVRpcFN1YkNsc30ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9TWVNURU1fV0hJVEV9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgRXJyb3JUaXBXcmFwID0gc3R5bGVkLmRpdmBcbiAgICBwYWRkaW5nOiAxNnB4O1xuYDtcbiJdfQ== */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.DropZoneWrap = DropZoneWrap;
var ErrorTipWrap = (0, _styledBase.default)("div", {
  target: "e1j8vdr54",
  label: "ErrorTipWrap"
})(process.env.NODE_ENV === "production" ? {
  name: "19midj6",
  styles: "padding:16px;"
} : {
  name: "19midj6",
  styles: "padding:16px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
exports.ErrorTipWrap = ErrorTipWrap;