"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SMonthCalendar = exports.SCalendar = exports.STwoSide = exports.calendarMixin = exports.iconCls = exports.twoSideSingleCls = exports.cellContentNextSpaceCls = exports.cellContentPrevSpaceCls = exports.cellContentSquareCls = exports.cellContentCls = exports.tableCls = exports.prefixCls = void 0;

var _newArrowCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/newArrowCheck"));

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _core = require("@emotion/core");

var _calendar = require("@ucloud-fe/calendar");

var _config = _interopRequireDefault(require("../../../config"));

var _style = require("../../../style");

var _this = void 0;

var _prefixCls = _config.default.prefixCls;
var prefixCls = _prefixCls + '-calendar';
exports.prefixCls = prefixCls;
var tableCls = prefixCls + '-table';
exports.tableCls = tableCls;
var cellContentCls = prefixCls + '-cell-content';
exports.cellContentCls = cellContentCls;
var cellContentSquareCls = cellContentCls + '-square';
exports.cellContentSquareCls = cellContentSquareCls;
var cellContentPrevSpaceCls = cellContentCls + '-prev-space';
exports.cellContentPrevSpaceCls = cellContentPrevSpaceCls;
var cellContentNextSpaceCls = cellContentCls + '-next-space';
exports.cellContentNextSpaceCls = cellContentNextSpaceCls;
var twoSideSingleCls = prefixCls + '-tow-side-single';
exports.twoSideSingleCls = twoSideSingleCls;
var iconCls = prefixCls + '-icon';
/* stylelint-disable no-duplicate-selectors */

exports.iconCls = iconCls;

var calendarMixin = function calendarMixin(props) {
  (0, _newArrowCheck2.default)(this, _this);
  var DT = props.theme.designTokens,
      customStyle = props.customStyle;
  return /*#__PURE__*/(0, _core.css)("&.", prefixCls, "{outline:none;position:relative;color:", DT.T_COLOR_TEXT_DEFAULT_DARK, ";background:", DT.T_COLOR_BG_DEFAULT_NORMAL, ";", (customStyle === null || customStyle === void 0 ? void 0 : customStyle.boxShadow) === false ? null : /*#__PURE__*/(0, _core.css)("box-shadow:", DT.T_SHADOW_BLOCK_DEFAULT_LG, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), "}.", prefixCls, "-header{display:flex;flex:none;box-sizing:border-box;width:100%;height:44px;padding:0 8px;border-bottom:1px solid ", DT.T_COLOR_BG_DEFAULT_DARK, ";align-items:center;user-select:none;}.", prefixCls, "-header-button{display:block;text-align:center;cursor:pointer;margin:0 8px;.", iconCls, "{width:16px;height:16px;fill:", DT.T_COLOR_TEXT_REMARK_DARK, ";}:hover .", iconCls, "{fill:", DT.T_COLOR_TEXT_PRIMARY_DEFAULT, ";}}.", prefixCls, "-header-switcher-wrap{display:block;flex:1;font-size:14px;font-weight:600;text-align:center;.", prefixCls, "-header-switcher{cursor:pointer;}.", prefixCls, "-header-switcher+.", prefixCls, "-header-switcher{margin-left:8px;}}.", prefixCls, "-row{display:flex;align-items:center;.", prefixCls, "-cell{flex:1;}}.", prefixCls, "-thead{padding:0 10px;font-size:12px;font-weight:600;background:", DT.T_COLOR_BG_DEFAULT_LIGHT, ";.", prefixCls, "-cell{line-height:28px;text-align:center;vertical-align:middle;}}.", prefixCls, "-tbody{padding:0 10px 12px;font-size:12px;display:flex;flex-direction:column;.", prefixCls, "-row{margin-top:12px;}.", prefixCls, "-cell{display:inline-flex;margin:0 auto;cursor:pointer;user-select:none;justify-content:center;.", cellContentPrevSpaceCls, ",.", cellContentNextSpaceCls, "{content:' ';display:flex;flex:1;}.", cellContentCls, "{display:block;text-align:center;height:20px;width:20px;line-height:20px;.", cellContentSquareCls, "{border-radius:2px;}}&.", prefixCls, "-cell-month,&.", prefixCls, "-cell-year,&.", prefixCls, "-cell-decade{.", cellContentCls, "{border-radius:2px;height:32px;width:40px;line-height:32px;}}&.", prefixCls, "-cell-decade .", cellContentCls, "{width:82px;}:not(.", prefixCls, "-cell-empty):hover{.", cellContentCls, " .", cellContentSquareCls, "{background:", DT.T_COLOR_BG_DEFAULT_HOVER, ";}}&.", prefixCls, "-cell-empty{cursor:default;}&.", prefixCls, "-prev,&.", prefixCls, "-next{color:", DT.T_COLOR_TEXT_DISABLED, ";:hover{.", cellContentCls, " .", cellContentSquareCls, "{background:", DT.T_COLOR_BG_DEFAULT_HOVER, ";}}}&.", prefixCls, "-cell.", prefixCls, "-disabled{cursor:default;.", cellContentCls, " .", cellContentSquareCls, ",.", cellContentPrevSpaceCls, ",.", cellContentNextSpaceCls, "{background:", DT.T_COLOR_BG_DISABLED_LIGHT, ";color:", DT.T_COLOR_TEXT_DISABLED, ";border-radius:0;}&.", prefixCls, "-cell-disabled-first{.", cellContentPrevSpaceCls, "{border-top-left-radius:2px;border-bottom-left-radius:2px;}}&.", prefixCls, "-cell-disabled-last{.", cellContentNextSpaceCls, "{border-top-right-radius:2px;border-bottom-right-radius:2px;}}}&.", prefixCls, "-now{color:", DT.T_COLOR_TEXT_PRIMARY_DEFAULT, ";}&.", prefixCls, "-prev,&.", prefixCls, "-next,&.", prefixCls, "-disable{color:", DT.T_COLOR_TEXT_DISABLED, ";}&.", prefixCls, "-cell.", prefixCls, "-range-middle:not(.", prefixCls, "-next):not(.", prefixCls, "-prev){.", cellContentCls, ",.", cellContentPrevSpaceCls, ",.", cellContentNextSpaceCls, "{background:", DT.T_COLOR_BG_DEFAULT_HOVER, ";}}&.", prefixCls, "-cell.", prefixCls, "-range-middle:first-of-type:not(.", prefixCls, "-next):not(.", prefixCls, "-prev){.", cellContentPrevSpaceCls, "{border-top-left-radius:2px;border-bottom-left-radius:2px;}}&.", prefixCls, "-cell.", prefixCls, "-range-middle:last-of-type:not(.", prefixCls, "-next):not(.", prefixCls, "-prev){.", cellContentNextSpaceCls, "{border-top-right-radius:2px;border-bottom-right-radius:2px;}}&.", prefixCls, "-cell.", prefixCls, "-range-last:not(.", prefixCls, "-next):not(.", prefixCls, "-prev):not(.", prefixCls, "-range-unclosed):not(.", prefixCls, "-range-first){.", cellContentPrevSpaceCls, "{background:", DT.T_COLOR_BG_DEFAULT_HOVER, ";}.", cellContentCls, "{border-top-left-radius:0px;border-bottom-left-radius:0px;}}&.", prefixCls, "-cell.", prefixCls, "-active,&.", prefixCls, "-cell.", prefixCls, "-range-first:not(.", prefixCls, "-next):not(.", prefixCls, "-prev),&.", prefixCls, "-cell.", prefixCls, "-range-last:not(.", prefixCls, "-next):not(.", prefixCls, "-prev){.", cellContentCls, "{border-radius:2px;background:", DT.T_COLOR_BG_DEFAULT_HOVER, ";.", cellContentSquareCls, "{border-radius:2px;background:", DT.T_COLOR_BG_PRIMARY_1, ";color:", DT.T_COLOR_TEXT_WHITE, ";}}}&.", prefixCls, "-cell.", prefixCls, "-range-first:not(.", prefixCls, "-next):not(.", prefixCls, "-prev):not(.", prefixCls, "-range-unclosed):not(.", prefixCls, "-range-last){.", cellContentNextSpaceCls, "{background:", DT.T_COLOR_BG_DEFAULT_HOVER, ";}.", cellContentCls, "{border-top-right-radius:0px;border-bottom-right-radius:0px;}}}}.", prefixCls, "-date-wrap,.", prefixCls, "-month-wrap,.", prefixCls, "-year-wrap,.", prefixCls, "-decade-wrap{display:flex;flex-direction:column;height:100%;.", prefixCls, "-body{flex-grow:1;display:flex;}.", tableCls, "{height:100%;display:flex;flex-direction:column;flex-grow:1;}.", prefixCls, "-tbody{flex-grow:1;display:flex;flex-direction:column;}.", prefixCls, "-row{flex-grow:1;}}&.", prefixCls, " .", prefixCls, "{height:100%;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0);

exports.calendarMixin = calendarMixin;

var shouldForwardProp = function shouldForwardProp(propName) {
  (0, _newArrowCheck2.default)(this, _this);
  return !{
    customStyle: 1,
    theme: 1
  }[propName];
}.bind(void 0);

var STwoSide = (0, _style.sWrap)()(( /*#__PURE__*/0, _styledBase.default)('div', {
  target: "e1r914b60",
  label: "STwoSide"
})(function (_ref) {
  (0, _newArrowCheck2.default)(this, _this);
  var DT = _ref.theme.designTokens,
      customStyle = _ref.customStyle;
  return /*#__PURE__*/(0, _core.css)((customStyle === null || customStyle === void 0 ? void 0 : customStyle.boxShadow) === false ? null : /*#__PURE__*/(0, _core.css)("box-shadow:", DT.T_SHADOW_BLOCK_DEFAULT_LG, ";;label:STwoSide;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), " display:flex;.", prefixCls, "{flex:1;}&:not(.", twoSideSingleCls, ") .", prefixCls, ":nth-of-type(1){.", prefixCls, "-body{border-right:1px solid ", DT.T_COLOR_BG_DEFAULT_DARK, ";}}&:not(.", twoSideSingleCls, "){.", prefixCls, ":nth-of-type(1) .", prefixCls, "-header-button-nextYear,.", prefixCls, ":nth-of-type(1) .", prefixCls, "-header-button-nextMonth,.", prefixCls, ":nth-of-type(2) .", prefixCls, "-header-button-prevYear,.", prefixCls, ":nth-of-type(2) .", prefixCls, "-header-button-prevMonth{visibility:hidden;pointer-events:none;}};label:STwoSide;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.STwoSide = STwoSide;
var SCalendar = (0, _style.sWrap)({})(( /*#__PURE__*/0, _styledBase.default)(_calendar.Calendar, {
  shouldForwardProp: shouldForwardProp,
  target: "e1r914b61",
  label: "SCalendar"
})(calendarMixin, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")));
exports.SCalendar = SCalendar;
var SMonthCalendar = (0, _style.sWrap)({})(( /*#__PURE__*/0, _styledBase.default)(_calendar.Month, {
  shouldForwardProp: shouldForwardProp,
  target: "e1r914b62",
  label: "SMonthCalendar"
})(calendarMixin, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")));
exports.SMonthCalendar = SMonthCalendar;