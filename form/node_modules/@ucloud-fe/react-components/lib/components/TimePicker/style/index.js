"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.STime = exports.SPopup = exports.SWrap = exports.footerCls = exports.shortcutCls = exports.timePrefixCls = exports.prefixCls = void 0;

var _newArrowCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/newArrowCheck"));

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _core = require("@emotion/core");

var _calendar = require("@ucloud-fe/calendar");

var _style = require("../../../style");

var _config = _interopRequireDefault(require("../../../config"));

var _isFirefox = _interopRequireDefault(require("../../../utils/isFirefox"));

var _isIE = _interopRequireDefault(require("../../../utils/isIE"));

var _style2 = require("../../../components/DatePicker/style");

var _this = void 0;

var _prefixCls = _config.default.prefixCls;
var prefixCls = _prefixCls + '-timepicker';
exports.prefixCls = prefixCls;
var timePrefixCls = _prefixCls + '-time';
exports.timePrefixCls = timePrefixCls;
var shortcutCls = prefixCls + '-shortcut';
exports.shortcutCls = shortcutCls;
var footerCls = prefixCls + '-footer';
exports.footerCls = footerCls;

var shouldForwardProp = function shouldForwardProp(propName) {
  (0, _newArrowCheck2.default)(this, _this);
  return !{
    customStyle: 1,
    theme: 1
  }[propName];
}.bind(void 0);

var SWrap = (0, _style.sWrap)({
  className: prefixCls
})((0, _styledBase.default)("div", {
  target: "ejkmh9l0",
  label: "SWrap"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  return /*#__PURE__*/(0, _core.css)("display:inline-block;width:140px;", (0, _style2.inputMixin)(props), ";;label:SWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RpbWVQaWNrZXIvc3R5bGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0JrQiIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9UaW1lUGlja2VyL3N0eWxlL2luZGV4LnRzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgeyBUaW1lIH0gZnJvbSAnQHVjbG91ZC1mZS9jYWxlbmRhcic7XG5cbmltcG9ydCB7IHNXcmFwIH0gZnJvbSAnc3JjL3N0eWxlJztcbmltcG9ydCBjb25maWcgZnJvbSAnc3JjL2NvbmZpZyc7XG5pbXBvcnQgaXNGaXJlZm94IGZyb20gJ3NyYy91dGlscy9pc0ZpcmVmb3gnO1xuaW1wb3J0IGlzSUUgZnJvbSAnc3JjL3V0aWxzL2lzSUUnO1xuaW1wb3J0IHsgaW5wdXRNaXhpbiB9IGZyb20gJ3NyYy9jb21wb25lbnRzL0RhdGVQaWNrZXIvc3R5bGUnO1xuXG5jb25zdCB7IHByZWZpeENsczogX3ByZWZpeENscyB9ID0gY29uZmlnO1xuZXhwb3J0IGNvbnN0IHByZWZpeENscyA9IF9wcmVmaXhDbHMgKyAnLXRpbWVwaWNrZXInO1xuZXhwb3J0IGNvbnN0IHRpbWVQcmVmaXhDbHMgPSBfcHJlZml4Q2xzICsgJy10aW1lJztcbmV4cG9ydCBjb25zdCBzaG9ydGN1dENscyA9IHByZWZpeENscyArICctc2hvcnRjdXQnO1xuZXhwb3J0IGNvbnN0IGZvb3RlckNscyA9IHByZWZpeENscyArICctZm9vdGVyJztcblxuY29uc3Qgc2hvdWxkRm9yd2FyZFByb3AgPSAocHJvcE5hbWU6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xuICAgIHJldHVybiAhKHsgY3VzdG9tU3R5bGU6IDEsIHRoZW1lOiAxIH0gYXMgeyBba2V5OiBzdHJpbmddOiAxIH0pW3Byb3BOYW1lXTtcbn07XG5cbmV4cG9ydCBjb25zdCBTV3JhcCA9IHNXcmFwPHsgZGlzYWJsZWQ/OiBib29sZWFuIH0+KHsgY2xhc3NOYW1lOiBwcmVmaXhDbHMgfSkoXG4gICAgc3R5bGVkLmRpdihwcm9wcyA9PiB7XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICB3aWR0aDogMTQwcHg7XG4gICAgICAgICAgICAke2lucHV0TWl4aW4ocHJvcHMpfTtcbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IFNQb3B1cCA9IHNXcmFwKHt9KShcbiAgICBzdHlsZWQuZGl2KHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgYm94LXNoYWRvdzogJHtEVC5UX1NIQURPV19CTE9DS19ERUZBVUxUX0xHfTtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDJweDtcbiAgICAgICAgICAgIC4ke3RpbWVQcmVmaXhDbHN9IHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwIDAgMCAxNnB4O1xuICAgICAgICAgICAgICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfTk9STUFMfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC4ke2Zvb3RlckNsc30ge1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDEycHg7XG4gICAgICAgICAgICAgICAgLiR7c2hvcnRjdXRDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfUFJJTUFSWV9ERUZBVUxUfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmNvbnN0IFN0ZXBwZXJIZWlnaHQgPSAzMjtcbmNvbnN0IFNwYWNpbmdIZWlnaHQgPSAxMDA7XG5jb25zdCBTdGVwcGVyVmlzaWJsZUhlaWdodCA9IDIwO1xuY29uc3QgQWN0aXZlT2Zmc2V0ID0gKFNwYWNpbmdIZWlnaHQgKiAyICsgU3RlcHBlckhlaWdodCAtIFN0ZXBwZXJWaXNpYmxlSGVpZ2h0KSAvIDI7XG5jb25zdCBTdGVwcGVyQWN0aXZlT2Zmc2V0ID0gKFN0ZXBwZXJIZWlnaHQgLSBTdGVwcGVyVmlzaWJsZUhlaWdodCkgLyAyO1xuXG5leHBvcnQgY29uc3QgU1RpbWUgPSBzV3JhcDxhbnk+KHt9KShcbiAgICBzdHlsZWQoVGltZSwgeyBzaG91bGRGb3J3YXJkUHJvcCB9KShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgLiR7dGltZVByZWZpeENsc30td3JhcCB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgICAgICAuJHt0aW1lUHJlZml4Q2xzfS1zY3JvbGxlciB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogJHtTdGVwcGVySGVpZ2h0fXB4O1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAke1NwYWNpbmdIZWlnaHR9cHggMDtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdy15OiBoaWRkZW47XG4gICAgICAgICAgICAgICAgICAgIHotaW5kZXg6IDE7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiA0MnB4O1xuICAgICAgICAgICAgICAgICAgICA6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3cteTogc2Nyb2xsO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgJHtcbiAgICAgICAgICAgICAgICAgICAgICAgIChpc0ZpcmVmb3ggfHwgaXNJRSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6OmFmdGVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogJyAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogJHtTcGFjaW5nSGVpZ2h0fXB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBgXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAuJHt0aW1lUHJlZml4Q2xzfS1zdGVwcGVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyMHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6ICR7U3RlcHBlckhlaWdodH1weDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAmLiR7dGltZVByZWZpeENsc30tYWN0aXZlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAuJHt0aW1lUHJlZml4Q2xzfS1zdGVwcGVyOmhvdmVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6OmJlZm9yZSxcbiAgICAgICAgICAgICAgICAgICAgLiR7dGltZVByZWZpeENsc30tc3RlcHBlcjpob3Zlcjo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogJyAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICR7U3RlcHBlclZpc2libGVIZWlnaHR9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMjBweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19ERUZBVUxUX0hPVkVSfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHotaW5kZXg6IC0xO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDo6YmVmb3JlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogJHtBY3RpdmVPZmZzZXR9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC4ke3RpbWVQcmVmaXhDbHN9LXN0ZXBwZXI6aG92ZXI6OmFmdGVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogJHtTdGVwcGVyQWN0aXZlT2Zmc2V0fXB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9KVxuKTtcbiJdfQ== */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RpbWVQaWNrZXIvc3R5bGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcUJJIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RpbWVQaWNrZXIvc3R5bGUvaW5kZXgudHMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCB7IFRpbWUgfSBmcm9tICdAdWNsb3VkLWZlL2NhbGVuZGFyJztcblxuaW1wb3J0IHsgc1dyYXAgfSBmcm9tICdzcmMvc3R5bGUnO1xuaW1wb3J0IGNvbmZpZyBmcm9tICdzcmMvY29uZmlnJztcbmltcG9ydCBpc0ZpcmVmb3ggZnJvbSAnc3JjL3V0aWxzL2lzRmlyZWZveCc7XG5pbXBvcnQgaXNJRSBmcm9tICdzcmMvdXRpbHMvaXNJRSc7XG5pbXBvcnQgeyBpbnB1dE1peGluIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvRGF0ZVBpY2tlci9zdHlsZSc7XG5cbmNvbnN0IHsgcHJlZml4Q2xzOiBfcHJlZml4Q2xzIH0gPSBjb25maWc7XG5leHBvcnQgY29uc3QgcHJlZml4Q2xzID0gX3ByZWZpeENscyArICctdGltZXBpY2tlcic7XG5leHBvcnQgY29uc3QgdGltZVByZWZpeENscyA9IF9wcmVmaXhDbHMgKyAnLXRpbWUnO1xuZXhwb3J0IGNvbnN0IHNob3J0Y3V0Q2xzID0gcHJlZml4Q2xzICsgJy1zaG9ydGN1dCc7XG5leHBvcnQgY29uc3QgZm9vdGVyQ2xzID0gcHJlZml4Q2xzICsgJy1mb290ZXInO1xuXG5jb25zdCBzaG91bGRGb3J3YXJkUHJvcCA9IChwcm9wTmFtZTogc3RyaW5nKTogYm9vbGVhbiA9PiB7XG4gICAgcmV0dXJuICEoeyBjdXN0b21TdHlsZTogMSwgdGhlbWU6IDEgfSBhcyB7IFtrZXk6IHN0cmluZ106IDEgfSlbcHJvcE5hbWVdO1xufTtcblxuZXhwb3J0IGNvbnN0IFNXcmFwID0gc1dyYXA8eyBkaXNhYmxlZD86IGJvb2xlYW4gfT4oeyBjbGFzc05hbWU6IHByZWZpeENscyB9KShcbiAgICBzdHlsZWQuZGl2KHByb3BzID0+IHtcbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgIHdpZHRoOiAxNDBweDtcbiAgICAgICAgICAgICR7aW5wdXRNaXhpbihwcm9wcyl9O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgU1BvcHVwID0gc1dyYXAoe30pKFxuICAgIHN0eWxlZC5kaXYocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICBib3gtc2hhZG93OiAke0RULlRfU0hBRE9XX0JMT0NLX0RFRkFVTFRfTEd9O1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMnB4O1xuICAgICAgICAgICAgLiR7dGltZVByZWZpeENsc30ge1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDAgMCAwIDE2cHg7XG4gICAgICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAke0RULlRfQ09MT1JfQkdfREVGQVVMVF9EQVJLfTtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfQ09MT1JfQkdfREVGQVVMVF9OT1JNQUx9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLiR7Zm9vdGVyQ2xzfSB7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogMTJweDtcbiAgICAgICAgICAgICAgICAuJHtzaG9ydGN1dENsc30ge1xuICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFR9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuY29uc3QgU3RlcHBlckhlaWdodCA9IDMyO1xuY29uc3QgU3BhY2luZ0hlaWdodCA9IDEwMDtcbmNvbnN0IFN0ZXBwZXJWaXNpYmxlSGVpZ2h0ID0gMjA7XG5jb25zdCBBY3RpdmVPZmZzZXQgPSAoU3BhY2luZ0hlaWdodCAqIDIgKyBTdGVwcGVySGVpZ2h0IC0gU3RlcHBlclZpc2libGVIZWlnaHQpIC8gMjtcbmNvbnN0IFN0ZXBwZXJBY3RpdmVPZmZzZXQgPSAoU3RlcHBlckhlaWdodCAtIFN0ZXBwZXJWaXNpYmxlSGVpZ2h0KSAvIDI7XG5cbmV4cG9ydCBjb25zdCBTVGltZSA9IHNXcmFwPGFueT4oe30pKFxuICAgIHN0eWxlZChUaW1lLCB7IHNob3VsZEZvcndhcmRQcm9wIH0pKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAuJHt0aW1lUHJlZml4Q2xzfS13cmFwIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgICAgIC4ke3RpbWVQcmVmaXhDbHN9LXNjcm9sbGVyIHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAke1N0ZXBwZXJIZWlnaHR9cHg7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICR7U3BhY2luZ0hlaWdodH1weCAwO1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdy14OiBoaWRkZW47XG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93LXk6IGhpZGRlbjtcbiAgICAgICAgICAgICAgICAgICAgei1pbmRleDogMTtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDQycHg7XG4gICAgICAgICAgICAgICAgICAgIDpob3ZlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdy15OiBzY3JvbGw7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAke1xuICAgICAgICAgICAgICAgICAgICAgICAgKGlzRmlyZWZveCB8fCBpc0lFKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnICc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAke1NwYWNpbmdIZWlnaHR9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC4ke3RpbWVQcmVmaXhDbHN9LXN0ZXBwZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDIwcHg7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogJHtTdGVwcGVySGVpZ2h0fXB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICYuJHt0aW1lUHJlZml4Q2xzfS1hY3RpdmUge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC4ke3RpbWVQcmVmaXhDbHN9LXN0ZXBwZXI6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDo6YmVmb3JlLFxuICAgICAgICAgICAgICAgICAgICAuJHt0aW1lUHJlZml4Q2xzfS1zdGVwcGVyOmhvdmVyOjphZnRlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnICc7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogJHtTdGVwcGVyVmlzaWJsZUhlaWdodH1weDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyMHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfSE9WRVJ9O1xuICAgICAgICAgICAgICAgICAgICAgICAgei1pbmRleDogLTE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOjpiZWZvcmUge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAke0FjdGl2ZU9mZnNldH1weDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLiR7dGltZVByZWZpeENsc30tc3RlcHBlcjpob3Zlcjo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAke1N0ZXBwZXJBY3RpdmVPZmZzZXR9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuIl19 */"));
exports.SWrap = SWrap;
var SPopup = (0, _style.sWrap)({})((0, _styledBase.default)("div", {
  target: "ejkmh9l1",
  label: "SPopup"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var DT = props.theme.designTokens;
  return /*#__PURE__*/(0, _core.css)("background:", DT.T_COLOR_BG_DEFAULT_DARK, ";box-shadow:", DT.T_SHADOW_BLOCK_DEFAULT_LG, ";border-radius:2px;.", timePrefixCls, "{padding:0 0 0 16px;border-left:1px solid ", DT.T_COLOR_BG_DEFAULT_DARK, ";background:", DT.T_COLOR_BG_DEFAULT_NORMAL, ";}.", footerCls, "{padding:12px;.", shortcutCls, "{cursor:pointer;color:", DT.T_COLOR_TEXT_PRIMARY_DEFAULT, ";}};label:SPopup;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RpbWVQaWNrZXIvc3R5bGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUNrQiIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9UaW1lUGlja2VyL3N0eWxlL2luZGV4LnRzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgeyBUaW1lIH0gZnJvbSAnQHVjbG91ZC1mZS9jYWxlbmRhcic7XG5cbmltcG9ydCB7IHNXcmFwIH0gZnJvbSAnc3JjL3N0eWxlJztcbmltcG9ydCBjb25maWcgZnJvbSAnc3JjL2NvbmZpZyc7XG5pbXBvcnQgaXNGaXJlZm94IGZyb20gJ3NyYy91dGlscy9pc0ZpcmVmb3gnO1xuaW1wb3J0IGlzSUUgZnJvbSAnc3JjL3V0aWxzL2lzSUUnO1xuaW1wb3J0IHsgaW5wdXRNaXhpbiB9IGZyb20gJ3NyYy9jb21wb25lbnRzL0RhdGVQaWNrZXIvc3R5bGUnO1xuXG5jb25zdCB7IHByZWZpeENsczogX3ByZWZpeENscyB9ID0gY29uZmlnO1xuZXhwb3J0IGNvbnN0IHByZWZpeENscyA9IF9wcmVmaXhDbHMgKyAnLXRpbWVwaWNrZXInO1xuZXhwb3J0IGNvbnN0IHRpbWVQcmVmaXhDbHMgPSBfcHJlZml4Q2xzICsgJy10aW1lJztcbmV4cG9ydCBjb25zdCBzaG9ydGN1dENscyA9IHByZWZpeENscyArICctc2hvcnRjdXQnO1xuZXhwb3J0IGNvbnN0IGZvb3RlckNscyA9IHByZWZpeENscyArICctZm9vdGVyJztcblxuY29uc3Qgc2hvdWxkRm9yd2FyZFByb3AgPSAocHJvcE5hbWU6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xuICAgIHJldHVybiAhKHsgY3VzdG9tU3R5bGU6IDEsIHRoZW1lOiAxIH0gYXMgeyBba2V5OiBzdHJpbmddOiAxIH0pW3Byb3BOYW1lXTtcbn07XG5cbmV4cG9ydCBjb25zdCBTV3JhcCA9IHNXcmFwPHsgZGlzYWJsZWQ/OiBib29sZWFuIH0+KHsgY2xhc3NOYW1lOiBwcmVmaXhDbHMgfSkoXG4gICAgc3R5bGVkLmRpdihwcm9wcyA9PiB7XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICB3aWR0aDogMTQwcHg7XG4gICAgICAgICAgICAke2lucHV0TWl4aW4ocHJvcHMpfTtcbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IFNQb3B1cCA9IHNXcmFwKHt9KShcbiAgICBzdHlsZWQuZGl2KHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgYm94LXNoYWRvdzogJHtEVC5UX1NIQURPV19CTE9DS19ERUZBVUxUX0xHfTtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDJweDtcbiAgICAgICAgICAgIC4ke3RpbWVQcmVmaXhDbHN9IHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwIDAgMCAxNnB4O1xuICAgICAgICAgICAgICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfTk9STUFMfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC4ke2Zvb3RlckNsc30ge1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDEycHg7XG4gICAgICAgICAgICAgICAgLiR7c2hvcnRjdXRDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfUFJJTUFSWV9ERUZBVUxUfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmNvbnN0IFN0ZXBwZXJIZWlnaHQgPSAzMjtcbmNvbnN0IFNwYWNpbmdIZWlnaHQgPSAxMDA7XG5jb25zdCBTdGVwcGVyVmlzaWJsZUhlaWdodCA9IDIwO1xuY29uc3QgQWN0aXZlT2Zmc2V0ID0gKFNwYWNpbmdIZWlnaHQgKiAyICsgU3RlcHBlckhlaWdodCAtIFN0ZXBwZXJWaXNpYmxlSGVpZ2h0KSAvIDI7XG5jb25zdCBTdGVwcGVyQWN0aXZlT2Zmc2V0ID0gKFN0ZXBwZXJIZWlnaHQgLSBTdGVwcGVyVmlzaWJsZUhlaWdodCkgLyAyO1xuXG5leHBvcnQgY29uc3QgU1RpbWUgPSBzV3JhcDxhbnk+KHt9KShcbiAgICBzdHlsZWQoVGltZSwgeyBzaG91bGRGb3J3YXJkUHJvcCB9KShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgLiR7dGltZVByZWZpeENsc30td3JhcCB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgICAgICAuJHt0aW1lUHJlZml4Q2xzfS1zY3JvbGxlciB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogJHtTdGVwcGVySGVpZ2h0fXB4O1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAke1NwYWNpbmdIZWlnaHR9cHggMDtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdy15OiBoaWRkZW47XG4gICAgICAgICAgICAgICAgICAgIHotaW5kZXg6IDE7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiA0MnB4O1xuICAgICAgICAgICAgICAgICAgICA6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3cteTogc2Nyb2xsO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgJHtcbiAgICAgICAgICAgICAgICAgICAgICAgIChpc0ZpcmVmb3ggfHwgaXNJRSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6OmFmdGVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogJyAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogJHtTcGFjaW5nSGVpZ2h0fXB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBgXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAuJHt0aW1lUHJlZml4Q2xzfS1zdGVwcGVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyMHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6ICR7U3RlcHBlckhlaWdodH1weDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAmLiR7dGltZVByZWZpeENsc30tYWN0aXZlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAuJHt0aW1lUHJlZml4Q2xzfS1zdGVwcGVyOmhvdmVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6OmJlZm9yZSxcbiAgICAgICAgICAgICAgICAgICAgLiR7dGltZVByZWZpeENsc30tc3RlcHBlcjpob3Zlcjo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogJyAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICR7U3RlcHBlclZpc2libGVIZWlnaHR9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMjBweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19ERUZBVUxUX0hPVkVSfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHotaW5kZXg6IC0xO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDo6YmVmb3JlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogJHtBY3RpdmVPZmZzZXR9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC4ke3RpbWVQcmVmaXhDbHN9LXN0ZXBwZXI6aG92ZXI6OmFmdGVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogJHtTdGVwcGVyQWN0aXZlT2Zmc2V0fXB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9KVxuKTtcbiJdfQ== */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RpbWVQaWNrZXIvc3R5bGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBK0JJIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RpbWVQaWNrZXIvc3R5bGUvaW5kZXgudHMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCB7IFRpbWUgfSBmcm9tICdAdWNsb3VkLWZlL2NhbGVuZGFyJztcblxuaW1wb3J0IHsgc1dyYXAgfSBmcm9tICdzcmMvc3R5bGUnO1xuaW1wb3J0IGNvbmZpZyBmcm9tICdzcmMvY29uZmlnJztcbmltcG9ydCBpc0ZpcmVmb3ggZnJvbSAnc3JjL3V0aWxzL2lzRmlyZWZveCc7XG5pbXBvcnQgaXNJRSBmcm9tICdzcmMvdXRpbHMvaXNJRSc7XG5pbXBvcnQgeyBpbnB1dE1peGluIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvRGF0ZVBpY2tlci9zdHlsZSc7XG5cbmNvbnN0IHsgcHJlZml4Q2xzOiBfcHJlZml4Q2xzIH0gPSBjb25maWc7XG5leHBvcnQgY29uc3QgcHJlZml4Q2xzID0gX3ByZWZpeENscyArICctdGltZXBpY2tlcic7XG5leHBvcnQgY29uc3QgdGltZVByZWZpeENscyA9IF9wcmVmaXhDbHMgKyAnLXRpbWUnO1xuZXhwb3J0IGNvbnN0IHNob3J0Y3V0Q2xzID0gcHJlZml4Q2xzICsgJy1zaG9ydGN1dCc7XG5leHBvcnQgY29uc3QgZm9vdGVyQ2xzID0gcHJlZml4Q2xzICsgJy1mb290ZXInO1xuXG5jb25zdCBzaG91bGRGb3J3YXJkUHJvcCA9IChwcm9wTmFtZTogc3RyaW5nKTogYm9vbGVhbiA9PiB7XG4gICAgcmV0dXJuICEoeyBjdXN0b21TdHlsZTogMSwgdGhlbWU6IDEgfSBhcyB7IFtrZXk6IHN0cmluZ106IDEgfSlbcHJvcE5hbWVdO1xufTtcblxuZXhwb3J0IGNvbnN0IFNXcmFwID0gc1dyYXA8eyBkaXNhYmxlZD86IGJvb2xlYW4gfT4oeyBjbGFzc05hbWU6IHByZWZpeENscyB9KShcbiAgICBzdHlsZWQuZGl2KHByb3BzID0+IHtcbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgIHdpZHRoOiAxNDBweDtcbiAgICAgICAgICAgICR7aW5wdXRNaXhpbihwcm9wcyl9O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgU1BvcHVwID0gc1dyYXAoe30pKFxuICAgIHN0eWxlZC5kaXYocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICBib3gtc2hhZG93OiAke0RULlRfU0hBRE9XX0JMT0NLX0RFRkFVTFRfTEd9O1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMnB4O1xuICAgICAgICAgICAgLiR7dGltZVByZWZpeENsc30ge1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDAgMCAwIDE2cHg7XG4gICAgICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAke0RULlRfQ09MT1JfQkdfREVGQVVMVF9EQVJLfTtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfQ09MT1JfQkdfREVGQVVMVF9OT1JNQUx9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLiR7Zm9vdGVyQ2xzfSB7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogMTJweDtcbiAgICAgICAgICAgICAgICAuJHtzaG9ydGN1dENsc30ge1xuICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFR9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuY29uc3QgU3RlcHBlckhlaWdodCA9IDMyO1xuY29uc3QgU3BhY2luZ0hlaWdodCA9IDEwMDtcbmNvbnN0IFN0ZXBwZXJWaXNpYmxlSGVpZ2h0ID0gMjA7XG5jb25zdCBBY3RpdmVPZmZzZXQgPSAoU3BhY2luZ0hlaWdodCAqIDIgKyBTdGVwcGVySGVpZ2h0IC0gU3RlcHBlclZpc2libGVIZWlnaHQpIC8gMjtcbmNvbnN0IFN0ZXBwZXJBY3RpdmVPZmZzZXQgPSAoU3RlcHBlckhlaWdodCAtIFN0ZXBwZXJWaXNpYmxlSGVpZ2h0KSAvIDI7XG5cbmV4cG9ydCBjb25zdCBTVGltZSA9IHNXcmFwPGFueT4oe30pKFxuICAgIHN0eWxlZChUaW1lLCB7IHNob3VsZEZvcndhcmRQcm9wIH0pKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAuJHt0aW1lUHJlZml4Q2xzfS13cmFwIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgICAgIC4ke3RpbWVQcmVmaXhDbHN9LXNjcm9sbGVyIHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAke1N0ZXBwZXJIZWlnaHR9cHg7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICR7U3BhY2luZ0hlaWdodH1weCAwO1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdy14OiBoaWRkZW47XG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93LXk6IGhpZGRlbjtcbiAgICAgICAgICAgICAgICAgICAgei1pbmRleDogMTtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDQycHg7XG4gICAgICAgICAgICAgICAgICAgIDpob3ZlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdy15OiBzY3JvbGw7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAke1xuICAgICAgICAgICAgICAgICAgICAgICAgKGlzRmlyZWZveCB8fCBpc0lFKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnICc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAke1NwYWNpbmdIZWlnaHR9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC4ke3RpbWVQcmVmaXhDbHN9LXN0ZXBwZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDIwcHg7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogJHtTdGVwcGVySGVpZ2h0fXB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICYuJHt0aW1lUHJlZml4Q2xzfS1hY3RpdmUge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC4ke3RpbWVQcmVmaXhDbHN9LXN0ZXBwZXI6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDo6YmVmb3JlLFxuICAgICAgICAgICAgICAgICAgICAuJHt0aW1lUHJlZml4Q2xzfS1zdGVwcGVyOmhvdmVyOjphZnRlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnICc7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogJHtTdGVwcGVyVmlzaWJsZUhlaWdodH1weDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyMHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfSE9WRVJ9O1xuICAgICAgICAgICAgICAgICAgICAgICAgei1pbmRleDogLTE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOjpiZWZvcmUge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAke0FjdGl2ZU9mZnNldH1weDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLiR7dGltZVByZWZpeENsc30tc3RlcHBlcjpob3Zlcjo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAke1N0ZXBwZXJBY3RpdmVPZmZzZXR9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuIl19 */"));
exports.SPopup = SPopup;
var StepperHeight = 32;
var SpacingHeight = 100;
var StepperVisibleHeight = 20;
var ActiveOffset = (SpacingHeight * 2 + StepperHeight - StepperVisibleHeight) / 2;
var StepperActiveOffset = (StepperHeight - StepperVisibleHeight) / 2;
var STime = (0, _style.sWrap)({})(( /*#__PURE__*/0, _styledBase.default)(_calendar.Time, {
  shouldForwardProp: shouldForwardProp,
  target: "ejkmh9l2",
  label: "STime"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var DT = props.theme.designTokens;
  return /*#__PURE__*/(0, _core.css)("display:flex;.", timePrefixCls, "-wrap{overflow:hidden;display:flex;position:relative;.", timePrefixCls, "-scroller{height:", StepperHeight, "px;padding:", SpacingHeight, "px 0;overflow-x:hidden;overflow-y:hidden;z-index:1;width:42px;:hover{overflow-y:scroll;}", (_isFirefox.default || _isIE.default) && /*#__PURE__*/(0, _core.css)("::after{content:' ';visibility:hidden;height:", SpacingHeight, "px;display:block;};label:STime;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RpbWVQaWNrZXIvc3R5bGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcUYyQiIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9UaW1lUGlja2VyL3N0eWxlL2luZGV4LnRzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgeyBUaW1lIH0gZnJvbSAnQHVjbG91ZC1mZS9jYWxlbmRhcic7XG5cbmltcG9ydCB7IHNXcmFwIH0gZnJvbSAnc3JjL3N0eWxlJztcbmltcG9ydCBjb25maWcgZnJvbSAnc3JjL2NvbmZpZyc7XG5pbXBvcnQgaXNGaXJlZm94IGZyb20gJ3NyYy91dGlscy9pc0ZpcmVmb3gnO1xuaW1wb3J0IGlzSUUgZnJvbSAnc3JjL3V0aWxzL2lzSUUnO1xuaW1wb3J0IHsgaW5wdXRNaXhpbiB9IGZyb20gJ3NyYy9jb21wb25lbnRzL0RhdGVQaWNrZXIvc3R5bGUnO1xuXG5jb25zdCB7IHByZWZpeENsczogX3ByZWZpeENscyB9ID0gY29uZmlnO1xuZXhwb3J0IGNvbnN0IHByZWZpeENscyA9IF9wcmVmaXhDbHMgKyAnLXRpbWVwaWNrZXInO1xuZXhwb3J0IGNvbnN0IHRpbWVQcmVmaXhDbHMgPSBfcHJlZml4Q2xzICsgJy10aW1lJztcbmV4cG9ydCBjb25zdCBzaG9ydGN1dENscyA9IHByZWZpeENscyArICctc2hvcnRjdXQnO1xuZXhwb3J0IGNvbnN0IGZvb3RlckNscyA9IHByZWZpeENscyArICctZm9vdGVyJztcblxuY29uc3Qgc2hvdWxkRm9yd2FyZFByb3AgPSAocHJvcE5hbWU6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xuICAgIHJldHVybiAhKHsgY3VzdG9tU3R5bGU6IDEsIHRoZW1lOiAxIH0gYXMgeyBba2V5OiBzdHJpbmddOiAxIH0pW3Byb3BOYW1lXTtcbn07XG5cbmV4cG9ydCBjb25zdCBTV3JhcCA9IHNXcmFwPHsgZGlzYWJsZWQ/OiBib29sZWFuIH0+KHsgY2xhc3NOYW1lOiBwcmVmaXhDbHMgfSkoXG4gICAgc3R5bGVkLmRpdihwcm9wcyA9PiB7XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICB3aWR0aDogMTQwcHg7XG4gICAgICAgICAgICAke2lucHV0TWl4aW4ocHJvcHMpfTtcbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IFNQb3B1cCA9IHNXcmFwKHt9KShcbiAgICBzdHlsZWQuZGl2KHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgYm94LXNoYWRvdzogJHtEVC5UX1NIQURPV19CTE9DS19ERUZBVUxUX0xHfTtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDJweDtcbiAgICAgICAgICAgIC4ke3RpbWVQcmVmaXhDbHN9IHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwIDAgMCAxNnB4O1xuICAgICAgICAgICAgICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfTk9STUFMfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC4ke2Zvb3RlckNsc30ge1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDEycHg7XG4gICAgICAgICAgICAgICAgLiR7c2hvcnRjdXRDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfUFJJTUFSWV9ERUZBVUxUfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmNvbnN0IFN0ZXBwZXJIZWlnaHQgPSAzMjtcbmNvbnN0IFNwYWNpbmdIZWlnaHQgPSAxMDA7XG5jb25zdCBTdGVwcGVyVmlzaWJsZUhlaWdodCA9IDIwO1xuY29uc3QgQWN0aXZlT2Zmc2V0ID0gKFNwYWNpbmdIZWlnaHQgKiAyICsgU3RlcHBlckhlaWdodCAtIFN0ZXBwZXJWaXNpYmxlSGVpZ2h0KSAvIDI7XG5jb25zdCBTdGVwcGVyQWN0aXZlT2Zmc2V0ID0gKFN0ZXBwZXJIZWlnaHQgLSBTdGVwcGVyVmlzaWJsZUhlaWdodCkgLyAyO1xuXG5leHBvcnQgY29uc3QgU1RpbWUgPSBzV3JhcDxhbnk+KHt9KShcbiAgICBzdHlsZWQoVGltZSwgeyBzaG91bGRGb3J3YXJkUHJvcCB9KShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgLiR7dGltZVByZWZpeENsc30td3JhcCB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgICAgICAuJHt0aW1lUHJlZml4Q2xzfS1zY3JvbGxlciB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogJHtTdGVwcGVySGVpZ2h0fXB4O1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAke1NwYWNpbmdIZWlnaHR9cHggMDtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdy15OiBoaWRkZW47XG4gICAgICAgICAgICAgICAgICAgIHotaW5kZXg6IDE7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiA0MnB4O1xuICAgICAgICAgICAgICAgICAgICA6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3cteTogc2Nyb2xsO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgJHtcbiAgICAgICAgICAgICAgICAgICAgICAgIChpc0ZpcmVmb3ggfHwgaXNJRSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6OmFmdGVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogJyAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogJHtTcGFjaW5nSGVpZ2h0fXB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBgXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAuJHt0aW1lUHJlZml4Q2xzfS1zdGVwcGVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyMHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6ICR7U3RlcHBlckhlaWdodH1weDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAmLiR7dGltZVByZWZpeENsc30tYWN0aXZlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAuJHt0aW1lUHJlZml4Q2xzfS1zdGVwcGVyOmhvdmVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6OmJlZm9yZSxcbiAgICAgICAgICAgICAgICAgICAgLiR7dGltZVByZWZpeENsc30tc3RlcHBlcjpob3Zlcjo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogJyAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICR7U3RlcHBlclZpc2libGVIZWlnaHR9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMjBweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19ERUZBVUxUX0hPVkVSfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHotaW5kZXg6IC0xO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDo6YmVmb3JlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogJHtBY3RpdmVPZmZzZXR9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC4ke3RpbWVQcmVmaXhDbHN9LXN0ZXBwZXI6aG92ZXI6OmFmdGVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogJHtTdGVwcGVyQWN0aXZlT2Zmc2V0fXB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9KVxuKTtcbiJdfQ== */")), " .", timePrefixCls, "-stepper{width:20px;text-align:center;line-height:", StepperHeight, "px;color:", DT.T_COLOR_TEXT_DEFAULT_DARK, ";cursor:pointer;user-select:none;&.", timePrefixCls, "-active{font-weight:bold;}}.", timePrefixCls, "-stepper:hover{position:relative;}::before,.", timePrefixCls, "-stepper:hover::after{content:' ';position:absolute;display:block;height:", StepperVisibleHeight, "px;width:20px;box-sizing:border-box;pointer-events:none;background:", DT.T_COLOR_BG_DEFAULT_HOVER, ";z-index:-1;}::before{top:", ActiveOffset, "px;left:0;}.", timePrefixCls, "-stepper:hover::after{top:", StepperActiveOffset, "px;left:0;}}};label:STime;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RpbWVQaWNrZXIvc3R5bGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0VrQiIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9UaW1lUGlja2VyL3N0eWxlL2luZGV4LnRzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgeyBUaW1lIH0gZnJvbSAnQHVjbG91ZC1mZS9jYWxlbmRhcic7XG5cbmltcG9ydCB7IHNXcmFwIH0gZnJvbSAnc3JjL3N0eWxlJztcbmltcG9ydCBjb25maWcgZnJvbSAnc3JjL2NvbmZpZyc7XG5pbXBvcnQgaXNGaXJlZm94IGZyb20gJ3NyYy91dGlscy9pc0ZpcmVmb3gnO1xuaW1wb3J0IGlzSUUgZnJvbSAnc3JjL3V0aWxzL2lzSUUnO1xuaW1wb3J0IHsgaW5wdXRNaXhpbiB9IGZyb20gJ3NyYy9jb21wb25lbnRzL0RhdGVQaWNrZXIvc3R5bGUnO1xuXG5jb25zdCB7IHByZWZpeENsczogX3ByZWZpeENscyB9ID0gY29uZmlnO1xuZXhwb3J0IGNvbnN0IHByZWZpeENscyA9IF9wcmVmaXhDbHMgKyAnLXRpbWVwaWNrZXInO1xuZXhwb3J0IGNvbnN0IHRpbWVQcmVmaXhDbHMgPSBfcHJlZml4Q2xzICsgJy10aW1lJztcbmV4cG9ydCBjb25zdCBzaG9ydGN1dENscyA9IHByZWZpeENscyArICctc2hvcnRjdXQnO1xuZXhwb3J0IGNvbnN0IGZvb3RlckNscyA9IHByZWZpeENscyArICctZm9vdGVyJztcblxuY29uc3Qgc2hvdWxkRm9yd2FyZFByb3AgPSAocHJvcE5hbWU6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xuICAgIHJldHVybiAhKHsgY3VzdG9tU3R5bGU6IDEsIHRoZW1lOiAxIH0gYXMgeyBba2V5OiBzdHJpbmddOiAxIH0pW3Byb3BOYW1lXTtcbn07XG5cbmV4cG9ydCBjb25zdCBTV3JhcCA9IHNXcmFwPHsgZGlzYWJsZWQ/OiBib29sZWFuIH0+KHsgY2xhc3NOYW1lOiBwcmVmaXhDbHMgfSkoXG4gICAgc3R5bGVkLmRpdihwcm9wcyA9PiB7XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICB3aWR0aDogMTQwcHg7XG4gICAgICAgICAgICAke2lucHV0TWl4aW4ocHJvcHMpfTtcbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IFNQb3B1cCA9IHNXcmFwKHt9KShcbiAgICBzdHlsZWQuZGl2KHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgYm94LXNoYWRvdzogJHtEVC5UX1NIQURPV19CTE9DS19ERUZBVUxUX0xHfTtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDJweDtcbiAgICAgICAgICAgIC4ke3RpbWVQcmVmaXhDbHN9IHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwIDAgMCAxNnB4O1xuICAgICAgICAgICAgICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfTk9STUFMfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC4ke2Zvb3RlckNsc30ge1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDEycHg7XG4gICAgICAgICAgICAgICAgLiR7c2hvcnRjdXRDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfUFJJTUFSWV9ERUZBVUxUfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmNvbnN0IFN0ZXBwZXJIZWlnaHQgPSAzMjtcbmNvbnN0IFNwYWNpbmdIZWlnaHQgPSAxMDA7XG5jb25zdCBTdGVwcGVyVmlzaWJsZUhlaWdodCA9IDIwO1xuY29uc3QgQWN0aXZlT2Zmc2V0ID0gKFNwYWNpbmdIZWlnaHQgKiAyICsgU3RlcHBlckhlaWdodCAtIFN0ZXBwZXJWaXNpYmxlSGVpZ2h0KSAvIDI7XG5jb25zdCBTdGVwcGVyQWN0aXZlT2Zmc2V0ID0gKFN0ZXBwZXJIZWlnaHQgLSBTdGVwcGVyVmlzaWJsZUhlaWdodCkgLyAyO1xuXG5leHBvcnQgY29uc3QgU1RpbWUgPSBzV3JhcDxhbnk+KHt9KShcbiAgICBzdHlsZWQoVGltZSwgeyBzaG91bGRGb3J3YXJkUHJvcCB9KShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgLiR7dGltZVByZWZpeENsc30td3JhcCB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgICAgICAuJHt0aW1lUHJlZml4Q2xzfS1zY3JvbGxlciB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogJHtTdGVwcGVySGVpZ2h0fXB4O1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAke1NwYWNpbmdIZWlnaHR9cHggMDtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdy15OiBoaWRkZW47XG4gICAgICAgICAgICAgICAgICAgIHotaW5kZXg6IDE7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiA0MnB4O1xuICAgICAgICAgICAgICAgICAgICA6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3cteTogc2Nyb2xsO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgJHtcbiAgICAgICAgICAgICAgICAgICAgICAgIChpc0ZpcmVmb3ggfHwgaXNJRSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6OmFmdGVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogJyAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogJHtTcGFjaW5nSGVpZ2h0fXB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBgXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAuJHt0aW1lUHJlZml4Q2xzfS1zdGVwcGVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyMHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6ICR7U3RlcHBlckhlaWdodH1weDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAmLiR7dGltZVByZWZpeENsc30tYWN0aXZlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAuJHt0aW1lUHJlZml4Q2xzfS1zdGVwcGVyOmhvdmVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6OmJlZm9yZSxcbiAgICAgICAgICAgICAgICAgICAgLiR7dGltZVByZWZpeENsc30tc3RlcHBlcjpob3Zlcjo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogJyAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICR7U3RlcHBlclZpc2libGVIZWlnaHR9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMjBweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19ERUZBVUxUX0hPVkVSfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHotaW5kZXg6IC0xO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDo6YmVmb3JlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogJHtBY3RpdmVPZmZzZXR9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC4ke3RpbWVQcmVmaXhDbHN9LXN0ZXBwZXI6aG92ZXI6OmFmdGVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogJHtTdGVwcGVyQWN0aXZlT2Zmc2V0fXB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9KVxuKTtcbiJdfQ== */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RpbWVQaWNrZXIvc3R5bGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBOERJIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RpbWVQaWNrZXIvc3R5bGUvaW5kZXgudHMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCB7IFRpbWUgfSBmcm9tICdAdWNsb3VkLWZlL2NhbGVuZGFyJztcblxuaW1wb3J0IHsgc1dyYXAgfSBmcm9tICdzcmMvc3R5bGUnO1xuaW1wb3J0IGNvbmZpZyBmcm9tICdzcmMvY29uZmlnJztcbmltcG9ydCBpc0ZpcmVmb3ggZnJvbSAnc3JjL3V0aWxzL2lzRmlyZWZveCc7XG5pbXBvcnQgaXNJRSBmcm9tICdzcmMvdXRpbHMvaXNJRSc7XG5pbXBvcnQgeyBpbnB1dE1peGluIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvRGF0ZVBpY2tlci9zdHlsZSc7XG5cbmNvbnN0IHsgcHJlZml4Q2xzOiBfcHJlZml4Q2xzIH0gPSBjb25maWc7XG5leHBvcnQgY29uc3QgcHJlZml4Q2xzID0gX3ByZWZpeENscyArICctdGltZXBpY2tlcic7XG5leHBvcnQgY29uc3QgdGltZVByZWZpeENscyA9IF9wcmVmaXhDbHMgKyAnLXRpbWUnO1xuZXhwb3J0IGNvbnN0IHNob3J0Y3V0Q2xzID0gcHJlZml4Q2xzICsgJy1zaG9ydGN1dCc7XG5leHBvcnQgY29uc3QgZm9vdGVyQ2xzID0gcHJlZml4Q2xzICsgJy1mb290ZXInO1xuXG5jb25zdCBzaG91bGRGb3J3YXJkUHJvcCA9IChwcm9wTmFtZTogc3RyaW5nKTogYm9vbGVhbiA9PiB7XG4gICAgcmV0dXJuICEoeyBjdXN0b21TdHlsZTogMSwgdGhlbWU6IDEgfSBhcyB7IFtrZXk6IHN0cmluZ106IDEgfSlbcHJvcE5hbWVdO1xufTtcblxuZXhwb3J0IGNvbnN0IFNXcmFwID0gc1dyYXA8eyBkaXNhYmxlZD86IGJvb2xlYW4gfT4oeyBjbGFzc05hbWU6IHByZWZpeENscyB9KShcbiAgICBzdHlsZWQuZGl2KHByb3BzID0+IHtcbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgIHdpZHRoOiAxNDBweDtcbiAgICAgICAgICAgICR7aW5wdXRNaXhpbihwcm9wcyl9O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgU1BvcHVwID0gc1dyYXAoe30pKFxuICAgIHN0eWxlZC5kaXYocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICBib3gtc2hhZG93OiAke0RULlRfU0hBRE9XX0JMT0NLX0RFRkFVTFRfTEd9O1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMnB4O1xuICAgICAgICAgICAgLiR7dGltZVByZWZpeENsc30ge1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDAgMCAwIDE2cHg7XG4gICAgICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAke0RULlRfQ09MT1JfQkdfREVGQVVMVF9EQVJLfTtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfQ09MT1JfQkdfREVGQVVMVF9OT1JNQUx9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLiR7Zm9vdGVyQ2xzfSB7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogMTJweDtcbiAgICAgICAgICAgICAgICAuJHtzaG9ydGN1dENsc30ge1xuICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFR9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuY29uc3QgU3RlcHBlckhlaWdodCA9IDMyO1xuY29uc3QgU3BhY2luZ0hlaWdodCA9IDEwMDtcbmNvbnN0IFN0ZXBwZXJWaXNpYmxlSGVpZ2h0ID0gMjA7XG5jb25zdCBBY3RpdmVPZmZzZXQgPSAoU3BhY2luZ0hlaWdodCAqIDIgKyBTdGVwcGVySGVpZ2h0IC0gU3RlcHBlclZpc2libGVIZWlnaHQpIC8gMjtcbmNvbnN0IFN0ZXBwZXJBY3RpdmVPZmZzZXQgPSAoU3RlcHBlckhlaWdodCAtIFN0ZXBwZXJWaXNpYmxlSGVpZ2h0KSAvIDI7XG5cbmV4cG9ydCBjb25zdCBTVGltZSA9IHNXcmFwPGFueT4oe30pKFxuICAgIHN0eWxlZChUaW1lLCB7IHNob3VsZEZvcndhcmRQcm9wIH0pKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAuJHt0aW1lUHJlZml4Q2xzfS13cmFwIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgICAgIC4ke3RpbWVQcmVmaXhDbHN9LXNjcm9sbGVyIHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAke1N0ZXBwZXJIZWlnaHR9cHg7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICR7U3BhY2luZ0hlaWdodH1weCAwO1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdy14OiBoaWRkZW47XG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93LXk6IGhpZGRlbjtcbiAgICAgICAgICAgICAgICAgICAgei1pbmRleDogMTtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDQycHg7XG4gICAgICAgICAgICAgICAgICAgIDpob3ZlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdy15OiBzY3JvbGw7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAke1xuICAgICAgICAgICAgICAgICAgICAgICAgKGlzRmlyZWZveCB8fCBpc0lFKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnICc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAke1NwYWNpbmdIZWlnaHR9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC4ke3RpbWVQcmVmaXhDbHN9LXN0ZXBwZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDIwcHg7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogJHtTdGVwcGVySGVpZ2h0fXB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICYuJHt0aW1lUHJlZml4Q2xzfS1hY3RpdmUge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC4ke3RpbWVQcmVmaXhDbHN9LXN0ZXBwZXI6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDo6YmVmb3JlLFxuICAgICAgICAgICAgICAgICAgICAuJHt0aW1lUHJlZml4Q2xzfS1zdGVwcGVyOmhvdmVyOjphZnRlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnICc7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogJHtTdGVwcGVyVmlzaWJsZUhlaWdodH1weDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyMHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfSE9WRVJ9O1xuICAgICAgICAgICAgICAgICAgICAgICAgei1pbmRleDogLTE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOjpiZWZvcmUge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAke0FjdGl2ZU9mZnNldH1weDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLiR7dGltZVByZWZpeENsc30tc3RlcHBlcjpob3Zlcjo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAke1N0ZXBwZXJBY3RpdmVPZmZzZXR9cHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuIl19 */"));
exports.STime = STime;