"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SButtonA = exports.SButton = exports.iconCls = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _newArrowCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/newArrowCheck"));

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _core = require("@emotion/core");

var _classnames = _interopRequireDefault(require("classnames"));

var _config = _interopRequireDefault(require("../../../config"));

var _style = require("../../../style");

var _excluded = ["loading", "styleType", "disabled", "fakeDisabled", "onClick", "checkAble", "block"];

var _this = void 0;

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

var _prefixCls = _config.default.prefixCls;
var prefixCls = _prefixCls + '-button';
var iconCls = prefixCls + '-icon';
exports.iconCls = iconCls;

var sizeMixin = function sizeMixin(props) {
  (0, _newArrowCheck2.default)(this, _this);
  var size = props.size,
      DT = props.theme.designTokens;
  return /*#__PURE__*/(0, _core.css)("height:", (0, _style.getHeightBySize)(DT, size), ";line-height:", (0, _style.getHeightBySize)(DT, size), ";padding:0 ", (0, _style.getPaddingBySize)(DT, size), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0);

var transitionProperty = 'width,height,border,background,color,fill,box-shadow';

var styleTypeMixin = function styleTypeMixin(props) {
  (0, _newArrowCheck2.default)(this, _this);
  var DT = props.theme.designTokens,
      styleType = props.styleType,
      checkAble = props.checkAble,
      disabled = props.disabled,
      size = props.size;
  var styleTypeTheme = {
    primary: {
      color: DT.T_BUTTON_PRIMARY_COLOR_TEXT_DEFAULT,
      fill: DT.T_BUTTON_PRIMARY_COLOR_TEXT_DEFAULT,
      border: 'none',
      background: DT.T_BUTTON_PRIMARY_COLOR_BG_DEFAULT,
      boxShadow: DT.T_SHADOW_BUTTON_PRIMARY,
      transition: "".concat(transitionProperty, " ").concat(_style.transitionFlat),
      ':link,:visited': {
        color: DT.T_BUTTON_PRIMARY_COLOR_TEXT_DEFAULT
      },
      ':hover,:active': {
        background: DT.T_BUTTON_PRIMARY_COLOR_BG_HOVER,
        boxShadow: DT.T_SHADOW_BUTTON_PRIMARY_HOVER
      }
    },
    border: {
      color: DT.T_COLOR_TEXT_DEFAULT_DARK,
      fill: DT.T_COLOR_TEXT_DEFAULT_DARK,
      background: DT.T_BUTTON_SECONDARY_COLOR_BG_DEFAULT,
      border: "1px solid ".concat(DT.T_COLOR_LINE_DEFAULT_DARK),
      boxShadow: DT.T_SHADOW_BUTTON_DEFAULT,
      transition: "".concat(transitionProperty, " ").concat(_style.transitionFlat),
      ':link,:visited': {
        color: DT.T_COLOR_TEXT_DEFAULT_DARK
      },
      ':hover,:active': {
        color: DT.T_COLOR_TEXT_PRIMARY_DEFAULT,
        fill: DT.T_COLOR_TEXT_PRIMARY_DEFAULT,
        border: "1px solid ".concat(DT.T_COLOR_LINE_DEFAULT_LIGHT),
        background: DT.T_BUTTON_SECONDARY_COLOR_BG_DEFAULT,
        boxShadow: DT.T_SHADOW_BUTTON_HOVER
      }
    },
    'border-gray': {
      color: DT.T_COLOR_TEXT_DEFAULT_LIGHT,
      fill: DT.T_COLOR_TEXT_DEFAULT_LIGHT,
      borderColor: DT.T_COLOR_LINE_DEFAULT_LIGHT,
      background: DT.T_COLOR_BG_DEFAULT_LIGHT,
      transition: "".concat(transitionProperty, " ").concat(_style.transitionFlat),
      ':link,:visited': {
        color: DT.T_COLOR_TEXT_DEFAULT_LIGHT
      },
      ':hover,:active': {
        color: DT.T_COLOR_TEXT_PRIMARY_DEFAULT,
        fill: DT.T_COLOR_TEXT_PRIMARY_DEFAULT,
        borderColor: DT.T_COLOR_LINE_PRIMARY_HOVER,
        background: checkAble ? DT.T_COLOR_BG_DEFAULT_LIGHT : DT.T_BUTTON_SECONDARY_COLOR_BG_DEFAULT
      }
    }
  };
  var disabledTheme = {
    background: DT.T_COLOR_BG_DISABLED_LIGHT,
    color: DT.T_COLOR_TEXT_DISABLED,
    fill: DT.T_COLOR_TEXT_DISABLED,
    cursor: 'default',
    borderColor: DT.T_COLOR_LINE_DISABLED_LIGHT,
    boxShadow: 'none',
    transition: "".concat(transitionProperty, " ").concat(_style.transitionFlat)
  };
  return /*#__PURE__*/(0, _core.css)(disabled ? disabledTheme : styleTypeTheme[styleType], ";", (disabled || styleType === 'border' || styleType === 'border-gray') && /*#__PURE__*/(0, _core.css)("border-width:", DT.T_LINE_WIDTH_BASE, ";border-style:solid;padding:0 ", (0, _style.offsetPaddingBySize)(DT, size, -1), ";line-height:", (0, _style.offsetHeightBySize)(DT, size, -2), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0);

var shapeMixin = function shapeMixin(props) {
  (0, _newArrowCheck2.default)(this, _this);
  var size = props.size,
      shape = props.shape,
      DT = props.theme.designTokens;

  switch (shape) {
    case 'circle':
      return /*#__PURE__*/(0, _core.css)("border-radius:50% !important;padding:0;overflow:hidden;width:", (0, _style.getHeightBySize)(DT, size), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

    case 'square':
      return /*#__PURE__*/(0, _core.css)("padding:0;overflow:hidden;width:", (0, _style.getHeightBySize)(DT, size), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

    default:
      return /*#__PURE__*/(0, _core.css)(process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
  }
}.bind(void 0);

var _ref = process.env.NODE_ENV === "production" ? {
  name: "mcz7kx",
  styles: "top:0px;left:0px;bottom:0px;right:0px;"
} : {
  name: "mcz7kx",
  styles: "top:0px;left:0px;bottom:0px;right:0px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var loadingMixin = function loadingMixin(props) {
  (0, _newArrowCheck2.default)(this, _this);
  var DT = props.theme.designTokens,
      styleType = props.styleType;
  return /*#__PURE__*/(0, _core.css)("position:relative;pointer-events:none;&:before{position:absolute;top:-1px;left:-1px;bottom:-1px;right:-1px;background:", DT.T_BUTTON_COMMON_COLOR_MASK, ";opacity:0.6;content:'';border-radius:inherit;z-index:1;transition:opacity 0.2s;", styleType === 'primary' && _ref, "}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0);

var checkedMixin = function checkedMixin(props) {
  (0, _newArrowCheck2.default)(this, _this);
  var DT = props.theme.designTokens;
  return /*#__PURE__*/(0, _core.css)("color:", DT.T_COLOR_TEXT_PRIMARY_DEFAULT, ";fill:", DT.T_COLOR_TEXT_PRIMARY_DEFAULT, ";background:", DT.T_COLOR_BG_DEFAULT_HOVER, ";border-color:", DT.T_COLOR_LINE_PRIMARY_DEFAULT, ";box-shadow:", DT.T_SHADOW_BUTTON_HOVER, ";:hover{background:", DT.T_COLOR_BG_DEFAULT_HOVER, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0);

var classNameMixin = function classNameMixin(_ref3) {
  (0, _newArrowCheck2.default)(this, _this);
  var size = _ref3.size,
      styleType = _ref3.styleType,
      shape = _ref3.shape,
      loading = _ref3.loading,
      disabled = _ref3.disabled,
      fakeDisabled = _ref3.fakeDisabled,
      checked = _ref3.checked;
  return (0, _classnames.default)(prefixCls, "".concat(prefixCls, "-size-").concat(size), "".concat(prefixCls, "-styletype-").concat(styleType), shape && "".concat(prefixCls, "-").concat(shape), loading && "".concat(prefixCls, "-loading"), disabled && "".concat(prefixCls, "-disabled"), fakeDisabled && "".concat(prefixCls, "-disabled-fake"), checked && "".concat(prefixCls, "-checked"));
}.bind(void 0);

var _ref2 = process.env.NODE_ENV === "production" ? {
  name: "8atqhb",
  styles: "width:100%;"
} : {
  name: "8atqhb",
  styles: "width:100%;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var buttonStyleMixin = function buttonStyleMixin(props) {
  (0, _newArrowCheck2.default)(this, _this);
  var theme = props.theme,
      loading = props.loading,
      shape = props.shape,
      checked = props.checked,
      block = props.block;
  var DT = theme.designTokens;
  return /*#__PURE__*/(0, _core.css)("margin:0;box-sizing:border-box;border-radius:", DT.T_CORNER_SM, ";text-align:center;text-decoration:none;cursor:pointer;outline:none;font-size:", DT.T_TYPO_FONT_SIZE_1, ";white-space:nowrap;display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;", sizeMixin(props), ";", styleTypeMixin(props), ";", shape && shapeMixin(props), ";", loading && loadingMixin(props), ";", checked && checkedMixin(props), ";", block && _ref2, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0);
/* eslint-disable @typescript-eslint/no-unused-vars */


var Button = function Button(_ref4) {
  (0, _newArrowCheck2.default)(this, _this);
  var loading = _ref4.loading,
      styleType = _ref4.styleType,
      disabled = _ref4.disabled,
      fakeDisabled = _ref4.fakeDisabled,
      onClick = _ref4.onClick,
      checkAble = _ref4.checkAble,
      block = _ref4.block,
      rest = (0, _objectWithoutProperties2.default)(_ref4, _excluded);
  return /*#__PURE__*/_react.default.createElement("button", (0, _extends2.default)({
    disabled: disabled && !fakeDisabled,
    onClick: !disabled ? onClick : undefined
  }, rest));
}.bind(void 0);
/* eslint-enable @typescript-eslint/no-unused-vars */


Button.propTypes = {
  loading: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  fakeDisabled: _propTypes.default.bool,
  checkAble: _propTypes.default.bool,
  checked: _propTypes.default.bool,
  block: _propTypes.default.bool
};
var SButton = (0, _style.sWrap)({
  className: classNameMixin
})(( /*#__PURE__*/0, _styledBase.default)(Button, {
  target: "efyr0h00",
  label: "SButton"
})(buttonStyleMixin, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0J1dHRvbi9zdHlsZS9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMFFHIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0J1dHRvbi9zdHlsZS9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgSFRNTEF0dHJpYnV0ZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQgY29uZmlnIGZyb20gJ3NyYy9jb25maWcnO1xuaW1wb3J0IHtcbiAgICBpbmxpbmVCbG9ja1dpdGhWZXJ0aWNhbE1peGluLFxuICAgIHNXcmFwLFxuICAgIFRoZW1lLFxuICAgIGdldEhlaWdodEJ5U2l6ZSxcbiAgICBnZXRQYWRkaW5nQnlTaXplLFxuICAgIG9mZnNldFBhZGRpbmdCeVNpemUsXG4gICAgdHJhbnNpdGlvbkZsYXQsXG4gICAgb2Zmc2V0SGVpZ2h0QnlTaXplXG59IGZyb20gJ3NyYy9zdHlsZSc7XG5cbmltcG9ydCB7IFN0eWxlVHlwZXMsIFNpemVzLCBTaGFwZXMgfSBmcm9tICcuLi9zaGFyZWQnO1xuXG5jb25zdCB7IHByZWZpeENsczogX3ByZWZpeENscyB9ID0gY29uZmlnO1xuY29uc3QgcHJlZml4Q2xzID0gX3ByZWZpeENscyArICctYnV0dG9uJztcbmV4cG9ydCBjb25zdCBpY29uQ2xzID0gcHJlZml4Q2xzICsgJy1pY29uJztcblxuaW50ZXJmYWNlIFNCdXR0b25Qcm9wcyB7XG4gICAgc3R5bGVUeXBlOiB0eXBlb2YgU3R5bGVUeXBlc1tudW1iZXJdO1xuICAgIHNpemU6IHR5cGVvZiBTaXplc1tudW1iZXJdO1xuICAgIHNoYXBlPzogdHlwZW9mIFNoYXBlc1tudW1iZXJdO1xuICAgIGxvYWRpbmc/OiBib29sZWFuO1xuICAgIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgICBmYWtlRGlzYWJsZWQ/OiBib29sZWFuO1xuICAgIGNoZWNrQWJsZT86IGJvb2xlYW47XG4gICAgY2hlY2tlZD86IGJvb2xlYW47XG4gICAgYmxvY2s/OiBib29sZWFuO1xufVxudHlwZSBTQnV0dG9uUHJvcHNXaXRoVGFnID0gU0J1dHRvblByb3BzICYgSFRNTEF0dHJpYnV0ZXM8SFRNTEJ1dHRvbkVsZW1lbnQ+O1xudHlwZSBTQnV0dG9uUHJvcHNGaW5hbCA9IFNCdXR0b25Qcm9wc1dpdGhUYWcgJiB7IHRoZW1lOiBUaGVtZSB9O1xuXG5jb25zdCBzaXplTWl4aW4gPSAocHJvcHM6IFNCdXR0b25Qcm9wc0ZpbmFsKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgICBzaXplLFxuICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICB9ID0gcHJvcHM7XG5cbiAgICByZXR1cm4gY3NzYFxuICAgICAgICBoZWlnaHQ6ICR7Z2V0SGVpZ2h0QnlTaXplKERULCBzaXplKX07XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAke2dldEhlaWdodEJ5U2l6ZShEVCwgc2l6ZSl9O1xuICAgICAgICBwYWRkaW5nOiAwICR7Z2V0UGFkZGluZ0J5U2l6ZShEVCwgc2l6ZSl9O1xuICAgIGA7XG59O1xuXG5jb25zdCB0cmFuc2l0aW9uUHJvcGVydHkgPSAnd2lkdGgsaGVpZ2h0LGJvcmRlcixiYWNrZ3JvdW5kLGNvbG9yLGZpbGwsYm94LXNoYWRvdyc7XG5cbmNvbnN0IHN0eWxlVHlwZU1peGluID0gKHByb3BzOiBTQnV0dG9uUHJvcHNGaW5hbCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9LFxuICAgICAgICBzdHlsZVR5cGUsXG4gICAgICAgIGNoZWNrQWJsZSxcbiAgICAgICAgZGlzYWJsZWQsXG4gICAgICAgIHNpemVcbiAgICB9ID0gcHJvcHM7XG5cbiAgICBjb25zdCBzdHlsZVR5cGVUaGVtZSA9IHtcbiAgICAgICAgcHJpbWFyeToge1xuICAgICAgICAgICAgY29sb3I6IERULlRfQlVUVE9OX1BSSU1BUllfQ09MT1JfVEVYVF9ERUZBVUxULFxuICAgICAgICAgICAgZmlsbDogRFQuVF9CVVRUT05fUFJJTUFSWV9DT0xPUl9URVhUX0RFRkFVTFQsXG4gICAgICAgICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IERULlRfQlVUVE9OX1BSSU1BUllfQ09MT1JfQkdfREVGQVVMVCxcbiAgICAgICAgICAgIGJveFNoYWRvdzogRFQuVF9TSEFET1dfQlVUVE9OX1BSSU1BUlksXG4gICAgICAgICAgICB0cmFuc2l0aW9uOiBgJHt0cmFuc2l0aW9uUHJvcGVydHl9ICR7dHJhbnNpdGlvbkZsYXR9YCxcbiAgICAgICAgICAgICc6bGluayw6dmlzaXRlZCc6IHtcbiAgICAgICAgICAgICAgICBjb2xvcjogRFQuVF9CVVRUT05fUFJJTUFSWV9DT0xPUl9URVhUX0RFRkFVTFRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnOmhvdmVyLDphY3RpdmUnOiB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogRFQuVF9CVVRUT05fUFJJTUFSWV9DT0xPUl9CR19IT1ZFUixcbiAgICAgICAgICAgICAgICBib3hTaGFkb3c6IERULlRfU0hBRE9XX0JVVFRPTl9QUklNQVJZX0hPVkVSXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGJvcmRlcjoge1xuICAgICAgICAgICAgY29sb3I6IERULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkssXG4gICAgICAgICAgICBmaWxsOiBEVC5UX0NPTE9SX1RFWFRfREVGQVVMVF9EQVJLLFxuICAgICAgICAgICAgYmFja2dyb3VuZDogRFQuVF9CVVRUT05fU0VDT05EQVJZX0NPTE9SX0JHX0RFRkFVTFQsXG4gICAgICAgICAgICBib3JkZXI6IGAxcHggc29saWQgJHtEVC5UX0NPTE9SX0xJTkVfREVGQVVMVF9EQVJLfWAsXG4gICAgICAgICAgICBib3hTaGFkb3c6IERULlRfU0hBRE9XX0JVVFRPTl9ERUZBVUxULFxuICAgICAgICAgICAgdHJhbnNpdGlvbjogYCR7dHJhbnNpdGlvblByb3BlcnR5fSAke3RyYW5zaXRpb25GbGF0fWAsXG4gICAgICAgICAgICAnOmxpbmssOnZpc2l0ZWQnOiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IERULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUktcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAnOmhvdmVyLDphY3RpdmUnOiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IERULlRfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFQsXG4gICAgICAgICAgICAgICAgZmlsbDogRFQuVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVCxcbiAgICAgICAgICAgICAgICBib3JkZXI6IGAxcHggc29saWQgJHtEVC5UX0NPTE9SX0xJTkVfREVGQVVMVF9MSUdIVH1gLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IERULlRfQlVUVE9OX1NFQ09OREFSWV9DT0xPUl9CR19ERUZBVUxULFxuICAgICAgICAgICAgICAgIGJveFNoYWRvdzogRFQuVF9TSEFET1dfQlVUVE9OX0hPVkVSXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdib3JkZXItZ3JheSc6IHtcbiAgICAgICAgICAgIGNvbG9yOiBEVC5UX0NPTE9SX1RFWFRfREVGQVVMVF9MSUdIVCxcbiAgICAgICAgICAgIGZpbGw6IERULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0xJR0hULFxuICAgICAgICAgICAgYm9yZGVyQ29sb3I6IERULlRfQ09MT1JfTElORV9ERUZBVUxUX0xJR0hULFxuICAgICAgICAgICAgYmFja2dyb3VuZDogRFQuVF9DT0xPUl9CR19ERUZBVUxUX0xJR0hULFxuICAgICAgICAgICAgdHJhbnNpdGlvbjogYCR7dHJhbnNpdGlvblByb3BlcnR5fSAke3RyYW5zaXRpb25GbGF0fWAsXG4gICAgICAgICAgICAnOmxpbmssOnZpc2l0ZWQnOiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IERULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0xJR0hUXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJzpob3Zlciw6YWN0aXZlJzoge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBEVC5UX0NPTE9SX1RFWFRfUFJJTUFSWV9ERUZBVUxULFxuICAgICAgICAgICAgICAgIGZpbGw6IERULlRfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFQsXG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IERULlRfQ09MT1JfTElORV9QUklNQVJZX0hPVkVSLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IGNoZWNrQWJsZSA/IERULlRfQ09MT1JfQkdfREVGQVVMVF9MSUdIVCA6IERULlRfQlVUVE9OX1NFQ09OREFSWV9DT0xPUl9CR19ERUZBVUxUXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGRpc2FibGVkVGhlbWUgPSB7XG4gICAgICAgIGJhY2tncm91bmQ6IERULlRfQ09MT1JfQkdfRElTQUJMRURfTElHSFQsXG4gICAgICAgIGNvbG9yOiBEVC5UX0NPTE9SX1RFWFRfRElTQUJMRUQsXG4gICAgICAgIGZpbGw6IERULlRfQ09MT1JfVEVYVF9ESVNBQkxFRCxcbiAgICAgICAgY3Vyc29yOiAnZGVmYXVsdCcsXG4gICAgICAgIGJvcmRlckNvbG9yOiBEVC5UX0NPTE9SX0xJTkVfRElTQUJMRURfTElHSFQsXG4gICAgICAgIGJveFNoYWRvdzogJ25vbmUnLFxuICAgICAgICB0cmFuc2l0aW9uOiBgJHt0cmFuc2l0aW9uUHJvcGVydHl9ICR7dHJhbnNpdGlvbkZsYXR9YFxuICAgIH07XG4gICAgcmV0dXJuIGNzc2BcbiAgICAgICAgJHtkaXNhYmxlZCA/IGRpc2FibGVkVGhlbWUgOiBzdHlsZVR5cGVUaGVtZVtzdHlsZVR5cGVdfTtcbiAgICAgICAgJHsoZGlzYWJsZWQgfHwgc3R5bGVUeXBlID09PSAnYm9yZGVyJyB8fCBzdHlsZVR5cGUgPT09ICdib3JkZXItZ3JheScpICYmXG4gICAgICAgIGNzc2BcbiAgICAgICAgICAgIGJvcmRlci13aWR0aDogJHtEVC5UX0xJTkVfV0lEVEhfQkFTRX07XG4gICAgICAgICAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICAgICAgICAgICAgcGFkZGluZzogMCAke29mZnNldFBhZGRpbmdCeVNpemUoRFQsIHNpemUsIC0xKX07XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogJHtvZmZzZXRIZWlnaHRCeVNpemUoRFQsIHNpemUsIC0yKX07XG4gICAgICAgIGB9O1xuICAgIGA7XG59O1xuXG5jb25zdCBzaGFwZU1peGluID0gKHByb3BzOiBTQnV0dG9uUHJvcHNGaW5hbCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgICAgc2l6ZSxcbiAgICAgICAgc2hhcGUsXG4gICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgIH0gPSBwcm9wcztcbiAgICBzd2l0Y2ggKHNoYXBlKSB7XG4gICAgICAgIGNhc2UgJ2NpcmNsZSc6XG4gICAgICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJSAhaW1wb3J0YW50O1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICAgICAgICB3aWR0aDogJHtnZXRIZWlnaHRCeVNpemUoRFQsIHNpemUpfTtcbiAgICAgICAgICAgIGA7XG4gICAgICAgIGNhc2UgJ3NxdWFyZSc6XG4gICAgICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICAgICAgICB3aWR0aDogJHtnZXRIZWlnaHRCeVNpemUoRFQsIHNpemUpfTtcbiAgICAgICAgICAgIGA7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gY3NzYGA7XG4gICAgfVxufTtcblxuY29uc3QgbG9hZGluZ01peGluID0gKHByb3BzOiBTQnV0dG9uUHJvcHNGaW5hbCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9LFxuICAgICAgICBzdHlsZVR5cGVcbiAgICB9ID0gcHJvcHM7XG5cbiAgICByZXR1cm4gY3NzYFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuXG4gICAgICAgICY6YmVmb3JlIHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgIHRvcDogLTFweDtcbiAgICAgICAgICAgIGxlZnQ6IC0xcHg7XG4gICAgICAgICAgICBib3R0b206IC0xcHg7XG4gICAgICAgICAgICByaWdodDogLTFweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9CVVRUT05fQ09NTU9OX0NPTE9SX01BU0t9O1xuICAgICAgICAgICAgb3BhY2l0eTogMC42O1xuICAgICAgICAgICAgY29udGVudDogJyc7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiBpbmhlcml0O1xuICAgICAgICAgICAgei1pbmRleDogMTtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC4ycztcbiAgICAgICAgICAgICR7c3R5bGVUeXBlID09PSAncHJpbWFyeScgJiZcbiAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICB0b3A6IDBweDtcbiAgICAgICAgICAgICAgICBsZWZ0OiAwcHg7XG4gICAgICAgICAgICAgICAgYm90dG9tOiAwcHg7XG4gICAgICAgICAgICAgICAgcmlnaHQ6IDBweDtcbiAgICAgICAgICAgIGB9XG4gICAgICAgIH1cbiAgICBgO1xufTtcblxuY29uc3QgY2hlY2tlZE1peGluID0gKHByb3BzOiBTQnV0dG9uUHJvcHNGaW5hbCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgfSA9IHByb3BzO1xuXG4gICAgcmV0dXJuIGNzc2BcbiAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVH07XG4gICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVH07XG4gICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19ERUZBVUxUX0hPVkVSfTtcbiAgICAgICAgYm9yZGVyLWNvbG9yOiAke0RULlRfQ09MT1JfTElORV9QUklNQVJZX0RFRkFVTFR9O1xuICAgICAgICBib3gtc2hhZG93OiAke0RULlRfU0hBRE9XX0JVVFRPTl9IT1ZFUn07XG4gICAgICAgIDpob3ZlciB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfQ09MT1JfQkdfREVGQVVMVF9IT1ZFUn07XG4gICAgICAgIH1cbiAgICBgO1xufTtcblxuY29uc3QgY2xhc3NOYW1lTWl4aW4gPSAoeyBzaXplLCBzdHlsZVR5cGUsIHNoYXBlLCBsb2FkaW5nLCBkaXNhYmxlZCwgZmFrZURpc2FibGVkLCBjaGVja2VkIH06IFNCdXR0b25Qcm9wcykgPT5cbiAgICBjbGFzc25hbWVzKFxuICAgICAgICBwcmVmaXhDbHMsXG4gICAgICAgIGAke3ByZWZpeENsc30tc2l6ZS0ke3NpemV9YCxcbiAgICAgICAgYCR7cHJlZml4Q2xzfS1zdHlsZXR5cGUtJHtzdHlsZVR5cGV9YCxcbiAgICAgICAgc2hhcGUgJiYgYCR7cHJlZml4Q2xzfS0ke3NoYXBlfWAsXG4gICAgICAgIGxvYWRpbmcgJiYgYCR7cHJlZml4Q2xzfS1sb2FkaW5nYCxcbiAgICAgICAgZGlzYWJsZWQgJiYgYCR7cHJlZml4Q2xzfS1kaXNhYmxlZGAsXG4gICAgICAgIGZha2VEaXNhYmxlZCAmJiBgJHtwcmVmaXhDbHN9LWRpc2FibGVkLWZha2VgLFxuICAgICAgICBjaGVja2VkICYmIGAke3ByZWZpeENsc30tY2hlY2tlZGBcbiAgICApO1xuXG5jb25zdCBidXR0b25TdHlsZU1peGluID0gPFQgZXh0ZW5kcyBTQnV0dG9uUHJvcHMgJiB7IHRoZW1lOiBUaGVtZSB9Pihwcm9wczogVCkgPT4ge1xuICAgIGNvbnN0IHsgdGhlbWUsIGxvYWRpbmcsIHNoYXBlLCBjaGVja2VkLCBibG9jayB9ID0gcHJvcHM7XG4gICAgY29uc3QgeyBkZXNpZ25Ub2tlbnM6IERUIH0gPSB0aGVtZTtcbiAgICByZXR1cm4gY3NzYFxuICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6ICR7RFQuVF9DT1JORVJfU019O1xuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICBmb250LXNpemU6ICR7RFQuVF9UWVBPX0ZPTlRfU0laRV8xfTtcbiAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuXG4gICAgICAgICR7c2l6ZU1peGluKHByb3BzKX07XG4gICAgICAgICR7c3R5bGVUeXBlTWl4aW4ocHJvcHMpfTtcbiAgICAgICAgJHtzaGFwZSAmJiBzaGFwZU1peGluKHByb3BzKX07XG4gICAgICAgICR7bG9hZGluZyAmJiBsb2FkaW5nTWl4aW4ocHJvcHMpfTtcbiAgICAgICAgJHtjaGVja2VkICYmIGNoZWNrZWRNaXhpbihwcm9wcyl9O1xuICAgICAgICAke2Jsb2NrICYmXG4gICAgICAgIGNzc2BcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBgfTtcbiAgICBgO1xufTtcblxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzICovXG5jb25zdCBCdXR0b24gPSAoe1xuICAgIGxvYWRpbmcsXG4gICAgc3R5bGVUeXBlLFxuICAgIGRpc2FibGVkLFxuICAgIGZha2VEaXNhYmxlZCxcbiAgICBvbkNsaWNrLFxuICAgIGNoZWNrQWJsZSxcbiAgICBibG9jayxcbiAgICAuLi5yZXN0XG59OiBTQnV0dG9uUHJvcHNXaXRoVGFnKSA9PiAoXG4gICAgPGJ1dHRvbiBkaXNhYmxlZD17ZGlzYWJsZWQgJiYgIWZha2VEaXNhYmxlZH0gb25DbGljaz17IWRpc2FibGVkID8gb25DbGljayA6IHVuZGVmaW5lZH0gey4uLnJlc3R9IC8+XG4pO1xuLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMgKi9cbmV4cG9ydCBjb25zdCBTQnV0dG9uID0gc1dyYXA8U0J1dHRvblByb3BzLCBIVE1MQnV0dG9uRWxlbWVudD4oe1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lTWl4aW5cbn0pKHN0eWxlZChCdXR0b24pKGJ1dHRvblN0eWxlTWl4aW4pKTtcblxuZXhwb3J0IGNvbnN0IFNCdXR0b25BID0gc1dyYXA8U0J1dHRvblByb3BzLCBIVE1MQW5jaG9yRWxlbWVudD4oXG4gICAge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZU1peGluXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlnbm9yZVByb3BzOiBbJ2Rpc2FibGVkJywgJ2Zha2VEaXNhYmxlZCcsICdjaGVja2VkJywgJ2NoZWNrQWJsZScsICdsb2FkaW5nJ11cbiAgICB9XG4pKFxuICAgIHN0eWxlZCgnYScpKHByb3BzID0+IHtcbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgICR7YnV0dG9uU3R5bGVNaXhpbihwcm9wcyl9O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuIl19 */"));
exports.SButton = SButton;
var SButtonA = (0, _style.sWrap)({
  className: classNameMixin
}, {
  ignoreProps: ['disabled', 'fakeDisabled', 'checked', 'checkAble', 'loading']
})(( /*#__PURE__*/0, _styledBase.default)('a', {
  target: "efyr0h01",
  label: "SButtonA"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  return /*#__PURE__*/(0, _core.css)(buttonStyleMixin(props), ";;label:SButtonA;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.SButtonA = SButtonA;