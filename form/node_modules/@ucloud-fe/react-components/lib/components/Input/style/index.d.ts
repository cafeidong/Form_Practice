import React, { CSSProperties, ReactNode } from 'react';
import SvgIcon from '../../../components/SvgIcon';
import { InputProps } from '../Input';
export declare const prefixCls: string;
export declare const focusedCls: string;
export declare const disabledCls: string;
export declare const blockCls: string;
export declare const inputPrefixCls: string;
export declare const inputSuffixCls: string;
export declare const clearCls: string;
export declare const inputBlockWrapCls: string;
export declare const SearchIcon: import("@emotion/styled-base").StyledComponent<Pick<any, string | number | symbol> & React.RefAttributes<SvgIcon>, Pick<Pick<any, string | number | symbol> & React.RefAttributes<SvgIcon>, string | number | symbol>, object>;
export declare const Prefix: React.NamedExoticComponent<object>;
export declare const Suffix: React.NamedExoticComponent<{
    icon?: string | ReactNode;
    children?: ReactNode;
}>;
export declare const Clear: React.NamedExoticComponent<Pick<InputProps, "clearable"> & React.HTMLAttributes<HTMLSpanElement>>;
export declare const InputPart: import("@emotion/styled-base").StyledComponent<React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, {
    stretch?: boolean | undefined;
    visible?: boolean | undefined;
}, object>;
export declare type InputWrapProps = Pick<InputProps, 'block' | 'disabled' | 'status' | 'customStyle'> & Required<Pick<InputProps, 'size'>> & {
    focused?: boolean;
    empty?: boolean;
    cursor?: CSSProperties['cursor'];
};
export declare const InputWrap: React.ForwardRefExoticComponent<Pick<InputProps, "block" | "customStyle" | "disabled" | "status"> & Required<Pick<InputProps, "size">> & {
    focused?: boolean | undefined;
    empty?: boolean | undefined;
    cursor?: CSSProperties['cursor'];
} & React.HTMLAttributes<HTMLSpanElement> & {
    theme?: import("../../../style").Theme | undefined;
} & React.RefAttributes<HTMLSpanElement>>;
