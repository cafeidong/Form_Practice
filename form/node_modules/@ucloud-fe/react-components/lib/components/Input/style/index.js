"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputWrap = exports.InputPart = exports.Clear = exports.Suffix = exports.Prefix = exports.SearchIcon = exports.inputBlockWrapCls = exports.clearCls = exports.inputSuffixCls = exports.inputPrefixCls = exports.blockCls = exports.disabledCls = exports.focusedCls = exports.prefixCls = void 0;

var _newArrowCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/newArrowCheck"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _react = _interopRequireDefault(require("react"));

var _core = require("@emotion/core");

var _classnames = _interopRequireDefault(require("classnames"));

var _SvgIcon = _interopRequireDefault(require("../../../components/SvgIcon"));

var _style = require("../../../style");

var _config = _interopRequireDefault(require("../../../config"));

var _Icon = _interopRequireDefault(require("../../../components/Icon"));

var _deprecatedLog = _interopRequireDefault(require("../../../utils/deprecatedLog"));

var _this = void 0;

var _excluded = ["clearable"];

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

var _prefixCls = _config.default.prefixCls;
var prefixCls = _prefixCls + '-input';
exports.prefixCls = prefixCls;
var focusedCls = prefixCls + '-focused';
exports.focusedCls = focusedCls;
var disabledCls = prefixCls + '-disabled';
exports.disabledCls = disabledCls;
var blockCls = prefixCls + '-block';
exports.blockCls = blockCls;
var inputPrefixCls = prefixCls + '-prefix';
exports.inputPrefixCls = inputPrefixCls;
var inputSuffixCls = prefixCls + '-suffix';
exports.inputSuffixCls = inputSuffixCls;
var clearCls = prefixCls + '-clear';
exports.clearCls = clearCls;
var inputBlockWrapCls = prefixCls + '-block-wrap';
exports.inputBlockWrapCls = inputBlockWrapCls;
var SearchIcon = ( /*#__PURE__*/0, _styledBase.default)(_SvgIcon.default, {
  target: "e1du0tm80",
  label: "SearchIcon"
})(process.env.NODE_ENV === "production" ? {
  name: "4g6ai3",
  styles: "cursor:pointer;"
} : {
  name: "4g6ai3",
  styles: "cursor:pointer;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
exports.SearchIcon = SearchIcon;
var deprecatedLogForIcon = (0, _deprecatedLog.default)('Input icon', 'suffix');

var Prefix = /*#__PURE__*/_react.default.memo(function Prefix(_ref) {
  var children = _ref.children;
  return children ? /*#__PURE__*/_react.default.createElement("span", {
    className: inputPrefixCls
  }, children) : null;
});

exports.Prefix = Prefix;

var Suffix = /*#__PURE__*/_react.default.memo(function Suffix(_ref2) {
  var icon = _ref2.icon,
      children = _ref2.children;

  if (icon) {
    deprecatedLogForIcon();
  }

  var suffix = null;

  if (children) {
    suffix = children;
  } else if (typeof icon === 'string') {
    suffix = /*#__PURE__*/_react.default.createElement(_Icon.default, {
      type: icon
    });
  } else if ( /*#__PURE__*/_react.default.isValidElement(icon)) {
    suffix = icon;
  }

  if (suffix) {
    return /*#__PURE__*/_react.default.createElement("span", {
      className: inputSuffixCls
    }, suffix);
  }

  return null;
});

exports.Suffix = Suffix;

var Clear = /*#__PURE__*/_react.default.memo(function Clear(_ref3) {
  var clearable = _ref3.clearable,
      rest = (0, _objectWithoutProperties2.default)(_ref3, _excluded);

  if (clearable) {
    return /*#__PURE__*/_react.default.createElement("span", (0, _extends2.default)({}, rest, {
      className: clearCls
    }), /*#__PURE__*/_react.default.createElement(_SvgIcon.default, {
      type: "cross-circle-filled"
    }));
  }

  return null;
});

exports.Clear = Clear;
var InputPart = (0, _styledBase.default)("span", {
  target: "e1du0tm81",
  label: "InputPart"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var stretch = props.stretch,
      visible = props.visible;
  return /*#__PURE__*/(0, _core.css)("&&&{flex:", stretch ? '1 1 auto' : '0 0 auto', ";visibility:", visible === false ? 'hidden' : 'visible', ";};label:InputPart;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
exports.InputPart = InputPart;
var InputWrap = (0, _style.sWrap)({
  className: function className(_ref4) {
    (0, _newArrowCheck2.default)(this, _this);
    var focused = _ref4.focused,
        disabled = _ref4.disabled,
        block = _ref4.block;
    return (0, _classnames.default)(prefixCls, focused && focusedCls, disabled && disabledCls, block && blockCls);
  }.bind(void 0)
})((0, _styledBase.default)("span", {
  target: "e1du0tm82",
  label: "InputWrap"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var DT = props.theme.designTokens,
      disabled = props.disabled,
      size = props.size,
      focused = props.focused,
      status = props.status,
      customStyle = props.customStyle,
      empty = props.empty,
      cursor = props.cursor;
  var height = (0, _style.getControlHeightBySize)(DT, size);
  var fontSize = (0, _style.getControlFontSizeBySize)(DT, size);
  var spacing = (0, _style.getControlSpacingBySize)(DT, size);
  var halfSpacing = (0, _style.execSizeCal)(spacing, '/2');
  return /*#__PURE__*/(0, _core.css)("position:relative;box-sizing:border-box;height:", height, ";max-width:100%;font-size:", fontSize, ";border-radius:", DT.T_CORNER_SM, ";color:", DT.T_COLOR_TEXT_DEFAULT_LIGHT, ";fill:currentColor;border:", DT.T_LINE_WIDTH_BASE, " solid ", DT.T_COLOR_LINE_DEFAULT_DARK, ";box-shadow:", DT.T_SHADOW_INSET_DEFAULT, ";background:", DT.T_INPUT_COLOR_BG_DEFAULT, ";transition:.18s cubic-bezier(.4,0,.2,1);cursor:", cursor, ";display:inline-flex;vertical-align:middle;align-items:center;:hover{color:", DT.T_COLOR_TEXT_DEFAULT_DARK, ";border-color:", DT.T_COLOR_LINE_DEFAULT_DARK, ";background:", DT.T_INPUT_COLOR_BG_ACTIVE, ";}.", clearCls, "{height:100%;align-items:center;display:flex;color:", DT.T_COLOR_TEXT_REMARK_LIGHT, ";fill:", DT.T_COLOR_TEXT_REMARK_LIGHT, ";opacity:0;transition:opacity 0.3s,color 0.1s,fill 0.1s;&:hover{color:", DT.T_COLOR_TEXT_REMARK_DARK, ";fill:", DT.T_COLOR_TEXT_REMARK_DARK, ";}}&,.", inputPrefixCls, ",.", inputSuffixCls, ",.", clearCls, ",input,", InputPart, "{padding:0 ", halfSpacing, ";}&.", blockCls, "{display:flex;}.", inputPrefixCls, ",.", inputSuffixCls, ",", InputPart, "{display:inline-flex;height:100%;align-items:center;flex:0 0 auto;}", InputPart, "[hidden]{display:none;}.", inputBlockWrapCls, "{height:", {
    sm: 16,
    md: 18,
    lg: 20
  }[size], "px;display:flex;align-items:center;flex:1;min-width:0px;}input{box-sizing:border-box;height:100%;margin:0;font-size:inherit;color:inherit;flex:1 1 130px;min-width:0px;&,&:hover,&:focus{border:none;outline:none;background:none;}&::placeholder{opacity:1;color:", DT.T_COLOR_TEXT_REMARK_LIGHT, ";}&::-ms-clear{display:none;}}", !empty && !disabled && /*#__PURE__*/(0, _core.css)(":hover,&.", focusedCls, "{.", clearCls, "{opacity:1;cursor:pointer;}};label:InputWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0lucHV0L3N0eWxlL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF1TW1CIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0lucHV0L3N0eWxlL2luZGV4LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDU1NQcm9wZXJ0aWVzLCBSZWFjdE5vZGUsIEhUTUxBdHRyaWJ1dGVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IFN2Z0ljb24gZnJvbSAnc3JjL2NvbXBvbmVudHMvU3ZnSWNvbic7XG5pbXBvcnQge1xuICAgIGV4ZWNTaXplQ2FsLFxuICAgIGdldENvbnRyb2xGb250U2l6ZUJ5U2l6ZSxcbiAgICBnZXRDb250cm9sSGVpZ2h0QnlTaXplLFxuICAgIGdldENvbnRyb2xTcGFjaW5nQnlTaXplLFxuICAgIHNXcmFwXG59IGZyb20gJ3NyYy9zdHlsZSc7XG5pbXBvcnQgY29uZmlnIGZyb20gJ3NyYy9jb25maWcnO1xuaW1wb3J0IEljb24gZnJvbSAnc3JjL2NvbXBvbmVudHMvSWNvbic7XG5pbXBvcnQgZGVwcmVjYXRlZExvZyBmcm9tICdzcmMvdXRpbHMvZGVwcmVjYXRlZExvZyc7XG5cbmltcG9ydCB7IElucHV0UHJvcHMgfSBmcm9tICcuLi9JbnB1dCc7XG5cbmNvbnN0IHsgcHJlZml4Q2xzOiBfcHJlZml4Q2xzIH0gPSBjb25maWc7XG5leHBvcnQgY29uc3QgcHJlZml4Q2xzID0gX3ByZWZpeENscyArICctaW5wdXQnO1xuZXhwb3J0IGNvbnN0IGZvY3VzZWRDbHMgPSBwcmVmaXhDbHMgKyAnLWZvY3VzZWQnO1xuZXhwb3J0IGNvbnN0IGRpc2FibGVkQ2xzID0gcHJlZml4Q2xzICsgJy1kaXNhYmxlZCc7XG5leHBvcnQgY29uc3QgYmxvY2tDbHMgPSBwcmVmaXhDbHMgKyAnLWJsb2NrJztcbmV4cG9ydCBjb25zdCBpbnB1dFByZWZpeENscyA9IHByZWZpeENscyArICctcHJlZml4JztcbmV4cG9ydCBjb25zdCBpbnB1dFN1ZmZpeENscyA9IHByZWZpeENscyArICctc3VmZml4JztcbmV4cG9ydCBjb25zdCBjbGVhckNscyA9IHByZWZpeENscyArICctY2xlYXInO1xuZXhwb3J0IGNvbnN0IGlucHV0QmxvY2tXcmFwQ2xzID0gcHJlZml4Q2xzICsgJy1ibG9jay13cmFwJztcblxuZXhwb3J0IGNvbnN0IFNlYXJjaEljb24gPSBzdHlsZWQoU3ZnSWNvbilgXG4gICAgY3Vyc29yOiBwb2ludGVyO1xuYDtcblxuY29uc3QgZGVwcmVjYXRlZExvZ0Zvckljb24gPSBkZXByZWNhdGVkTG9nKCdJbnB1dCBpY29uJywgJ3N1ZmZpeCcpO1xuZXhwb3J0IGNvbnN0IFByZWZpeCA9IFJlYWN0Lm1lbW8oZnVuY3Rpb24gUHJlZml4KHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbj86IFJlYWN0Tm9kZSB9KSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuID8gPHNwYW4gY2xhc3NOYW1lPXtpbnB1dFByZWZpeENsc30+e2NoaWxkcmVufTwvc3Bhbj4gOiBudWxsO1xufSk7XG5leHBvcnQgY29uc3QgU3VmZml4ID0gUmVhY3QubWVtbyhmdW5jdGlvbiBTdWZmaXgoe1xuICAgIGljb24sXG4gICAgY2hpbGRyZW5cbn06IHtcbiAgICBpY29uPzogc3RyaW5nIHwgUmVhY3ROb2RlO1xuICAgIGNoaWxkcmVuPzogUmVhY3ROb2RlO1xufSkge1xuICAgIGlmIChpY29uKSB7XG4gICAgICAgIGRlcHJlY2F0ZWRMb2dGb3JJY29uKCk7XG4gICAgfVxuICAgIGxldCBzdWZmaXggPSBudWxsO1xuICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgICBzdWZmaXggPSBjaGlsZHJlbjtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpY29uID09PSAnc3RyaW5nJykge1xuICAgICAgICBzdWZmaXggPSA8SWNvbiB0eXBlPXtpY29ufSAvPjtcbiAgICB9IGVsc2UgaWYgKFJlYWN0LmlzVmFsaWRFbGVtZW50KGljb24pKSB7XG4gICAgICAgIHN1ZmZpeCA9IGljb247XG4gICAgfVxuICAgIGlmIChzdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuIDxzcGFuIGNsYXNzTmFtZT17aW5wdXRTdWZmaXhDbHN9PntzdWZmaXh9PC9zcGFuPjtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59KTtcbmV4cG9ydCBjb25zdCBDbGVhciA9IFJlYWN0Lm1lbW8oZnVuY3Rpb24gQ2xlYXIoe1xuICAgIGNsZWFyYWJsZSxcbiAgICAuLi5yZXN0XG59OiBQaWNrPElucHV0UHJvcHMsICdjbGVhcmFibGUnPiAmIEhUTUxBdHRyaWJ1dGVzPEhUTUxTcGFuRWxlbWVudD4pIHtcbiAgICBpZiAoY2xlYXJhYmxlKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8c3BhbiB7Li4ucmVzdH0gY2xhc3NOYW1lPXtjbGVhckNsc30+XG4gICAgICAgICAgICAgICAgPFN2Z0ljb24gdHlwZT1cImNyb3NzLWNpcmNsZS1maWxsZWRcIiAvPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn0pO1xuXG5leHBvcnQgY29uc3QgSW5wdXRQYXJ0ID0gc3R5bGVkLnNwYW48eyBzdHJldGNoPzogYm9vbGVhbjsgdmlzaWJsZT86IGJvb2xlYW4gfT4ocHJvcHMgPT4ge1xuICAgIGNvbnN0IHsgc3RyZXRjaCwgdmlzaWJsZSB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIGNzc2BcbiAgICAgICAgJiYmIHtcbiAgICAgICAgICAgIGZsZXg6ICR7c3RyZXRjaCA/ICcxIDEgYXV0bycgOiAnMCAwIGF1dG8nfTtcbiAgICAgICAgICAgIHZpc2liaWxpdHk6ICR7dmlzaWJsZSA9PT0gZmFsc2UgPyAnaGlkZGVuJyA6ICd2aXNpYmxlJ307XG4gICAgICAgIH1cbiAgICBgO1xufSk7XG5cbmV4cG9ydCB0eXBlIElucHV0V3JhcFByb3BzID0gUGljazxJbnB1dFByb3BzLCAnYmxvY2snIHwgJ2Rpc2FibGVkJyB8ICdzdGF0dXMnIHwgJ2N1c3RvbVN0eWxlJz4gJlxuICAgIFJlcXVpcmVkPFBpY2s8SW5wdXRQcm9wcywgJ3NpemUnPj4gJiB7XG4gICAgICAgIGZvY3VzZWQ/OiBib29sZWFuO1xuICAgICAgICBlbXB0eT86IGJvb2xlYW47XG4gICAgICAgIGN1cnNvcj86IENTU1Byb3BlcnRpZXNbJ2N1cnNvciddO1xuICAgIH07XG5cbmV4cG9ydCBjb25zdCBJbnB1dFdyYXAgPSBzV3JhcDxJbnB1dFdyYXBQcm9wcywgSFRNTFNwYW5FbGVtZW50Pih7XG4gICAgY2xhc3NOYW1lOiAoeyBmb2N1c2VkLCBkaXNhYmxlZCwgYmxvY2sgfSkgPT5cbiAgICAgICAgY2xhc3NuYW1lcyhwcmVmaXhDbHMsIGZvY3VzZWQgJiYgZm9jdXNlZENscywgZGlzYWJsZWQgJiYgZGlzYWJsZWRDbHMsIGJsb2NrICYmIGJsb2NrQ2xzKVxufSkoXG4gICAgc3R5bGVkLnNwYW4ocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH0sXG4gICAgICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgICAgIHNpemUsXG4gICAgICAgICAgICBmb2N1c2VkLFxuICAgICAgICAgICAgc3RhdHVzLFxuICAgICAgICAgICAgY3VzdG9tU3R5bGUsXG4gICAgICAgICAgICBlbXB0eSxcbiAgICAgICAgICAgIGN1cnNvclxuICAgICAgICB9ID0gcHJvcHM7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IGdldENvbnRyb2xIZWlnaHRCeVNpemUoRFQsIHNpemUpO1xuICAgICAgICBjb25zdCBmb250U2l6ZSA9IGdldENvbnRyb2xGb250U2l6ZUJ5U2l6ZShEVCwgc2l6ZSk7XG4gICAgICAgIGNvbnN0IHNwYWNpbmcgPSBnZXRDb250cm9sU3BhY2luZ0J5U2l6ZShEVCwgc2l6ZSk7XG4gICAgICAgIGNvbnN0IGhhbGZTcGFjaW5nID0gZXhlY1NpemVDYWwoc3BhY2luZywgJy8yJyk7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICBoZWlnaHQ6ICR7aGVpZ2h0fTtcbiAgICAgICAgICAgIG1heC13aWR0aDogMTAwJTtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogJHtmb250U2l6ZX07XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAke0RULlRfQ09STkVSX1NNfTtcbiAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0xJR0hUfTtcbiAgICAgICAgICAgIGZpbGw6IGN1cnJlbnRDb2xvcjtcbiAgICAgICAgICAgIGJvcmRlcjogJHtEVC5UX0xJTkVfV0lEVEhfQkFTRX0gc29saWQgJHtEVC5UX0NPTE9SX0xJTkVfREVGQVVMVF9EQVJLfTtcbiAgICAgICAgICAgIGJveC1zaGFkb3c6ICR7RFQuVF9TSEFET1dfSU5TRVRfREVGQVVMVH07XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfSU5QVVRfQ09MT1JfQkdfREVGQVVMVH07XG4gICAgICAgICAgICB0cmFuc2l0aW9uOiAuMThzIGN1YmljLWJlemllciguNCwwLC4yLDEpO1xuICAgICAgICAgICAgY3Vyc29yOiAke2N1cnNvcn07XG4gICAgICAgICAgICBkaXNwbGF5OiAgaW5saW5lLWZsZXg7XG4gICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICAgICAgICAgICAgOmhvdmVyIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfREVGQVVMVF9EQVJLfTtcbiAgICAgICAgICAgICAgICBib3JkZXItY29sb3I6ICR7RFQuVF9DT0xPUl9MSU5FX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0lOUFVUX0NPTE9SX0JHX0FDVElWRX07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC4ke2NsZWFyQ2xzfSB7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfUkVNQVJLX0xJR0hUfTtcbiAgICAgICAgICAgICAgICBmaWxsOiAke0RULlRfQ09MT1JfVEVYVF9SRU1BUktfTElHSFR9O1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzLCBjb2xvciAwLjFzLCBmaWxsIDAuMXM7XG4gICAgICAgICAgICAgICAgJjpob3ZlciB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9SRU1BUktfREFSS307XG4gICAgICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9URVhUX1JFTUFSS19EQVJLfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAmLCAuJHtpbnB1dFByZWZpeENsc30sIC4ke2lucHV0U3VmZml4Q2xzfSwgLiR7Y2xlYXJDbHN9LCBpbnB1dCwgJHtJbnB1dFBhcnR9IHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwICR7aGFsZlNwYWNpbmd9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAmLiR7YmxvY2tDbHN9IHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAuJHtpbnB1dFByZWZpeENsc30sIC4ke2lucHV0U3VmZml4Q2xzfSwgJHtJbnB1dFBhcnR9IHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICBmbGV4OiAwIDAgYXV0bztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICR7SW5wdXRQYXJ0fVtoaWRkZW5dIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLiR7aW5wdXRCbG9ja1dyYXBDbHN9IHtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6ICR7eyBzbTogMTYsIG1kOiAxOCwgbGc6IDIwIH1bc2l6ZV19cHg7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgICAgICAgICAgbWluLXdpZHRoOiAwcHg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlucHV0IHtcbiAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiBpbmhlcml0O1xuICAgICAgICAgICAgICAgIGNvbG9yOiBpbmhlcml0O1xuICAgICAgICAgICAgICAgIGZsZXg6IDEgMSAxMzBweDtcbiAgICAgICAgICAgICAgICBtaW4td2lkdGg6IDBweDtcbiAgICAgICAgICAgICAgICAmLFxuICAgICAgICAgICAgICAgICY6aG92ZXIsXG4gICAgICAgICAgICAgICAgJjpmb2N1cyB7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogbm9uZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJjo6cGxhY2Vob2xkZXIge1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfUkVNQVJLX0xJR0hUfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJjo6LW1zLWNsZWFyIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAke1xuICAgICAgICAgICAgICAgICFlbXB0eSAmJlxuICAgICAgICAgICAgICAgICFkaXNhYmxlZCAmJlxuICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAgICAgOmhvdmVyLFxuICAgICAgICAgICAgICAgICAgICAmLiR7Zm9jdXNlZENsc30ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLiR7Y2xlYXJDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJHtcbiAgICAgICAgICAgICAgICBmb2N1c2VkICYmXG4gICAgICAgICAgICAgICAgIWRpc2FibGVkICYmXG4gICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgICAgICAmJiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfREVGQVVMVF9EQVJLfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogJHtEVC5UX0NPTE9SX0xJTkVfUFJJTUFSWV9ERUZBVUxUfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9JTlBVVF9DT0xPUl9CR19BQ1RJVkV9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJHtcbiAgICAgICAgICAgICAgICBzdGF0dXMgPT09ICdlcnJvcicgJiZcbiAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgICAgICYmJiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3gtc2hhZG93OiAke0RULlRfU0hBRE9XX0lOU0VUX0VSUk9SfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogJHtEVC5UX0NPTE9SX0xJTkVfRVJST1JfREFSS307XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfQ09MT1JfQkdfRVJST1JfTElHSFR9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJHtcbiAgICAgICAgICAgICAgICBkaXNhYmxlZCAmJlxuICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAgICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgJixcbiAgICAgICAgICAgICAgICAgICAgJjpob3ZlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfRElTQUJMRUR9O1xuICAgICAgICAgICAgICAgICAgICAgICAgLyogZml4IGRpc2FibGVkIGNvbG9yIGluIHNhZmFyaSAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgLXdlYmtpdC10ZXh0LWZpbGwtY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RJU0FCTEVEfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogJHtEVC5UX0NPTE9SX0xJTkVfRElTQUJMRURfTElHSFR9O1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RJU0FCTEVEX0xJR0hUfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICR7XG4gICAgICAgICAgICAgICAgY3VzdG9tU3R5bGU/LmJvcmRlciAmJlxuICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAke2N1c3RvbVN0eWxlLmJvcmRlcn0gIWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICBgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAke1xuICAgICAgICAgICAgICAgIGN1c3RvbVN0eWxlPy5ib3hTaGFkb3cgJiZcbiAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgICAgIGJveC1zaGFkb3c6ICR7Y3VzdG9tU3R5bGUuYm94U2hhZG93fSAhaW1wb3J0YW50O1xuICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICR7XG4gICAgICAgICAgICAgICAgY3VzdG9tU3R5bGU/LmJhY2tncm91bmQgJiZcbiAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7Y3VzdG9tU3R5bGUuYmFja2dyb3VuZH0gIWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICBgXG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG4iXX0= */")), " ", focused && !disabled && /*#__PURE__*/(0, _core.css)("&&{color:", DT.T_COLOR_TEXT_DEFAULT_DARK, ";border-color:", DT.T_COLOR_LINE_PRIMARY_DEFAULT, ";background:", DT.T_INPUT_COLOR_BG_ACTIVE, ";};label:InputWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), ";", status === 'error' && /*#__PURE__*/(0, _core.css)("&&&{box-shadow:", DT.T_SHADOW_INSET_ERROR, ";border-color:", DT.T_COLOR_LINE_ERROR_DARK, ";background:", DT.T_COLOR_BG_ERROR_LIGHT, ";};label:InputWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), ";", disabled && /*#__PURE__*/(0, _core.css)("box-shadow:none;&,&:hover{color:", DT.T_COLOR_TEXT_DISABLED, ";-webkit-text-fill-color:", DT.T_COLOR_TEXT_DISABLED, ";border-color:", DT.T_COLOR_LINE_DISABLED_LIGHT, ";background:", DT.T_COLOR_BG_DISABLED_LIGHT, ";};label:InputWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), ";", (customStyle === null || customStyle === void 0 ? void 0 : customStyle.border) && /*#__PURE__*/(0, _core.css)("border:", customStyle.border, " !important;;label:InputWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), " ", (customStyle === null || customStyle === void 0 ? void 0 : customStyle.boxShadow) && /*#__PURE__*/(0, _core.css)("box-shadow:", customStyle.boxShadow, " !important;;label:InputWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), " ", (customStyle === null || customStyle === void 0 ? void 0 : customStyle.background) && /*#__PURE__*/(0, _core.css)("background:", customStyle.background, " !important;;label:InputWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0lucHV0L3N0eWxlL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzUW1CIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0lucHV0L3N0eWxlL2luZGV4LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDU1NQcm9wZXJ0aWVzLCBSZWFjdE5vZGUsIEhUTUxBdHRyaWJ1dGVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IFN2Z0ljb24gZnJvbSAnc3JjL2NvbXBvbmVudHMvU3ZnSWNvbic7XG5pbXBvcnQge1xuICAgIGV4ZWNTaXplQ2FsLFxuICAgIGdldENvbnRyb2xGb250U2l6ZUJ5U2l6ZSxcbiAgICBnZXRDb250cm9sSGVpZ2h0QnlTaXplLFxuICAgIGdldENvbnRyb2xTcGFjaW5nQnlTaXplLFxuICAgIHNXcmFwXG59IGZyb20gJ3NyYy9zdHlsZSc7XG5pbXBvcnQgY29uZmlnIGZyb20gJ3NyYy9jb25maWcnO1xuaW1wb3J0IEljb24gZnJvbSAnc3JjL2NvbXBvbmVudHMvSWNvbic7XG5pbXBvcnQgZGVwcmVjYXRlZExvZyBmcm9tICdzcmMvdXRpbHMvZGVwcmVjYXRlZExvZyc7XG5cbmltcG9ydCB7IElucHV0UHJvcHMgfSBmcm9tICcuLi9JbnB1dCc7XG5cbmNvbnN0IHsgcHJlZml4Q2xzOiBfcHJlZml4Q2xzIH0gPSBjb25maWc7XG5leHBvcnQgY29uc3QgcHJlZml4Q2xzID0gX3ByZWZpeENscyArICctaW5wdXQnO1xuZXhwb3J0IGNvbnN0IGZvY3VzZWRDbHMgPSBwcmVmaXhDbHMgKyAnLWZvY3VzZWQnO1xuZXhwb3J0IGNvbnN0IGRpc2FibGVkQ2xzID0gcHJlZml4Q2xzICsgJy1kaXNhYmxlZCc7XG5leHBvcnQgY29uc3QgYmxvY2tDbHMgPSBwcmVmaXhDbHMgKyAnLWJsb2NrJztcbmV4cG9ydCBjb25zdCBpbnB1dFByZWZpeENscyA9IHByZWZpeENscyArICctcHJlZml4JztcbmV4cG9ydCBjb25zdCBpbnB1dFN1ZmZpeENscyA9IHByZWZpeENscyArICctc3VmZml4JztcbmV4cG9ydCBjb25zdCBjbGVhckNscyA9IHByZWZpeENscyArICctY2xlYXInO1xuZXhwb3J0IGNvbnN0IGlucHV0QmxvY2tXcmFwQ2xzID0gcHJlZml4Q2xzICsgJy1ibG9jay13cmFwJztcblxuZXhwb3J0IGNvbnN0IFNlYXJjaEljb24gPSBzdHlsZWQoU3ZnSWNvbilgXG4gICAgY3Vyc29yOiBwb2ludGVyO1xuYDtcblxuY29uc3QgZGVwcmVjYXRlZExvZ0Zvckljb24gPSBkZXByZWNhdGVkTG9nKCdJbnB1dCBpY29uJywgJ3N1ZmZpeCcpO1xuZXhwb3J0IGNvbnN0IFByZWZpeCA9IFJlYWN0Lm1lbW8oZnVuY3Rpb24gUHJlZml4KHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbj86IFJlYWN0Tm9kZSB9KSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuID8gPHNwYW4gY2xhc3NOYW1lPXtpbnB1dFByZWZpeENsc30+e2NoaWxkcmVufTwvc3Bhbj4gOiBudWxsO1xufSk7XG5leHBvcnQgY29uc3QgU3VmZml4ID0gUmVhY3QubWVtbyhmdW5jdGlvbiBTdWZmaXgoe1xuICAgIGljb24sXG4gICAgY2hpbGRyZW5cbn06IHtcbiAgICBpY29uPzogc3RyaW5nIHwgUmVhY3ROb2RlO1xuICAgIGNoaWxkcmVuPzogUmVhY3ROb2RlO1xufSkge1xuICAgIGlmIChpY29uKSB7XG4gICAgICAgIGRlcHJlY2F0ZWRMb2dGb3JJY29uKCk7XG4gICAgfVxuICAgIGxldCBzdWZmaXggPSBudWxsO1xuICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgICBzdWZmaXggPSBjaGlsZHJlbjtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpY29uID09PSAnc3RyaW5nJykge1xuICAgICAgICBzdWZmaXggPSA8SWNvbiB0eXBlPXtpY29ufSAvPjtcbiAgICB9IGVsc2UgaWYgKFJlYWN0LmlzVmFsaWRFbGVtZW50KGljb24pKSB7XG4gICAgICAgIHN1ZmZpeCA9IGljb247XG4gICAgfVxuICAgIGlmIChzdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuIDxzcGFuIGNsYXNzTmFtZT17aW5wdXRTdWZmaXhDbHN9PntzdWZmaXh9PC9zcGFuPjtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59KTtcbmV4cG9ydCBjb25zdCBDbGVhciA9IFJlYWN0Lm1lbW8oZnVuY3Rpb24gQ2xlYXIoe1xuICAgIGNsZWFyYWJsZSxcbiAgICAuLi5yZXN0XG59OiBQaWNrPElucHV0UHJvcHMsICdjbGVhcmFibGUnPiAmIEhUTUxBdHRyaWJ1dGVzPEhUTUxTcGFuRWxlbWVudD4pIHtcbiAgICBpZiAoY2xlYXJhYmxlKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8c3BhbiB7Li4ucmVzdH0gY2xhc3NOYW1lPXtjbGVhckNsc30+XG4gICAgICAgICAgICAgICAgPFN2Z0ljb24gdHlwZT1cImNyb3NzLWNpcmNsZS1maWxsZWRcIiAvPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn0pO1xuXG5leHBvcnQgY29uc3QgSW5wdXRQYXJ0ID0gc3R5bGVkLnNwYW48eyBzdHJldGNoPzogYm9vbGVhbjsgdmlzaWJsZT86IGJvb2xlYW4gfT4ocHJvcHMgPT4ge1xuICAgIGNvbnN0IHsgc3RyZXRjaCwgdmlzaWJsZSB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIGNzc2BcbiAgICAgICAgJiYmIHtcbiAgICAgICAgICAgIGZsZXg6ICR7c3RyZXRjaCA/ICcxIDEgYXV0bycgOiAnMCAwIGF1dG8nfTtcbiAgICAgICAgICAgIHZpc2liaWxpdHk6ICR7dmlzaWJsZSA9PT0gZmFsc2UgPyAnaGlkZGVuJyA6ICd2aXNpYmxlJ307XG4gICAgICAgIH1cbiAgICBgO1xufSk7XG5cbmV4cG9ydCB0eXBlIElucHV0V3JhcFByb3BzID0gUGljazxJbnB1dFByb3BzLCAnYmxvY2snIHwgJ2Rpc2FibGVkJyB8ICdzdGF0dXMnIHwgJ2N1c3RvbVN0eWxlJz4gJlxuICAgIFJlcXVpcmVkPFBpY2s8SW5wdXRQcm9wcywgJ3NpemUnPj4gJiB7XG4gICAgICAgIGZvY3VzZWQ/OiBib29sZWFuO1xuICAgICAgICBlbXB0eT86IGJvb2xlYW47XG4gICAgICAgIGN1cnNvcj86IENTU1Byb3BlcnRpZXNbJ2N1cnNvciddO1xuICAgIH07XG5cbmV4cG9ydCBjb25zdCBJbnB1dFdyYXAgPSBzV3JhcDxJbnB1dFdyYXBQcm9wcywgSFRNTFNwYW5FbGVtZW50Pih7XG4gICAgY2xhc3NOYW1lOiAoeyBmb2N1c2VkLCBkaXNhYmxlZCwgYmxvY2sgfSkgPT5cbiAgICAgICAgY2xhc3NuYW1lcyhwcmVmaXhDbHMsIGZvY3VzZWQgJiYgZm9jdXNlZENscywgZGlzYWJsZWQgJiYgZGlzYWJsZWRDbHMsIGJsb2NrICYmIGJsb2NrQ2xzKVxufSkoXG4gICAgc3R5bGVkLnNwYW4ocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH0sXG4gICAgICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgICAgIHNpemUsXG4gICAgICAgICAgICBmb2N1c2VkLFxuICAgICAgICAgICAgc3RhdHVzLFxuICAgICAgICAgICAgY3VzdG9tU3R5bGUsXG4gICAgICAgICAgICBlbXB0eSxcbiAgICAgICAgICAgIGN1cnNvclxuICAgICAgICB9ID0gcHJvcHM7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IGdldENvbnRyb2xIZWlnaHRCeVNpemUoRFQsIHNpemUpO1xuICAgICAgICBjb25zdCBmb250U2l6ZSA9IGdldENvbnRyb2xGb250U2l6ZUJ5U2l6ZShEVCwgc2l6ZSk7XG4gICAgICAgIGNvbnN0IHNwYWNpbmcgPSBnZXRDb250cm9sU3BhY2luZ0J5U2l6ZShEVCwgc2l6ZSk7XG4gICAgICAgIGNvbnN0IGhhbGZTcGFjaW5nID0gZXhlY1NpemVDYWwoc3BhY2luZywgJy8yJyk7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICBoZWlnaHQ6ICR7aGVpZ2h0fTtcbiAgICAgICAgICAgIG1heC13aWR0aDogMTAwJTtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogJHtmb250U2l6ZX07XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAke0RULlRfQ09STkVSX1NNfTtcbiAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0xJR0hUfTtcbiAgICAgICAgICAgIGZpbGw6IGN1cnJlbnRDb2xvcjtcbiAgICAgICAgICAgIGJvcmRlcjogJHtEVC5UX0xJTkVfV0lEVEhfQkFTRX0gc29saWQgJHtEVC5UX0NPTE9SX0xJTkVfREVGQVVMVF9EQVJLfTtcbiAgICAgICAgICAgIGJveC1zaGFkb3c6ICR7RFQuVF9TSEFET1dfSU5TRVRfREVGQVVMVH07XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfSU5QVVRfQ09MT1JfQkdfREVGQVVMVH07XG4gICAgICAgICAgICB0cmFuc2l0aW9uOiAuMThzIGN1YmljLWJlemllciguNCwwLC4yLDEpO1xuICAgICAgICAgICAgY3Vyc29yOiAke2N1cnNvcn07XG4gICAgICAgICAgICBkaXNwbGF5OiAgaW5saW5lLWZsZXg7XG4gICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICAgICAgICAgICAgOmhvdmVyIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfREVGQVVMVF9EQVJLfTtcbiAgICAgICAgICAgICAgICBib3JkZXItY29sb3I6ICR7RFQuVF9DT0xPUl9MSU5FX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0lOUFVUX0NPTE9SX0JHX0FDVElWRX07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC4ke2NsZWFyQ2xzfSB7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfUkVNQVJLX0xJR0hUfTtcbiAgICAgICAgICAgICAgICBmaWxsOiAke0RULlRfQ09MT1JfVEVYVF9SRU1BUktfTElHSFR9O1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzLCBjb2xvciAwLjFzLCBmaWxsIDAuMXM7XG4gICAgICAgICAgICAgICAgJjpob3ZlciB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9SRU1BUktfREFSS307XG4gICAgICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9URVhUX1JFTUFSS19EQVJLfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAmLCAuJHtpbnB1dFByZWZpeENsc30sIC4ke2lucHV0U3VmZml4Q2xzfSwgLiR7Y2xlYXJDbHN9LCBpbnB1dCwgJHtJbnB1dFBhcnR9IHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwICR7aGFsZlNwYWNpbmd9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAmLiR7YmxvY2tDbHN9IHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAuJHtpbnB1dFByZWZpeENsc30sIC4ke2lucHV0U3VmZml4Q2xzfSwgJHtJbnB1dFBhcnR9IHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICBmbGV4OiAwIDAgYXV0bztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICR7SW5wdXRQYXJ0fVtoaWRkZW5dIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLiR7aW5wdXRCbG9ja1dyYXBDbHN9IHtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6ICR7eyBzbTogMTYsIG1kOiAxOCwgbGc6IDIwIH1bc2l6ZV19cHg7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgICAgICAgICAgbWluLXdpZHRoOiAwcHg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlucHV0IHtcbiAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiBpbmhlcml0O1xuICAgICAgICAgICAgICAgIGNvbG9yOiBpbmhlcml0O1xuICAgICAgICAgICAgICAgIGZsZXg6IDEgMSAxMzBweDtcbiAgICAgICAgICAgICAgICBtaW4td2lkdGg6IDBweDtcbiAgICAgICAgICAgICAgICAmLFxuICAgICAgICAgICAgICAgICY6aG92ZXIsXG4gICAgICAgICAgICAgICAgJjpmb2N1cyB7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogbm9uZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJjo6cGxhY2Vob2xkZXIge1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfUkVNQVJLX0xJR0hUfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJjo6LW1zLWNsZWFyIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAke1xuICAgICAgICAgICAgICAgICFlbXB0eSAmJlxuICAgICAgICAgICAgICAgICFkaXNhYmxlZCAmJlxuICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAgICAgOmhvdmVyLFxuICAgICAgICAgICAgICAgICAgICAmLiR7Zm9jdXNlZENsc30ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLiR7Y2xlYXJDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJHtcbiAgICAgICAgICAgICAgICBmb2N1c2VkICYmXG4gICAgICAgICAgICAgICAgIWRpc2FibGVkICYmXG4gICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgICAgICAmJiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfREVGQVVMVF9EQVJLfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogJHtEVC5UX0NPTE9SX0xJTkVfUFJJTUFSWV9ERUZBVUxUfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9JTlBVVF9DT0xPUl9CR19BQ1RJVkV9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJHtcbiAgICAgICAgICAgICAgICBzdGF0dXMgPT09ICdlcnJvcicgJiZcbiAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgICAgICYmJiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3gtc2hhZG93OiAke0RULlRfU0hBRE9XX0lOU0VUX0VSUk9SfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogJHtEVC5UX0NPTE9SX0xJTkVfRVJST1JfREFSS307XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfQ09MT1JfQkdfRVJST1JfTElHSFR9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJHtcbiAgICAgICAgICAgICAgICBkaXNhYmxlZCAmJlxuICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAgICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgJixcbiAgICAgICAgICAgICAgICAgICAgJjpob3ZlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfRElTQUJMRUR9O1xuICAgICAgICAgICAgICAgICAgICAgICAgLyogZml4IGRpc2FibGVkIGNvbG9yIGluIHNhZmFyaSAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgLXdlYmtpdC10ZXh0LWZpbGwtY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RJU0FCTEVEfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogJHtEVC5UX0NPTE9SX0xJTkVfRElTQUJMRURfTElHSFR9O1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RJU0FCTEVEX0xJR0hUfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICR7XG4gICAgICAgICAgICAgICAgY3VzdG9tU3R5bGU/LmJvcmRlciAmJlxuICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAke2N1c3RvbVN0eWxlLmJvcmRlcn0gIWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICBgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAke1xuICAgICAgICAgICAgICAgIGN1c3RvbVN0eWxlPy5ib3hTaGFkb3cgJiZcbiAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgICAgIGJveC1zaGFkb3c6ICR7Y3VzdG9tU3R5bGUuYm94U2hhZG93fSAhaW1wb3J0YW50O1xuICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICR7XG4gICAgICAgICAgICAgICAgY3VzdG9tU3R5bGU/LmJhY2tncm91bmQgJiZcbiAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7Y3VzdG9tU3R5bGUuYmFja2dyb3VuZH0gIWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICBgXG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG4iXX0= */")), ";label:InputWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0lucHV0L3N0eWxlL2luZGV4LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUErR2tCIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0lucHV0L3N0eWxlL2luZGV4LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDU1NQcm9wZXJ0aWVzLCBSZWFjdE5vZGUsIEhUTUxBdHRyaWJ1dGVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IFN2Z0ljb24gZnJvbSAnc3JjL2NvbXBvbmVudHMvU3ZnSWNvbic7XG5pbXBvcnQge1xuICAgIGV4ZWNTaXplQ2FsLFxuICAgIGdldENvbnRyb2xGb250U2l6ZUJ5U2l6ZSxcbiAgICBnZXRDb250cm9sSGVpZ2h0QnlTaXplLFxuICAgIGdldENvbnRyb2xTcGFjaW5nQnlTaXplLFxuICAgIHNXcmFwXG59IGZyb20gJ3NyYy9zdHlsZSc7XG5pbXBvcnQgY29uZmlnIGZyb20gJ3NyYy9jb25maWcnO1xuaW1wb3J0IEljb24gZnJvbSAnc3JjL2NvbXBvbmVudHMvSWNvbic7XG5pbXBvcnQgZGVwcmVjYXRlZExvZyBmcm9tICdzcmMvdXRpbHMvZGVwcmVjYXRlZExvZyc7XG5cbmltcG9ydCB7IElucHV0UHJvcHMgfSBmcm9tICcuLi9JbnB1dCc7XG5cbmNvbnN0IHsgcHJlZml4Q2xzOiBfcHJlZml4Q2xzIH0gPSBjb25maWc7XG5leHBvcnQgY29uc3QgcHJlZml4Q2xzID0gX3ByZWZpeENscyArICctaW5wdXQnO1xuZXhwb3J0IGNvbnN0IGZvY3VzZWRDbHMgPSBwcmVmaXhDbHMgKyAnLWZvY3VzZWQnO1xuZXhwb3J0IGNvbnN0IGRpc2FibGVkQ2xzID0gcHJlZml4Q2xzICsgJy1kaXNhYmxlZCc7XG5leHBvcnQgY29uc3QgYmxvY2tDbHMgPSBwcmVmaXhDbHMgKyAnLWJsb2NrJztcbmV4cG9ydCBjb25zdCBpbnB1dFByZWZpeENscyA9IHByZWZpeENscyArICctcHJlZml4JztcbmV4cG9ydCBjb25zdCBpbnB1dFN1ZmZpeENscyA9IHByZWZpeENscyArICctc3VmZml4JztcbmV4cG9ydCBjb25zdCBjbGVhckNscyA9IHByZWZpeENscyArICctY2xlYXInO1xuZXhwb3J0IGNvbnN0IGlucHV0QmxvY2tXcmFwQ2xzID0gcHJlZml4Q2xzICsgJy1ibG9jay13cmFwJztcblxuZXhwb3J0IGNvbnN0IFNlYXJjaEljb24gPSBzdHlsZWQoU3ZnSWNvbilgXG4gICAgY3Vyc29yOiBwb2ludGVyO1xuYDtcblxuY29uc3QgZGVwcmVjYXRlZExvZ0Zvckljb24gPSBkZXByZWNhdGVkTG9nKCdJbnB1dCBpY29uJywgJ3N1ZmZpeCcpO1xuZXhwb3J0IGNvbnN0IFByZWZpeCA9IFJlYWN0Lm1lbW8oZnVuY3Rpb24gUHJlZml4KHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbj86IFJlYWN0Tm9kZSB9KSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuID8gPHNwYW4gY2xhc3NOYW1lPXtpbnB1dFByZWZpeENsc30+e2NoaWxkcmVufTwvc3Bhbj4gOiBudWxsO1xufSk7XG5leHBvcnQgY29uc3QgU3VmZml4ID0gUmVhY3QubWVtbyhmdW5jdGlvbiBTdWZmaXgoe1xuICAgIGljb24sXG4gICAgY2hpbGRyZW5cbn06IHtcbiAgICBpY29uPzogc3RyaW5nIHwgUmVhY3ROb2RlO1xuICAgIGNoaWxkcmVuPzogUmVhY3ROb2RlO1xufSkge1xuICAgIGlmIChpY29uKSB7XG4gICAgICAgIGRlcHJlY2F0ZWRMb2dGb3JJY29uKCk7XG4gICAgfVxuICAgIGxldCBzdWZmaXggPSBudWxsO1xuICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgICBzdWZmaXggPSBjaGlsZHJlbjtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpY29uID09PSAnc3RyaW5nJykge1xuICAgICAgICBzdWZmaXggPSA8SWNvbiB0eXBlPXtpY29ufSAvPjtcbiAgICB9IGVsc2UgaWYgKFJlYWN0LmlzVmFsaWRFbGVtZW50KGljb24pKSB7XG4gICAgICAgIHN1ZmZpeCA9IGljb247XG4gICAgfVxuICAgIGlmIChzdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuIDxzcGFuIGNsYXNzTmFtZT17aW5wdXRTdWZmaXhDbHN9PntzdWZmaXh9PC9zcGFuPjtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59KTtcbmV4cG9ydCBjb25zdCBDbGVhciA9IFJlYWN0Lm1lbW8oZnVuY3Rpb24gQ2xlYXIoe1xuICAgIGNsZWFyYWJsZSxcbiAgICAuLi5yZXN0XG59OiBQaWNrPElucHV0UHJvcHMsICdjbGVhcmFibGUnPiAmIEhUTUxBdHRyaWJ1dGVzPEhUTUxTcGFuRWxlbWVudD4pIHtcbiAgICBpZiAoY2xlYXJhYmxlKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8c3BhbiB7Li4ucmVzdH0gY2xhc3NOYW1lPXtjbGVhckNsc30+XG4gICAgICAgICAgICAgICAgPFN2Z0ljb24gdHlwZT1cImNyb3NzLWNpcmNsZS1maWxsZWRcIiAvPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn0pO1xuXG5leHBvcnQgY29uc3QgSW5wdXRQYXJ0ID0gc3R5bGVkLnNwYW48eyBzdHJldGNoPzogYm9vbGVhbjsgdmlzaWJsZT86IGJvb2xlYW4gfT4ocHJvcHMgPT4ge1xuICAgIGNvbnN0IHsgc3RyZXRjaCwgdmlzaWJsZSB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIGNzc2BcbiAgICAgICAgJiYmIHtcbiAgICAgICAgICAgIGZsZXg6ICR7c3RyZXRjaCA/ICcxIDEgYXV0bycgOiAnMCAwIGF1dG8nfTtcbiAgICAgICAgICAgIHZpc2liaWxpdHk6ICR7dmlzaWJsZSA9PT0gZmFsc2UgPyAnaGlkZGVuJyA6ICd2aXNpYmxlJ307XG4gICAgICAgIH1cbiAgICBgO1xufSk7XG5cbmV4cG9ydCB0eXBlIElucHV0V3JhcFByb3BzID0gUGljazxJbnB1dFByb3BzLCAnYmxvY2snIHwgJ2Rpc2FibGVkJyB8ICdzdGF0dXMnIHwgJ2N1c3RvbVN0eWxlJz4gJlxuICAgIFJlcXVpcmVkPFBpY2s8SW5wdXRQcm9wcywgJ3NpemUnPj4gJiB7XG4gICAgICAgIGZvY3VzZWQ/OiBib29sZWFuO1xuICAgICAgICBlbXB0eT86IGJvb2xlYW47XG4gICAgICAgIGN1cnNvcj86IENTU1Byb3BlcnRpZXNbJ2N1cnNvciddO1xuICAgIH07XG5cbmV4cG9ydCBjb25zdCBJbnB1dFdyYXAgPSBzV3JhcDxJbnB1dFdyYXBQcm9wcywgSFRNTFNwYW5FbGVtZW50Pih7XG4gICAgY2xhc3NOYW1lOiAoeyBmb2N1c2VkLCBkaXNhYmxlZCwgYmxvY2sgfSkgPT5cbiAgICAgICAgY2xhc3NuYW1lcyhwcmVmaXhDbHMsIGZvY3VzZWQgJiYgZm9jdXNlZENscywgZGlzYWJsZWQgJiYgZGlzYWJsZWRDbHMsIGJsb2NrICYmIGJsb2NrQ2xzKVxufSkoXG4gICAgc3R5bGVkLnNwYW4ocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH0sXG4gICAgICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgICAgIHNpemUsXG4gICAgICAgICAgICBmb2N1c2VkLFxuICAgICAgICAgICAgc3RhdHVzLFxuICAgICAgICAgICAgY3VzdG9tU3R5bGUsXG4gICAgICAgICAgICBlbXB0eSxcbiAgICAgICAgICAgIGN1cnNvclxuICAgICAgICB9ID0gcHJvcHM7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IGdldENvbnRyb2xIZWlnaHRCeVNpemUoRFQsIHNpemUpO1xuICAgICAgICBjb25zdCBmb250U2l6ZSA9IGdldENvbnRyb2xGb250U2l6ZUJ5U2l6ZShEVCwgc2l6ZSk7XG4gICAgICAgIGNvbnN0IHNwYWNpbmcgPSBnZXRDb250cm9sU3BhY2luZ0J5U2l6ZShEVCwgc2l6ZSk7XG4gICAgICAgIGNvbnN0IGhhbGZTcGFjaW5nID0gZXhlY1NpemVDYWwoc3BhY2luZywgJy8yJyk7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICBoZWlnaHQ6ICR7aGVpZ2h0fTtcbiAgICAgICAgICAgIG1heC13aWR0aDogMTAwJTtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogJHtmb250U2l6ZX07XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAke0RULlRfQ09STkVSX1NNfTtcbiAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0xJR0hUfTtcbiAgICAgICAgICAgIGZpbGw6IGN1cnJlbnRDb2xvcjtcbiAgICAgICAgICAgIGJvcmRlcjogJHtEVC5UX0xJTkVfV0lEVEhfQkFTRX0gc29saWQgJHtEVC5UX0NPTE9SX0xJTkVfREVGQVVMVF9EQVJLfTtcbiAgICAgICAgICAgIGJveC1zaGFkb3c6ICR7RFQuVF9TSEFET1dfSU5TRVRfREVGQVVMVH07XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfSU5QVVRfQ09MT1JfQkdfREVGQVVMVH07XG4gICAgICAgICAgICB0cmFuc2l0aW9uOiAuMThzIGN1YmljLWJlemllciguNCwwLC4yLDEpO1xuICAgICAgICAgICAgY3Vyc29yOiAke2N1cnNvcn07XG4gICAgICAgICAgICBkaXNwbGF5OiAgaW5saW5lLWZsZXg7XG4gICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICAgICAgICAgICAgOmhvdmVyIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfREVGQVVMVF9EQVJLfTtcbiAgICAgICAgICAgICAgICBib3JkZXItY29sb3I6ICR7RFQuVF9DT0xPUl9MSU5FX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0lOUFVUX0NPTE9SX0JHX0FDVElWRX07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC4ke2NsZWFyQ2xzfSB7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfUkVNQVJLX0xJR0hUfTtcbiAgICAgICAgICAgICAgICBmaWxsOiAke0RULlRfQ09MT1JfVEVYVF9SRU1BUktfTElHSFR9O1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzLCBjb2xvciAwLjFzLCBmaWxsIDAuMXM7XG4gICAgICAgICAgICAgICAgJjpob3ZlciB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9SRU1BUktfREFSS307XG4gICAgICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9URVhUX1JFTUFSS19EQVJLfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAmLCAuJHtpbnB1dFByZWZpeENsc30sIC4ke2lucHV0U3VmZml4Q2xzfSwgLiR7Y2xlYXJDbHN9LCBpbnB1dCwgJHtJbnB1dFBhcnR9IHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwICR7aGFsZlNwYWNpbmd9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAmLiR7YmxvY2tDbHN9IHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAuJHtpbnB1dFByZWZpeENsc30sIC4ke2lucHV0U3VmZml4Q2xzfSwgJHtJbnB1dFBhcnR9IHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICBmbGV4OiAwIDAgYXV0bztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICR7SW5wdXRQYXJ0fVtoaWRkZW5dIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLiR7aW5wdXRCbG9ja1dyYXBDbHN9IHtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6ICR7eyBzbTogMTYsIG1kOiAxOCwgbGc6IDIwIH1bc2l6ZV19cHg7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgICAgICAgICAgbWluLXdpZHRoOiAwcHg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlucHV0IHtcbiAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiBpbmhlcml0O1xuICAgICAgICAgICAgICAgIGNvbG9yOiBpbmhlcml0O1xuICAgICAgICAgICAgICAgIGZsZXg6IDEgMSAxMzBweDtcbiAgICAgICAgICAgICAgICBtaW4td2lkdGg6IDBweDtcbiAgICAgICAgICAgICAgICAmLFxuICAgICAgICAgICAgICAgICY6aG92ZXIsXG4gICAgICAgICAgICAgICAgJjpmb2N1cyB7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogbm9uZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJjo6cGxhY2Vob2xkZXIge1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfUkVNQVJLX0xJR0hUfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJjo6LW1zLWNsZWFyIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAke1xuICAgICAgICAgICAgICAgICFlbXB0eSAmJlxuICAgICAgICAgICAgICAgICFkaXNhYmxlZCAmJlxuICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAgICAgOmhvdmVyLFxuICAgICAgICAgICAgICAgICAgICAmLiR7Zm9jdXNlZENsc30ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLiR7Y2xlYXJDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJHtcbiAgICAgICAgICAgICAgICBmb2N1c2VkICYmXG4gICAgICAgICAgICAgICAgIWRpc2FibGVkICYmXG4gICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgICAgICAmJiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfREVGQVVMVF9EQVJLfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogJHtEVC5UX0NPTE9SX0xJTkVfUFJJTUFSWV9ERUZBVUxUfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9JTlBVVF9DT0xPUl9CR19BQ1RJVkV9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJHtcbiAgICAgICAgICAgICAgICBzdGF0dXMgPT09ICdlcnJvcicgJiZcbiAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgICAgICYmJiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3gtc2hhZG93OiAke0RULlRfU0hBRE9XX0lOU0VUX0VSUk9SfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogJHtEVC5UX0NPTE9SX0xJTkVfRVJST1JfREFSS307XG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfQ09MT1JfQkdfRVJST1JfTElHSFR9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJHtcbiAgICAgICAgICAgICAgICBkaXNhYmxlZCAmJlxuICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAgICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICAgICAgICAgICAgICAgICAgJixcbiAgICAgICAgICAgICAgICAgICAgJjpob3ZlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfRElTQUJMRUR9O1xuICAgICAgICAgICAgICAgICAgICAgICAgLyogZml4IGRpc2FibGVkIGNvbG9yIGluIHNhZmFyaSAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgLXdlYmtpdC10ZXh0LWZpbGwtY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RJU0FCTEVEfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogJHtEVC5UX0NPTE9SX0xJTkVfRElTQUJMRURfTElHSFR9O1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RJU0FCTEVEX0xJR0hUfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICR7XG4gICAgICAgICAgICAgICAgY3VzdG9tU3R5bGU/LmJvcmRlciAmJlxuICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAke2N1c3RvbVN0eWxlLmJvcmRlcn0gIWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICBgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAke1xuICAgICAgICAgICAgICAgIGN1c3RvbVN0eWxlPy5ib3hTaGFkb3cgJiZcbiAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgICAgIGJveC1zaGFkb3c6ICR7Y3VzdG9tU3R5bGUuYm94U2hhZG93fSAhaW1wb3J0YW50O1xuICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICR7XG4gICAgICAgICAgICAgICAgY3VzdG9tU3R5bGU/LmJhY2tncm91bmQgJiZcbiAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7Y3VzdG9tU3R5bGUuYmFja2dyb3VuZH0gIWltcG9ydGFudDtcbiAgICAgICAgICAgICAgICBgXG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG4iXX0= */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.InputWrap = InputWrap;