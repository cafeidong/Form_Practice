"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PopupMenuWrap = exports.MenuWrap = exports.SubMenuIcon = exports.selectStyleCls = exports.iconCls = exports.contentCls = exports.checkboxCls = exports.popupContentCls = exports.popupWrapCls = exports.popupTitleCls = exports.collapseWrapCls = exports.collapseTitleCls = exports.selectallWrapCls = exports.selectedCls = exports.lastCls = exports.firstCls = exports.disabledCls = exports.itemCls = exports.multipleCls = exports.singleCls = exports.blockCls = exports.prefixCls = void 0;

var _newArrowCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/newArrowCheck"));

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _core = require("@emotion/core");

var _SvgIcon = _interopRequireDefault(require("../../../components/SvgIcon"));

var _config = _interopRequireDefault(require("../../../config"));

var _isFirefox = _interopRequireDefault(require("../../../utils/isFirefox"));

var _style = require("../../../style");

var _this = void 0;

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

var _prefixCls = _config.default.prefixCls;
var prefixCls = _prefixCls + '-menu';
exports.prefixCls = prefixCls;
var blockCls = _prefixCls + '-block';
exports.blockCls = blockCls;
var singleCls = prefixCls + '-single';
exports.singleCls = singleCls;
var multipleCls = prefixCls + '-multiple';
exports.multipleCls = multipleCls;
var itemCls = prefixCls + '-item';
exports.itemCls = itemCls;
var disabledCls = itemCls + '-disabled';
exports.disabledCls = disabledCls;
var firstCls = prefixCls + '-first';
exports.firstCls = firstCls;
var lastCls = prefixCls + '-last';
exports.lastCls = lastCls;
var selectedCls = prefixCls + '-selected';
exports.selectedCls = selectedCls;
var selectallWrapCls = prefixCls + '-selectall-wrap';
exports.selectallWrapCls = selectallWrapCls;
var collapseTitleCls = prefixCls + '-collapse-title';
exports.collapseTitleCls = collapseTitleCls;
var collapseWrapCls = prefixCls + '-collapse-wrap';
exports.collapseWrapCls = collapseWrapCls;
var popupTitleCls = prefixCls + '-popup-title';
exports.popupTitleCls = popupTitleCls;
var popupWrapCls = prefixCls + '-popup-wrap';
exports.popupWrapCls = popupWrapCls;
var popupContentCls = prefixCls + '-popup-content';
exports.popupContentCls = popupContentCls;
var checkboxCls = prefixCls + '-checkbox';
exports.checkboxCls = checkboxCls;
var contentCls = prefixCls + '-content';
exports.contentCls = contentCls;
var iconCls = prefixCls + '-icon';
exports.iconCls = iconCls;
var selectStyleCls = prefixCls + '-select-style';
exports.selectStyleCls = selectStyleCls;
var SubMenuIcon = ( /*#__PURE__*/0, _styledBase.default)(_SvgIcon.default, {
  target: "e1iurm1r0",
  label: "SubMenuIcon"
})(process.env.NODE_ENV === "production" ? {
  name: "o437sy",
  styles: "position:absolute;right:8px;top:50%;margin-top:-0.5em;"
} : {
  name: "o437sy",
  styles: "position:absolute;right:8px;top:50%;margin-top:-0.5em;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lbnUvc3R5bGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNkIwQyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9NZW51L3N0eWxlL2luZGV4LnRzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5cbmltcG9ydCBTdmdJY29uIGZyb20gJ3NyYy9jb21wb25lbnRzL1N2Z0ljb24nO1xuaW1wb3J0IGNvbmZpZyBmcm9tICdzcmMvY29uZmlnJztcbmltcG9ydCBpc0ZpcmVmb3ggZnJvbSAnc3JjL3V0aWxzL2lzRmlyZWZveCc7XG5pbXBvcnQgeyBzV3JhcCwgVGhlbWUgfSBmcm9tICdzcmMvc3R5bGUnO1xuXG5jb25zdCB7IHByZWZpeENsczogX3ByZWZpeENscyB9ID0gY29uZmlnO1xuZXhwb3J0IGNvbnN0IHByZWZpeENscyA9IF9wcmVmaXhDbHMgKyAnLW1lbnUnO1xuZXhwb3J0IGNvbnN0IGJsb2NrQ2xzID0gX3ByZWZpeENscyArICctYmxvY2snO1xuZXhwb3J0IGNvbnN0IHNpbmdsZUNscyA9IHByZWZpeENscyArICctc2luZ2xlJztcbmV4cG9ydCBjb25zdCBtdWx0aXBsZUNscyA9IHByZWZpeENscyArICctbXVsdGlwbGUnO1xuZXhwb3J0IGNvbnN0IGl0ZW1DbHMgPSBwcmVmaXhDbHMgKyAnLWl0ZW0nO1xuZXhwb3J0IGNvbnN0IGRpc2FibGVkQ2xzID0gaXRlbUNscyArICctZGlzYWJsZWQnO1xuZXhwb3J0IGNvbnN0IGZpcnN0Q2xzID0gcHJlZml4Q2xzICsgJy1maXJzdCc7XG5leHBvcnQgY29uc3QgbGFzdENscyA9IHByZWZpeENscyArICctbGFzdCc7XG5leHBvcnQgY29uc3Qgc2VsZWN0ZWRDbHMgPSBwcmVmaXhDbHMgKyAnLXNlbGVjdGVkJztcbmV4cG9ydCBjb25zdCBzZWxlY3RhbGxXcmFwQ2xzID0gcHJlZml4Q2xzICsgJy1zZWxlY3RhbGwtd3JhcCc7XG5leHBvcnQgY29uc3QgY29sbGFwc2VUaXRsZUNscyA9IHByZWZpeENscyArICctY29sbGFwc2UtdGl0bGUnO1xuZXhwb3J0IGNvbnN0IGNvbGxhcHNlV3JhcENscyA9IHByZWZpeENscyArICctY29sbGFwc2Utd3JhcCc7XG5leHBvcnQgY29uc3QgcG9wdXBUaXRsZUNscyA9IHByZWZpeENscyArICctcG9wdXAtdGl0bGUnO1xuZXhwb3J0IGNvbnN0IHBvcHVwV3JhcENscyA9IHByZWZpeENscyArICctcG9wdXAtd3JhcCc7XG5leHBvcnQgY29uc3QgcG9wdXBDb250ZW50Q2xzID0gcHJlZml4Q2xzICsgJy1wb3B1cC1jb250ZW50JztcbmV4cG9ydCBjb25zdCBjaGVja2JveENscyA9IHByZWZpeENscyArICctY2hlY2tib3gnO1xuZXhwb3J0IGNvbnN0IGNvbnRlbnRDbHMgPSBwcmVmaXhDbHMgKyAnLWNvbnRlbnQnO1xuZXhwb3J0IGNvbnN0IGljb25DbHMgPSBwcmVmaXhDbHMgKyAnLWljb24nO1xuZXhwb3J0IGNvbnN0IHNlbGVjdFN0eWxlQ2xzID0gcHJlZml4Q2xzICsgJy1zZWxlY3Qtc3R5bGUnO1xuXG5leHBvcnQgY29uc3QgU3ViTWVudUljb24gPSBzdHlsZWQoU3ZnSWNvbilgXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHJpZ2h0OiA4cHg7XG4gICAgdG9wOiA1MCU7XG4gICAgbWFyZ2luLXRvcDogLTAuNWVtO1xuYDtcblxuaW50ZXJmYWNlIE1lbnVQcm9wcyB7XG4gICAgY3VzdG9tU3R5bGU/OiB7XG4gICAgICAgIG1heEhlaWdodD86IHN0cmluZztcbiAgICAgICAgbWF4V2lkdGg/OiBzdHJpbmc7XG4gICAgfTtcbn1cblxuY29uc3QgbWVudVN0eWxlID0gKHtcbiAgICBjdXN0b21TdHlsZSA9IHt9LFxuICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxufTogTWVudVByb3BzICYge1xuICAgIHRoZW1lOiBUaGVtZTtcbn0pID0+IHtcbiAgICBjb25zdCB7IG1heFdpZHRoIH0gPSBjdXN0b21TdHlsZTtcbiAgICByZXR1cm4gY3NzYFxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgIG92ZXJmbG93OiBhdXRvO1xuICAgICAgICBsaW5lLWhlaWdodDogMzJweDtcbiAgICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgICBtYXgtd2lkdGg6ICR7bWF4V2lkdGggfHwgJzM2MHB4J307XG4gICAgICAgIG1pbi13aWR0aDogNjRweDtcbiAgICAgICAgcGFkZGluZzogNHB4IDBweDtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMnB4O1xuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgICAgICBib3JkZXItc3R5bGU6IG5vbmUgIWltcG9ydGFudDtcbiAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfREVGQVVMVF9EQVJLfTtcbiAgICAgICAgYm94LXNoYWRvdzogJHtEVC5UX1NIQURPV19CTE9DS19ERUZBVUxUX0xHfTtcbiAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX01FTlV9O1xuXG4gICAgICAgICR7XG4gICAgICAgICAgICBpc0ZpcmVmb3ggJiZcbiAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAmIHtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3cteTogc2Nyb2xsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGBcbiAgICAgICAgfVxuICAgICAgICAuJHtpdGVtQ2xzfS4ke3NlbGVjdFN0eWxlQ2xzfSB7XG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgICAgIC4ke2NvbnRlbnRDbHN9IHtcbiAgICAgICAgICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAmLiR7c2VsZWN0ZWRDbHN9IC4ke2NvbnRlbnRDbHN9IHtcbiAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfUFJJTUFSWV9ERUZBVUxUfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC4ke2ljb25DbHN9IHtcbiAgICAgICAgICAgICAgICBmaWxsOiAke0RULlRfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFR9O1xuICAgICAgICAgICAgICAgIHdpZHRoOiAxNnB4O1xuICAgICAgICAgICAgICAgIGhlaWdodDogMTZweDtcbiAgICAgICAgICAgICAgICBmbGV4OiAwIDAgMTZweDtcbiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogOHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC4ke2l0ZW1DbHN9LCAuJHtzZWxlY3RhbGxXcmFwQ2xzfSwgLiR7cG9wdXBUaXRsZUNsc30sLiR7Y29sbGFwc2VUaXRsZUNsc30ge1xuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICAgIDpob3ZlciB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfSE9WRVJ9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC4ke2l0ZW1DbHN9LCAuJHtzZWxlY3RhbGxXcmFwQ2xzfSwgLiR7cG9wdXBUaXRsZUNsc30sIC4ke2NvbGxhcHNlVGl0bGVDbHN9IHtcbiAgICAgICAgICAgIHBhZGRpbmc6IDAgOHB4O1xuICAgICAgICAgICAgbWFyZ2luOiAwIDhweDtcbiAgICAgICAgfVxuICAgICAgICAuJHtpdGVtQ2xzfS4ke2Rpc2FibGVkQ2xzfSwgLiR7c2VsZWN0YWxsV3JhcENsc30uJHtkaXNhYmxlZENsc30ge1xuICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RJU0FCTEVEfTtcbiAgICAgICAgICAgIGN1cnNvcjogZGVmYXVsdDtcbiAgICAgICAgICAgIDpob3ZlciB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogbm9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAuJHtwb3B1cFRpdGxlQ2xzfSwgLiR7Y29sbGFwc2VUaXRsZUNsc30ge1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgcGFkZGluZzogMHB4IDQwcHggMHB4IDhweDtcbiAgICAgICAgICAgICYuJHtzZWxlY3RlZENsc30ge1xuICAgICAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFR9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICYuJHtzaW5nbGVDbHN9IC4ke2l0ZW1DbHN9LiR7c2VsZWN0ZWRDbHN9IHtcbiAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFR9O1xuICAgICAgICB9XG4gICAgICAgIC4ke2NvbGxhcHNlV3JhcENsc30ge1xuICAgICAgICAgICAgOjphZnRlcixcbiAgICAgICAgICAgIDo6YmVmb3JlIHtcbiAgICAgICAgICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgICBtYXJnaW46IDRweCA4cHg7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxcHg7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0xJTkVfREVGQVVMVF9MSUdIVH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLiR7Zmlyc3RDbHN9LiR7Y29sbGFwc2VXcmFwQ2xzfSB7XG4gICAgICAgICAgICA6OmJlZm9yZSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAuJHtjb2xsYXBzZVdyYXBDbHN9Ky4ke2NvbGxhcHNlV3JhcENsc30ge1xuICAgICAgICAgICAgOjpiZWZvcmUge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLiR7bGFzdENsc30uJHtjb2xsYXBzZVdyYXBDbHN9IHtcbiAgICAgICAgICAgIDo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLiR7Y2hlY2tib3hDbHN9IHtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICB9XG4gICAgYDtcbn07XG5cbmV4cG9ydCBjb25zdCBNZW51V3JhcCA9IHNXcmFwPE1lbnVQcm9wcz4oe30pKFxuICAgIHN0eWxlZC5kaXYocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7IGN1c3RvbVN0eWxlID0ge30gfSA9IHByb3BzO1xuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgJHttZW51U3R5bGUocHJvcHMpfTtcbiAgICAgICAgICAgIG1heC1oZWlnaHQ6ICR7Y3VzdG9tU3R5bGUubWF4SGVpZ2h0fTtcbiAgICAgICAgICAgICYuJHtibG9ja0Nsc30ge1xuICAgICAgICAgICAgICAgIG1pbi13aWR0aDogMDtcbiAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IG5vbmU7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgICAgIGJveC1zaGFkb3c6IG5vbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBQb3B1cE1lbnVXcmFwID0gc1dyYXA8TWVudVByb3BzPih7fSkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICBwYWRkaW5nOiAwcHggOHB4O1xuICAgICAgICAgICAgLiR7cG9wdXBDb250ZW50Q2xzfSB7XG4gICAgICAgICAgICAgICAgJHttZW51U3R5bGUocHJvcHMpfTtcbiAgICAgICAgICAgICAgICBtYXgtaGVpZ2h0OiAzODBweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9KVxuKTtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
exports.SubMenuIcon = SubMenuIcon;

var _ref = process.env.NODE_ENV === "production" ? {
  name: "bheqav",
  styles: "&{overflow-y:scroll;}"
} : {
  name: "bheqav",
  styles: "&{overflow-y:scroll;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lbnUvc3R5bGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcUVlIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lbnUvc3R5bGUvaW5kZXgudHMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcblxuaW1wb3J0IFN2Z0ljb24gZnJvbSAnc3JjL2NvbXBvbmVudHMvU3ZnSWNvbic7XG5pbXBvcnQgY29uZmlnIGZyb20gJ3NyYy9jb25maWcnO1xuaW1wb3J0IGlzRmlyZWZveCBmcm9tICdzcmMvdXRpbHMvaXNGaXJlZm94JztcbmltcG9ydCB7IHNXcmFwLCBUaGVtZSB9IGZyb20gJ3NyYy9zdHlsZSc7XG5cbmNvbnN0IHsgcHJlZml4Q2xzOiBfcHJlZml4Q2xzIH0gPSBjb25maWc7XG5leHBvcnQgY29uc3QgcHJlZml4Q2xzID0gX3ByZWZpeENscyArICctbWVudSc7XG5leHBvcnQgY29uc3QgYmxvY2tDbHMgPSBfcHJlZml4Q2xzICsgJy1ibG9jayc7XG5leHBvcnQgY29uc3Qgc2luZ2xlQ2xzID0gcHJlZml4Q2xzICsgJy1zaW5nbGUnO1xuZXhwb3J0IGNvbnN0IG11bHRpcGxlQ2xzID0gcHJlZml4Q2xzICsgJy1tdWx0aXBsZSc7XG5leHBvcnQgY29uc3QgaXRlbUNscyA9IHByZWZpeENscyArICctaXRlbSc7XG5leHBvcnQgY29uc3QgZGlzYWJsZWRDbHMgPSBpdGVtQ2xzICsgJy1kaXNhYmxlZCc7XG5leHBvcnQgY29uc3QgZmlyc3RDbHMgPSBwcmVmaXhDbHMgKyAnLWZpcnN0JztcbmV4cG9ydCBjb25zdCBsYXN0Q2xzID0gcHJlZml4Q2xzICsgJy1sYXN0JztcbmV4cG9ydCBjb25zdCBzZWxlY3RlZENscyA9IHByZWZpeENscyArICctc2VsZWN0ZWQnO1xuZXhwb3J0IGNvbnN0IHNlbGVjdGFsbFdyYXBDbHMgPSBwcmVmaXhDbHMgKyAnLXNlbGVjdGFsbC13cmFwJztcbmV4cG9ydCBjb25zdCBjb2xsYXBzZVRpdGxlQ2xzID0gcHJlZml4Q2xzICsgJy1jb2xsYXBzZS10aXRsZSc7XG5leHBvcnQgY29uc3QgY29sbGFwc2VXcmFwQ2xzID0gcHJlZml4Q2xzICsgJy1jb2xsYXBzZS13cmFwJztcbmV4cG9ydCBjb25zdCBwb3B1cFRpdGxlQ2xzID0gcHJlZml4Q2xzICsgJy1wb3B1cC10aXRsZSc7XG5leHBvcnQgY29uc3QgcG9wdXBXcmFwQ2xzID0gcHJlZml4Q2xzICsgJy1wb3B1cC13cmFwJztcbmV4cG9ydCBjb25zdCBwb3B1cENvbnRlbnRDbHMgPSBwcmVmaXhDbHMgKyAnLXBvcHVwLWNvbnRlbnQnO1xuZXhwb3J0IGNvbnN0IGNoZWNrYm94Q2xzID0gcHJlZml4Q2xzICsgJy1jaGVja2JveCc7XG5leHBvcnQgY29uc3QgY29udGVudENscyA9IHByZWZpeENscyArICctY29udGVudCc7XG5leHBvcnQgY29uc3QgaWNvbkNscyA9IHByZWZpeENscyArICctaWNvbic7XG5leHBvcnQgY29uc3Qgc2VsZWN0U3R5bGVDbHMgPSBwcmVmaXhDbHMgKyAnLXNlbGVjdC1zdHlsZSc7XG5cbmV4cG9ydCBjb25zdCBTdWJNZW51SWNvbiA9IHN0eWxlZChTdmdJY29uKWBcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgcmlnaHQ6IDhweDtcbiAgICB0b3A6IDUwJTtcbiAgICBtYXJnaW4tdG9wOiAtMC41ZW07XG5gO1xuXG5pbnRlcmZhY2UgTWVudVByb3BzIHtcbiAgICBjdXN0b21TdHlsZT86IHtcbiAgICAgICAgbWF4SGVpZ2h0Pzogc3RyaW5nO1xuICAgICAgICBtYXhXaWR0aD86IHN0cmluZztcbiAgICB9O1xufVxuXG5jb25zdCBtZW51U3R5bGUgPSAoe1xuICAgIGN1c3RvbVN0eWxlID0ge30sXG4gICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG59OiBNZW51UHJvcHMgJiB7XG4gICAgdGhlbWU6IFRoZW1lO1xufSkgPT4ge1xuICAgIGNvbnN0IHsgbWF4V2lkdGggfSA9IGN1c3RvbVN0eWxlO1xuICAgIHJldHVybiBjc3NgXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAzMnB4O1xuICAgICAgICBmb250LXNpemU6IDEycHg7XG4gICAgICAgIG1heC13aWR0aDogJHttYXhXaWR0aCB8fCAnMzYwcHgnfTtcbiAgICAgICAgbWluLXdpZHRoOiA2NHB4O1xuICAgICAgICBwYWRkaW5nOiA0cHggMHB4O1xuICAgICAgICBib3JkZXItcmFkaXVzOiAycHg7XG4gICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgICAgIGJvcmRlci1zdHlsZTogbm9uZSAhaW1wb3J0YW50O1xuICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICBib3gtc2hhZG93OiAke0RULlRfU0hBRE9XX0JMT0NLX0RFRkFVTFRfTEd9O1xuICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfQ09MT1JfQkdfTUVOVX07XG5cbiAgICAgICAgJHtcbiAgICAgICAgICAgIGlzRmlyZWZveCAmJlxuICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgICYge1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdy15OiBzY3JvbGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgYFxuICAgICAgICB9XG4gICAgICAgIC4ke2l0ZW1DbHN9LiR7c2VsZWN0U3R5bGVDbHN9IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICAgICAgLiR7Y29udGVudENsc30ge1xuICAgICAgICAgICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgICAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgICAgICAgICAgZmxleDogMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICYuJHtzZWxlY3RlZENsc30gLiR7Y29udGVudENsc30ge1xuICAgICAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFR9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLiR7aWNvbkNsc30ge1xuICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVH07XG4gICAgICAgICAgICAgICAgd2lkdGg6IDE2cHg7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxNnB4O1xuICAgICAgICAgICAgICAgIGZsZXg6IDAgMCAxNnB4O1xuICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiA4cHg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLiR7aXRlbUNsc30sIC4ke3NlbGVjdGFsbFdyYXBDbHN9LCAuJHtwb3B1cFRpdGxlQ2xzfSwuJHtjb2xsYXBzZVRpdGxlQ2xzfSB7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICAgICAgOmhvdmVyIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfQ09MT1JfQkdfREVGQVVMVF9IT1ZFUn07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLiR7aXRlbUNsc30sIC4ke3NlbGVjdGFsbFdyYXBDbHN9LCAuJHtwb3B1cFRpdGxlQ2xzfSwgLiR7Y29sbGFwc2VUaXRsZUNsc30ge1xuICAgICAgICAgICAgcGFkZGluZzogMCA4cHg7XG4gICAgICAgICAgICBtYXJnaW46IDAgOHB4O1xuICAgICAgICB9XG4gICAgICAgIC4ke2l0ZW1DbHN9LiR7ZGlzYWJsZWRDbHN9LCAuJHtzZWxlY3RhbGxXcmFwQ2xzfS4ke2Rpc2FibGVkQ2xzfSB7XG4gICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfRElTQUJMRUR9O1xuICAgICAgICAgICAgY3Vyc29yOiBkZWZhdWx0O1xuICAgICAgICAgICAgOmhvdmVyIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC4ke3BvcHVwVGl0bGVDbHN9LCAuJHtjb2xsYXBzZVRpdGxlQ2xzfSB7XG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgICBwYWRkaW5nOiAwcHggNDBweCAwcHggOHB4O1xuICAgICAgICAgICAgJi4ke3NlbGVjdGVkQ2xzfSB7XG4gICAgICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgJi4ke3NpbmdsZUNsc30gLiR7aXRlbUNsc30uJHtzZWxlY3RlZENsc30ge1xuICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVH07XG4gICAgICAgIH1cbiAgICAgICAgLiR7Y29sbGFwc2VXcmFwQ2xzfSB7XG4gICAgICAgICAgICA6OmFmdGVyLFxuICAgICAgICAgICAgOjpiZWZvcmUge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgICAgIG1hcmdpbjogNHB4IDhweDtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDFweDtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfQ09MT1JfTElORV9ERUZBVUxUX0xJR0hUfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAuJHtmaXJzdENsc30uJHtjb2xsYXBzZVdyYXBDbHN9IHtcbiAgICAgICAgICAgIDo6YmVmb3JlIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC4ke2NvbGxhcHNlV3JhcENsc30rLiR7Y29sbGFwc2VXcmFwQ2xzfSB7XG4gICAgICAgICAgICA6OmJlZm9yZSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAuJHtsYXN0Q2xzfS4ke2NvbGxhcHNlV3JhcENsc30ge1xuICAgICAgICAgICAgOjphZnRlciB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAuJHtjaGVja2JveENsc30ge1xuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIH1cbiAgICBgO1xufTtcblxuZXhwb3J0IGNvbnN0IE1lbnVXcmFwID0gc1dyYXA8TWVudVByb3BzPih7fSkoXG4gICAgc3R5bGVkLmRpdihwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHsgY3VzdG9tU3R5bGUgPSB7fSB9ID0gcHJvcHM7XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICAke21lbnVTdHlsZShwcm9wcyl9O1xuICAgICAgICAgICAgbWF4LWhlaWdodDogJHtjdXN0b21TdHlsZS5tYXhIZWlnaHR9O1xuICAgICAgICAgICAgJi4ke2Jsb2NrQ2xzfSB7XG4gICAgICAgICAgICAgICAgbWluLXdpZHRoOiAwO1xuICAgICAgICAgICAgICAgIG1heC13aWR0aDogbm9uZTtcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICAgICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IFBvcHVwTWVudVdyYXAgPSBzV3JhcDxNZW51UHJvcHM+KHt9KShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgIHBhZGRpbmc6IDBweCA4cHg7XG4gICAgICAgICAgICAuJHtwb3B1cENvbnRlbnRDbHN9IHtcbiAgICAgICAgICAgICAgICAke21lbnVTdHlsZShwcm9wcyl9O1xuICAgICAgICAgICAgICAgIG1heC1oZWlnaHQ6IDM4MHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var menuStyle = function menuStyle(_ref2) {
  (0, _newArrowCheck2.default)(this, _this);
  var _ref2$customStyle = _ref2.customStyle,
      customStyle = _ref2$customStyle === void 0 ? {} : _ref2$customStyle,
      DT = _ref2.theme.designTokens;
  var maxWidth = customStyle.maxWidth;
  return /*#__PURE__*/(0, _core.css)("display:inline-block;box-sizing:border-box;overflow:auto;line-height:32px;font-size:12px;max-width:", maxWidth || '360px', ";min-width:64px;padding:4px 0px;border-radius:2px;text-align:left;border-style:none !important;border:none;color:", DT.T_COLOR_TEXT_DEFAULT_DARK, ";box-shadow:", DT.T_SHADOW_BLOCK_DEFAULT_LG, ";background:", DT.T_COLOR_BG_MENU, ";", _isFirefox.default && _ref, " .", itemCls, ".", selectStyleCls, "{display:flex;align-items:center;justify-content:space-between;.", contentCls, "{text-overflow:ellipsis;overflow:hidden;flex:1;}&.", selectedCls, " .", contentCls, "{color:", DT.T_COLOR_TEXT_PRIMARY_DEFAULT, ";}.", iconCls, "{fill:", DT.T_COLOR_TEXT_PRIMARY_DEFAULT, ";width:16px;height:16px;flex:0 0 16px;margin-left:8px;}}.", itemCls, ",.", selectallWrapCls, ",.", popupTitleCls, ",.", collapseTitleCls, "{cursor:pointer;white-space:nowrap;text-decoration:none;text-overflow:ellipsis;overflow:hidden;:hover{background:", DT.T_COLOR_BG_DEFAULT_HOVER, ";}}.", itemCls, ",.", selectallWrapCls, ",.", popupTitleCls, ",.", collapseTitleCls, "{padding:0 8px;margin:0 8px;}.", itemCls, ".", disabledCls, ",.", selectallWrapCls, ".", disabledCls, "{color:", DT.T_COLOR_TEXT_DISABLED, ";cursor:default;:hover{background:none;}}.", popupTitleCls, ",.", collapseTitleCls, "{position:relative;padding:0px 40px 0px 8px;&.", selectedCls, "{color:", DT.T_COLOR_TEXT_PRIMARY_DEFAULT, ";}}&.", singleCls, " .", itemCls, ".", selectedCls, "{color:", DT.T_COLOR_TEXT_PRIMARY_DEFAULT, ";}.", collapseWrapCls, "{::after,::before{content:'';display:block;margin:4px 8px;height:1px;background:", DT.T_COLOR_LINE_DEFAULT_LIGHT, ";}}.", firstCls, ".", collapseWrapCls, "{::before{display:none;}}.", collapseWrapCls, "+.", collapseWrapCls, "{::before{display:none;}}.", lastCls, ".", collapseWrapCls, "{::after{display:none;}}.", checkboxCls, "{width:100%;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lbnUvc3R5bGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0RjIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lbnUvc3R5bGUvaW5kZXgudHMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcblxuaW1wb3J0IFN2Z0ljb24gZnJvbSAnc3JjL2NvbXBvbmVudHMvU3ZnSWNvbic7XG5pbXBvcnQgY29uZmlnIGZyb20gJ3NyYy9jb25maWcnO1xuaW1wb3J0IGlzRmlyZWZveCBmcm9tICdzcmMvdXRpbHMvaXNGaXJlZm94JztcbmltcG9ydCB7IHNXcmFwLCBUaGVtZSB9IGZyb20gJ3NyYy9zdHlsZSc7XG5cbmNvbnN0IHsgcHJlZml4Q2xzOiBfcHJlZml4Q2xzIH0gPSBjb25maWc7XG5leHBvcnQgY29uc3QgcHJlZml4Q2xzID0gX3ByZWZpeENscyArICctbWVudSc7XG5leHBvcnQgY29uc3QgYmxvY2tDbHMgPSBfcHJlZml4Q2xzICsgJy1ibG9jayc7XG5leHBvcnQgY29uc3Qgc2luZ2xlQ2xzID0gcHJlZml4Q2xzICsgJy1zaW5nbGUnO1xuZXhwb3J0IGNvbnN0IG11bHRpcGxlQ2xzID0gcHJlZml4Q2xzICsgJy1tdWx0aXBsZSc7XG5leHBvcnQgY29uc3QgaXRlbUNscyA9IHByZWZpeENscyArICctaXRlbSc7XG5leHBvcnQgY29uc3QgZGlzYWJsZWRDbHMgPSBpdGVtQ2xzICsgJy1kaXNhYmxlZCc7XG5leHBvcnQgY29uc3QgZmlyc3RDbHMgPSBwcmVmaXhDbHMgKyAnLWZpcnN0JztcbmV4cG9ydCBjb25zdCBsYXN0Q2xzID0gcHJlZml4Q2xzICsgJy1sYXN0JztcbmV4cG9ydCBjb25zdCBzZWxlY3RlZENscyA9IHByZWZpeENscyArICctc2VsZWN0ZWQnO1xuZXhwb3J0IGNvbnN0IHNlbGVjdGFsbFdyYXBDbHMgPSBwcmVmaXhDbHMgKyAnLXNlbGVjdGFsbC13cmFwJztcbmV4cG9ydCBjb25zdCBjb2xsYXBzZVRpdGxlQ2xzID0gcHJlZml4Q2xzICsgJy1jb2xsYXBzZS10aXRsZSc7XG5leHBvcnQgY29uc3QgY29sbGFwc2VXcmFwQ2xzID0gcHJlZml4Q2xzICsgJy1jb2xsYXBzZS13cmFwJztcbmV4cG9ydCBjb25zdCBwb3B1cFRpdGxlQ2xzID0gcHJlZml4Q2xzICsgJy1wb3B1cC10aXRsZSc7XG5leHBvcnQgY29uc3QgcG9wdXBXcmFwQ2xzID0gcHJlZml4Q2xzICsgJy1wb3B1cC13cmFwJztcbmV4cG9ydCBjb25zdCBwb3B1cENvbnRlbnRDbHMgPSBwcmVmaXhDbHMgKyAnLXBvcHVwLWNvbnRlbnQnO1xuZXhwb3J0IGNvbnN0IGNoZWNrYm94Q2xzID0gcHJlZml4Q2xzICsgJy1jaGVja2JveCc7XG5leHBvcnQgY29uc3QgY29udGVudENscyA9IHByZWZpeENscyArICctY29udGVudCc7XG5leHBvcnQgY29uc3QgaWNvbkNscyA9IHByZWZpeENscyArICctaWNvbic7XG5leHBvcnQgY29uc3Qgc2VsZWN0U3R5bGVDbHMgPSBwcmVmaXhDbHMgKyAnLXNlbGVjdC1zdHlsZSc7XG5cbmV4cG9ydCBjb25zdCBTdWJNZW51SWNvbiA9IHN0eWxlZChTdmdJY29uKWBcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgcmlnaHQ6IDhweDtcbiAgICB0b3A6IDUwJTtcbiAgICBtYXJnaW4tdG9wOiAtMC41ZW07XG5gO1xuXG5pbnRlcmZhY2UgTWVudVByb3BzIHtcbiAgICBjdXN0b21TdHlsZT86IHtcbiAgICAgICAgbWF4SGVpZ2h0Pzogc3RyaW5nO1xuICAgICAgICBtYXhXaWR0aD86IHN0cmluZztcbiAgICB9O1xufVxuXG5jb25zdCBtZW51U3R5bGUgPSAoe1xuICAgIGN1c3RvbVN0eWxlID0ge30sXG4gICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG59OiBNZW51UHJvcHMgJiB7XG4gICAgdGhlbWU6IFRoZW1lO1xufSkgPT4ge1xuICAgIGNvbnN0IHsgbWF4V2lkdGggfSA9IGN1c3RvbVN0eWxlO1xuICAgIHJldHVybiBjc3NgXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAzMnB4O1xuICAgICAgICBmb250LXNpemU6IDEycHg7XG4gICAgICAgIG1heC13aWR0aDogJHttYXhXaWR0aCB8fCAnMzYwcHgnfTtcbiAgICAgICAgbWluLXdpZHRoOiA2NHB4O1xuICAgICAgICBwYWRkaW5nOiA0cHggMHB4O1xuICAgICAgICBib3JkZXItcmFkaXVzOiAycHg7XG4gICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgICAgIGJvcmRlci1zdHlsZTogbm9uZSAhaW1wb3J0YW50O1xuICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICBib3gtc2hhZG93OiAke0RULlRfU0hBRE9XX0JMT0NLX0RFRkFVTFRfTEd9O1xuICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfQ09MT1JfQkdfTUVOVX07XG5cbiAgICAgICAgJHtcbiAgICAgICAgICAgIGlzRmlyZWZveCAmJlxuICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgICYge1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdy15OiBzY3JvbGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgYFxuICAgICAgICB9XG4gICAgICAgIC4ke2l0ZW1DbHN9LiR7c2VsZWN0U3R5bGVDbHN9IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICAgICAgLiR7Y29udGVudENsc30ge1xuICAgICAgICAgICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgICAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgICAgICAgICAgZmxleDogMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICYuJHtzZWxlY3RlZENsc30gLiR7Y29udGVudENsc30ge1xuICAgICAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFR9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLiR7aWNvbkNsc30ge1xuICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVH07XG4gICAgICAgICAgICAgICAgd2lkdGg6IDE2cHg7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxNnB4O1xuICAgICAgICAgICAgICAgIGZsZXg6IDAgMCAxNnB4O1xuICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiA4cHg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLiR7aXRlbUNsc30sIC4ke3NlbGVjdGFsbFdyYXBDbHN9LCAuJHtwb3B1cFRpdGxlQ2xzfSwuJHtjb2xsYXBzZVRpdGxlQ2xzfSB7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICAgICAgOmhvdmVyIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfQ09MT1JfQkdfREVGQVVMVF9IT1ZFUn07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLiR7aXRlbUNsc30sIC4ke3NlbGVjdGFsbFdyYXBDbHN9LCAuJHtwb3B1cFRpdGxlQ2xzfSwgLiR7Y29sbGFwc2VUaXRsZUNsc30ge1xuICAgICAgICAgICAgcGFkZGluZzogMCA4cHg7XG4gICAgICAgICAgICBtYXJnaW46IDAgOHB4O1xuICAgICAgICB9XG4gICAgICAgIC4ke2l0ZW1DbHN9LiR7ZGlzYWJsZWRDbHN9LCAuJHtzZWxlY3RhbGxXcmFwQ2xzfS4ke2Rpc2FibGVkQ2xzfSB7XG4gICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfRElTQUJMRUR9O1xuICAgICAgICAgICAgY3Vyc29yOiBkZWZhdWx0O1xuICAgICAgICAgICAgOmhvdmVyIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC4ke3BvcHVwVGl0bGVDbHN9LCAuJHtjb2xsYXBzZVRpdGxlQ2xzfSB7XG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgICBwYWRkaW5nOiAwcHggNDBweCAwcHggOHB4O1xuICAgICAgICAgICAgJi4ke3NlbGVjdGVkQ2xzfSB7XG4gICAgICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgJi4ke3NpbmdsZUNsc30gLiR7aXRlbUNsc30uJHtzZWxlY3RlZENsc30ge1xuICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVH07XG4gICAgICAgIH1cbiAgICAgICAgLiR7Y29sbGFwc2VXcmFwQ2xzfSB7XG4gICAgICAgICAgICA6OmFmdGVyLFxuICAgICAgICAgICAgOjpiZWZvcmUge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgICAgIG1hcmdpbjogNHB4IDhweDtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDFweDtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfQ09MT1JfTElORV9ERUZBVUxUX0xJR0hUfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAuJHtmaXJzdENsc30uJHtjb2xsYXBzZVdyYXBDbHN9IHtcbiAgICAgICAgICAgIDo6YmVmb3JlIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC4ke2NvbGxhcHNlV3JhcENsc30rLiR7Y29sbGFwc2VXcmFwQ2xzfSB7XG4gICAgICAgICAgICA6OmJlZm9yZSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAuJHtsYXN0Q2xzfS4ke2NvbGxhcHNlV3JhcENsc30ge1xuICAgICAgICAgICAgOjphZnRlciB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAuJHtjaGVja2JveENsc30ge1xuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIH1cbiAgICBgO1xufTtcblxuZXhwb3J0IGNvbnN0IE1lbnVXcmFwID0gc1dyYXA8TWVudVByb3BzPih7fSkoXG4gICAgc3R5bGVkLmRpdihwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHsgY3VzdG9tU3R5bGUgPSB7fSB9ID0gcHJvcHM7XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICAke21lbnVTdHlsZShwcm9wcyl9O1xuICAgICAgICAgICAgbWF4LWhlaWdodDogJHtjdXN0b21TdHlsZS5tYXhIZWlnaHR9O1xuICAgICAgICAgICAgJi4ke2Jsb2NrQ2xzfSB7XG4gICAgICAgICAgICAgICAgbWluLXdpZHRoOiAwO1xuICAgICAgICAgICAgICAgIG1heC13aWR0aDogbm9uZTtcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICAgICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IFBvcHVwTWVudVdyYXAgPSBzV3JhcDxNZW51UHJvcHM+KHt9KShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgIHBhZGRpbmc6IDBweCA4cHg7XG4gICAgICAgICAgICAuJHtwb3B1cENvbnRlbnRDbHN9IHtcbiAgICAgICAgICAgICAgICAke21lbnVTdHlsZShwcm9wcyl9O1xuICAgICAgICAgICAgICAgIG1heC1oZWlnaHQ6IDM4MHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuIl19 */"));
}.bind(void 0);

var MenuWrap = (0, _style.sWrap)({})((0, _styledBase.default)("div", {
  target: "e1iurm1r1",
  label: "MenuWrap"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var _props$customStyle = props.customStyle,
      customStyle = _props$customStyle === void 0 ? {} : _props$customStyle;
  return /*#__PURE__*/(0, _core.css)(menuStyle(props), ";max-height:", customStyle.maxHeight, ";&.", blockCls, "{min-width:0;max-width:none;width:100%;height:100%;box-shadow:none;};label:MenuWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lbnUvc3R5bGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0trQiIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9NZW51L3N0eWxlL2luZGV4LnRzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5cbmltcG9ydCBTdmdJY29uIGZyb20gJ3NyYy9jb21wb25lbnRzL1N2Z0ljb24nO1xuaW1wb3J0IGNvbmZpZyBmcm9tICdzcmMvY29uZmlnJztcbmltcG9ydCBpc0ZpcmVmb3ggZnJvbSAnc3JjL3V0aWxzL2lzRmlyZWZveCc7XG5pbXBvcnQgeyBzV3JhcCwgVGhlbWUgfSBmcm9tICdzcmMvc3R5bGUnO1xuXG5jb25zdCB7IHByZWZpeENsczogX3ByZWZpeENscyB9ID0gY29uZmlnO1xuZXhwb3J0IGNvbnN0IHByZWZpeENscyA9IF9wcmVmaXhDbHMgKyAnLW1lbnUnO1xuZXhwb3J0IGNvbnN0IGJsb2NrQ2xzID0gX3ByZWZpeENscyArICctYmxvY2snO1xuZXhwb3J0IGNvbnN0IHNpbmdsZUNscyA9IHByZWZpeENscyArICctc2luZ2xlJztcbmV4cG9ydCBjb25zdCBtdWx0aXBsZUNscyA9IHByZWZpeENscyArICctbXVsdGlwbGUnO1xuZXhwb3J0IGNvbnN0IGl0ZW1DbHMgPSBwcmVmaXhDbHMgKyAnLWl0ZW0nO1xuZXhwb3J0IGNvbnN0IGRpc2FibGVkQ2xzID0gaXRlbUNscyArICctZGlzYWJsZWQnO1xuZXhwb3J0IGNvbnN0IGZpcnN0Q2xzID0gcHJlZml4Q2xzICsgJy1maXJzdCc7XG5leHBvcnQgY29uc3QgbGFzdENscyA9IHByZWZpeENscyArICctbGFzdCc7XG5leHBvcnQgY29uc3Qgc2VsZWN0ZWRDbHMgPSBwcmVmaXhDbHMgKyAnLXNlbGVjdGVkJztcbmV4cG9ydCBjb25zdCBzZWxlY3RhbGxXcmFwQ2xzID0gcHJlZml4Q2xzICsgJy1zZWxlY3RhbGwtd3JhcCc7XG5leHBvcnQgY29uc3QgY29sbGFwc2VUaXRsZUNscyA9IHByZWZpeENscyArICctY29sbGFwc2UtdGl0bGUnO1xuZXhwb3J0IGNvbnN0IGNvbGxhcHNlV3JhcENscyA9IHByZWZpeENscyArICctY29sbGFwc2Utd3JhcCc7XG5leHBvcnQgY29uc3QgcG9wdXBUaXRsZUNscyA9IHByZWZpeENscyArICctcG9wdXAtdGl0bGUnO1xuZXhwb3J0IGNvbnN0IHBvcHVwV3JhcENscyA9IHByZWZpeENscyArICctcG9wdXAtd3JhcCc7XG5leHBvcnQgY29uc3QgcG9wdXBDb250ZW50Q2xzID0gcHJlZml4Q2xzICsgJy1wb3B1cC1jb250ZW50JztcbmV4cG9ydCBjb25zdCBjaGVja2JveENscyA9IHByZWZpeENscyArICctY2hlY2tib3gnO1xuZXhwb3J0IGNvbnN0IGNvbnRlbnRDbHMgPSBwcmVmaXhDbHMgKyAnLWNvbnRlbnQnO1xuZXhwb3J0IGNvbnN0IGljb25DbHMgPSBwcmVmaXhDbHMgKyAnLWljb24nO1xuZXhwb3J0IGNvbnN0IHNlbGVjdFN0eWxlQ2xzID0gcHJlZml4Q2xzICsgJy1zZWxlY3Qtc3R5bGUnO1xuXG5leHBvcnQgY29uc3QgU3ViTWVudUljb24gPSBzdHlsZWQoU3ZnSWNvbilgXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHJpZ2h0OiA4cHg7XG4gICAgdG9wOiA1MCU7XG4gICAgbWFyZ2luLXRvcDogLTAuNWVtO1xuYDtcblxuaW50ZXJmYWNlIE1lbnVQcm9wcyB7XG4gICAgY3VzdG9tU3R5bGU/OiB7XG4gICAgICAgIG1heEhlaWdodD86IHN0cmluZztcbiAgICAgICAgbWF4V2lkdGg/OiBzdHJpbmc7XG4gICAgfTtcbn1cblxuY29uc3QgbWVudVN0eWxlID0gKHtcbiAgICBjdXN0b21TdHlsZSA9IHt9LFxuICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxufTogTWVudVByb3BzICYge1xuICAgIHRoZW1lOiBUaGVtZTtcbn0pID0+IHtcbiAgICBjb25zdCB7IG1heFdpZHRoIH0gPSBjdXN0b21TdHlsZTtcbiAgICByZXR1cm4gY3NzYFxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgIG92ZXJmbG93OiBhdXRvO1xuICAgICAgICBsaW5lLWhlaWdodDogMzJweDtcbiAgICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgICBtYXgtd2lkdGg6ICR7bWF4V2lkdGggfHwgJzM2MHB4J307XG4gICAgICAgIG1pbi13aWR0aDogNjRweDtcbiAgICAgICAgcGFkZGluZzogNHB4IDBweDtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMnB4O1xuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgICAgICBib3JkZXItc3R5bGU6IG5vbmUgIWltcG9ydGFudDtcbiAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfREVGQVVMVF9EQVJLfTtcbiAgICAgICAgYm94LXNoYWRvdzogJHtEVC5UX1NIQURPV19CTE9DS19ERUZBVUxUX0xHfTtcbiAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX01FTlV9O1xuXG4gICAgICAgICR7XG4gICAgICAgICAgICBpc0ZpcmVmb3ggJiZcbiAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAmIHtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3cteTogc2Nyb2xsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGBcbiAgICAgICAgfVxuICAgICAgICAuJHtpdGVtQ2xzfS4ke3NlbGVjdFN0eWxlQ2xzfSB7XG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgICAgIC4ke2NvbnRlbnRDbHN9IHtcbiAgICAgICAgICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAmLiR7c2VsZWN0ZWRDbHN9IC4ke2NvbnRlbnRDbHN9IHtcbiAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfUFJJTUFSWV9ERUZBVUxUfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC4ke2ljb25DbHN9IHtcbiAgICAgICAgICAgICAgICBmaWxsOiAke0RULlRfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFR9O1xuICAgICAgICAgICAgICAgIHdpZHRoOiAxNnB4O1xuICAgICAgICAgICAgICAgIGhlaWdodDogMTZweDtcbiAgICAgICAgICAgICAgICBmbGV4OiAwIDAgMTZweDtcbiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogOHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC4ke2l0ZW1DbHN9LCAuJHtzZWxlY3RhbGxXcmFwQ2xzfSwgLiR7cG9wdXBUaXRsZUNsc30sLiR7Y29sbGFwc2VUaXRsZUNsc30ge1xuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICAgIDpob3ZlciB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfSE9WRVJ9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC4ke2l0ZW1DbHN9LCAuJHtzZWxlY3RhbGxXcmFwQ2xzfSwgLiR7cG9wdXBUaXRsZUNsc30sIC4ke2NvbGxhcHNlVGl0bGVDbHN9IHtcbiAgICAgICAgICAgIHBhZGRpbmc6IDAgOHB4O1xuICAgICAgICAgICAgbWFyZ2luOiAwIDhweDtcbiAgICAgICAgfVxuICAgICAgICAuJHtpdGVtQ2xzfS4ke2Rpc2FibGVkQ2xzfSwgLiR7c2VsZWN0YWxsV3JhcENsc30uJHtkaXNhYmxlZENsc30ge1xuICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RJU0FCTEVEfTtcbiAgICAgICAgICAgIGN1cnNvcjogZGVmYXVsdDtcbiAgICAgICAgICAgIDpob3ZlciB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogbm9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAuJHtwb3B1cFRpdGxlQ2xzfSwgLiR7Y29sbGFwc2VUaXRsZUNsc30ge1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgcGFkZGluZzogMHB4IDQwcHggMHB4IDhweDtcbiAgICAgICAgICAgICYuJHtzZWxlY3RlZENsc30ge1xuICAgICAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFR9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICYuJHtzaW5nbGVDbHN9IC4ke2l0ZW1DbHN9LiR7c2VsZWN0ZWRDbHN9IHtcbiAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFR9O1xuICAgICAgICB9XG4gICAgICAgIC4ke2NvbGxhcHNlV3JhcENsc30ge1xuICAgICAgICAgICAgOjphZnRlcixcbiAgICAgICAgICAgIDo6YmVmb3JlIHtcbiAgICAgICAgICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgICBtYXJnaW46IDRweCA4cHg7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxcHg7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0xJTkVfREVGQVVMVF9MSUdIVH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLiR7Zmlyc3RDbHN9LiR7Y29sbGFwc2VXcmFwQ2xzfSB7XG4gICAgICAgICAgICA6OmJlZm9yZSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAuJHtjb2xsYXBzZVdyYXBDbHN9Ky4ke2NvbGxhcHNlV3JhcENsc30ge1xuICAgICAgICAgICAgOjpiZWZvcmUge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLiR7bGFzdENsc30uJHtjb2xsYXBzZVdyYXBDbHN9IHtcbiAgICAgICAgICAgIDo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLiR7Y2hlY2tib3hDbHN9IHtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICB9XG4gICAgYDtcbn07XG5cbmV4cG9ydCBjb25zdCBNZW51V3JhcCA9IHNXcmFwPE1lbnVQcm9wcz4oe30pKFxuICAgIHN0eWxlZC5kaXYocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7IGN1c3RvbVN0eWxlID0ge30gfSA9IHByb3BzO1xuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgJHttZW51U3R5bGUocHJvcHMpfTtcbiAgICAgICAgICAgIG1heC1oZWlnaHQ6ICR7Y3VzdG9tU3R5bGUubWF4SGVpZ2h0fTtcbiAgICAgICAgICAgICYuJHtibG9ja0Nsc30ge1xuICAgICAgICAgICAgICAgIG1pbi13aWR0aDogMDtcbiAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IG5vbmU7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgICAgIGJveC1zaGFkb3c6IG5vbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBQb3B1cE1lbnVXcmFwID0gc1dyYXA8TWVudVByb3BzPih7fSkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICBwYWRkaW5nOiAwcHggOHB4O1xuICAgICAgICAgICAgLiR7cG9wdXBDb250ZW50Q2xzfSB7XG4gICAgICAgICAgICAgICAgJHttZW51U3R5bGUocHJvcHMpfTtcbiAgICAgICAgICAgICAgICBtYXgtaGVpZ2h0OiAzODBweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9KVxuKTtcbiJdfQ== */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lbnUvc3R5bGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBOEpJIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lbnUvc3R5bGUvaW5kZXgudHMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcblxuaW1wb3J0IFN2Z0ljb24gZnJvbSAnc3JjL2NvbXBvbmVudHMvU3ZnSWNvbic7XG5pbXBvcnQgY29uZmlnIGZyb20gJ3NyYy9jb25maWcnO1xuaW1wb3J0IGlzRmlyZWZveCBmcm9tICdzcmMvdXRpbHMvaXNGaXJlZm94JztcbmltcG9ydCB7IHNXcmFwLCBUaGVtZSB9IGZyb20gJ3NyYy9zdHlsZSc7XG5cbmNvbnN0IHsgcHJlZml4Q2xzOiBfcHJlZml4Q2xzIH0gPSBjb25maWc7XG5leHBvcnQgY29uc3QgcHJlZml4Q2xzID0gX3ByZWZpeENscyArICctbWVudSc7XG5leHBvcnQgY29uc3QgYmxvY2tDbHMgPSBfcHJlZml4Q2xzICsgJy1ibG9jayc7XG5leHBvcnQgY29uc3Qgc2luZ2xlQ2xzID0gcHJlZml4Q2xzICsgJy1zaW5nbGUnO1xuZXhwb3J0IGNvbnN0IG11bHRpcGxlQ2xzID0gcHJlZml4Q2xzICsgJy1tdWx0aXBsZSc7XG5leHBvcnQgY29uc3QgaXRlbUNscyA9IHByZWZpeENscyArICctaXRlbSc7XG5leHBvcnQgY29uc3QgZGlzYWJsZWRDbHMgPSBpdGVtQ2xzICsgJy1kaXNhYmxlZCc7XG5leHBvcnQgY29uc3QgZmlyc3RDbHMgPSBwcmVmaXhDbHMgKyAnLWZpcnN0JztcbmV4cG9ydCBjb25zdCBsYXN0Q2xzID0gcHJlZml4Q2xzICsgJy1sYXN0JztcbmV4cG9ydCBjb25zdCBzZWxlY3RlZENscyA9IHByZWZpeENscyArICctc2VsZWN0ZWQnO1xuZXhwb3J0IGNvbnN0IHNlbGVjdGFsbFdyYXBDbHMgPSBwcmVmaXhDbHMgKyAnLXNlbGVjdGFsbC13cmFwJztcbmV4cG9ydCBjb25zdCBjb2xsYXBzZVRpdGxlQ2xzID0gcHJlZml4Q2xzICsgJy1jb2xsYXBzZS10aXRsZSc7XG5leHBvcnQgY29uc3QgY29sbGFwc2VXcmFwQ2xzID0gcHJlZml4Q2xzICsgJy1jb2xsYXBzZS13cmFwJztcbmV4cG9ydCBjb25zdCBwb3B1cFRpdGxlQ2xzID0gcHJlZml4Q2xzICsgJy1wb3B1cC10aXRsZSc7XG5leHBvcnQgY29uc3QgcG9wdXBXcmFwQ2xzID0gcHJlZml4Q2xzICsgJy1wb3B1cC13cmFwJztcbmV4cG9ydCBjb25zdCBwb3B1cENvbnRlbnRDbHMgPSBwcmVmaXhDbHMgKyAnLXBvcHVwLWNvbnRlbnQnO1xuZXhwb3J0IGNvbnN0IGNoZWNrYm94Q2xzID0gcHJlZml4Q2xzICsgJy1jaGVja2JveCc7XG5leHBvcnQgY29uc3QgY29udGVudENscyA9IHByZWZpeENscyArICctY29udGVudCc7XG5leHBvcnQgY29uc3QgaWNvbkNscyA9IHByZWZpeENscyArICctaWNvbic7XG5leHBvcnQgY29uc3Qgc2VsZWN0U3R5bGVDbHMgPSBwcmVmaXhDbHMgKyAnLXNlbGVjdC1zdHlsZSc7XG5cbmV4cG9ydCBjb25zdCBTdWJNZW51SWNvbiA9IHN0eWxlZChTdmdJY29uKWBcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgcmlnaHQ6IDhweDtcbiAgICB0b3A6IDUwJTtcbiAgICBtYXJnaW4tdG9wOiAtMC41ZW07XG5gO1xuXG5pbnRlcmZhY2UgTWVudVByb3BzIHtcbiAgICBjdXN0b21TdHlsZT86IHtcbiAgICAgICAgbWF4SGVpZ2h0Pzogc3RyaW5nO1xuICAgICAgICBtYXhXaWR0aD86IHN0cmluZztcbiAgICB9O1xufVxuXG5jb25zdCBtZW51U3R5bGUgPSAoe1xuICAgIGN1c3RvbVN0eWxlID0ge30sXG4gICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG59OiBNZW51UHJvcHMgJiB7XG4gICAgdGhlbWU6IFRoZW1lO1xufSkgPT4ge1xuICAgIGNvbnN0IHsgbWF4V2lkdGggfSA9IGN1c3RvbVN0eWxlO1xuICAgIHJldHVybiBjc3NgXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAzMnB4O1xuICAgICAgICBmb250LXNpemU6IDEycHg7XG4gICAgICAgIG1heC13aWR0aDogJHttYXhXaWR0aCB8fCAnMzYwcHgnfTtcbiAgICAgICAgbWluLXdpZHRoOiA2NHB4O1xuICAgICAgICBwYWRkaW5nOiA0cHggMHB4O1xuICAgICAgICBib3JkZXItcmFkaXVzOiAycHg7XG4gICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgICAgIGJvcmRlci1zdHlsZTogbm9uZSAhaW1wb3J0YW50O1xuICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICBib3gtc2hhZG93OiAke0RULlRfU0hBRE9XX0JMT0NLX0RFRkFVTFRfTEd9O1xuICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfQ09MT1JfQkdfTUVOVX07XG5cbiAgICAgICAgJHtcbiAgICAgICAgICAgIGlzRmlyZWZveCAmJlxuICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgICYge1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdy15OiBzY3JvbGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgYFxuICAgICAgICB9XG4gICAgICAgIC4ke2l0ZW1DbHN9LiR7c2VsZWN0U3R5bGVDbHN9IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICAgICAgLiR7Y29udGVudENsc30ge1xuICAgICAgICAgICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgICAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgICAgICAgICAgZmxleDogMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICYuJHtzZWxlY3RlZENsc30gLiR7Y29udGVudENsc30ge1xuICAgICAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFR9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLiR7aWNvbkNsc30ge1xuICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVH07XG4gICAgICAgICAgICAgICAgd2lkdGg6IDE2cHg7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxNnB4O1xuICAgICAgICAgICAgICAgIGZsZXg6IDAgMCAxNnB4O1xuICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiA4cHg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLiR7aXRlbUNsc30sIC4ke3NlbGVjdGFsbFdyYXBDbHN9LCAuJHtwb3B1cFRpdGxlQ2xzfSwuJHtjb2xsYXBzZVRpdGxlQ2xzfSB7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICAgICAgOmhvdmVyIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfQ09MT1JfQkdfREVGQVVMVF9IT1ZFUn07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLiR7aXRlbUNsc30sIC4ke3NlbGVjdGFsbFdyYXBDbHN9LCAuJHtwb3B1cFRpdGxlQ2xzfSwgLiR7Y29sbGFwc2VUaXRsZUNsc30ge1xuICAgICAgICAgICAgcGFkZGluZzogMCA4cHg7XG4gICAgICAgICAgICBtYXJnaW46IDAgOHB4O1xuICAgICAgICB9XG4gICAgICAgIC4ke2l0ZW1DbHN9LiR7ZGlzYWJsZWRDbHN9LCAuJHtzZWxlY3RhbGxXcmFwQ2xzfS4ke2Rpc2FibGVkQ2xzfSB7XG4gICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfRElTQUJMRUR9O1xuICAgICAgICAgICAgY3Vyc29yOiBkZWZhdWx0O1xuICAgICAgICAgICAgOmhvdmVyIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC4ke3BvcHVwVGl0bGVDbHN9LCAuJHtjb2xsYXBzZVRpdGxlQ2xzfSB7XG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgICBwYWRkaW5nOiAwcHggNDBweCAwcHggOHB4O1xuICAgICAgICAgICAgJi4ke3NlbGVjdGVkQ2xzfSB7XG4gICAgICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgJi4ke3NpbmdsZUNsc30gLiR7aXRlbUNsc30uJHtzZWxlY3RlZENsc30ge1xuICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVH07XG4gICAgICAgIH1cbiAgICAgICAgLiR7Y29sbGFwc2VXcmFwQ2xzfSB7XG4gICAgICAgICAgICA6OmFmdGVyLFxuICAgICAgICAgICAgOjpiZWZvcmUge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgICAgIG1hcmdpbjogNHB4IDhweDtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDFweDtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfQ09MT1JfTElORV9ERUZBVUxUX0xJR0hUfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAuJHtmaXJzdENsc30uJHtjb2xsYXBzZVdyYXBDbHN9IHtcbiAgICAgICAgICAgIDo6YmVmb3JlIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC4ke2NvbGxhcHNlV3JhcENsc30rLiR7Y29sbGFwc2VXcmFwQ2xzfSB7XG4gICAgICAgICAgICA6OmJlZm9yZSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAuJHtsYXN0Q2xzfS4ke2NvbGxhcHNlV3JhcENsc30ge1xuICAgICAgICAgICAgOjphZnRlciB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAuJHtjaGVja2JveENsc30ge1xuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIH1cbiAgICBgO1xufTtcblxuZXhwb3J0IGNvbnN0IE1lbnVXcmFwID0gc1dyYXA8TWVudVByb3BzPih7fSkoXG4gICAgc3R5bGVkLmRpdihwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHsgY3VzdG9tU3R5bGUgPSB7fSB9ID0gcHJvcHM7XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICAke21lbnVTdHlsZShwcm9wcyl9O1xuICAgICAgICAgICAgbWF4LWhlaWdodDogJHtjdXN0b21TdHlsZS5tYXhIZWlnaHR9O1xuICAgICAgICAgICAgJi4ke2Jsb2NrQ2xzfSB7XG4gICAgICAgICAgICAgICAgbWluLXdpZHRoOiAwO1xuICAgICAgICAgICAgICAgIG1heC13aWR0aDogbm9uZTtcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICAgICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IFBvcHVwTWVudVdyYXAgPSBzV3JhcDxNZW51UHJvcHM+KHt9KShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgIHBhZGRpbmc6IDBweCA4cHg7XG4gICAgICAgICAgICAuJHtwb3B1cENvbnRlbnRDbHN9IHtcbiAgICAgICAgICAgICAgICAke21lbnVTdHlsZShwcm9wcyl9O1xuICAgICAgICAgICAgICAgIG1heC1oZWlnaHQ6IDM4MHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuIl19 */"));
exports.MenuWrap = MenuWrap;
var PopupMenuWrap = (0, _style.sWrap)({})(( /*#__PURE__*/0, _styledBase.default)('div', {
  target: "e1iurm1r2",
  label: "PopupMenuWrap"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  return /*#__PURE__*/(0, _core.css)("display:inline-block;padding:0px 8px;.", popupContentCls, "{", menuStyle(props), ";max-height:380px;};label:PopupMenuWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lbnUvc3R5bGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0xrQiIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9NZW51L3N0eWxlL2luZGV4LnRzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5cbmltcG9ydCBTdmdJY29uIGZyb20gJ3NyYy9jb21wb25lbnRzL1N2Z0ljb24nO1xuaW1wb3J0IGNvbmZpZyBmcm9tICdzcmMvY29uZmlnJztcbmltcG9ydCBpc0ZpcmVmb3ggZnJvbSAnc3JjL3V0aWxzL2lzRmlyZWZveCc7XG5pbXBvcnQgeyBzV3JhcCwgVGhlbWUgfSBmcm9tICdzcmMvc3R5bGUnO1xuXG5jb25zdCB7IHByZWZpeENsczogX3ByZWZpeENscyB9ID0gY29uZmlnO1xuZXhwb3J0IGNvbnN0IHByZWZpeENscyA9IF9wcmVmaXhDbHMgKyAnLW1lbnUnO1xuZXhwb3J0IGNvbnN0IGJsb2NrQ2xzID0gX3ByZWZpeENscyArICctYmxvY2snO1xuZXhwb3J0IGNvbnN0IHNpbmdsZUNscyA9IHByZWZpeENscyArICctc2luZ2xlJztcbmV4cG9ydCBjb25zdCBtdWx0aXBsZUNscyA9IHByZWZpeENscyArICctbXVsdGlwbGUnO1xuZXhwb3J0IGNvbnN0IGl0ZW1DbHMgPSBwcmVmaXhDbHMgKyAnLWl0ZW0nO1xuZXhwb3J0IGNvbnN0IGRpc2FibGVkQ2xzID0gaXRlbUNscyArICctZGlzYWJsZWQnO1xuZXhwb3J0IGNvbnN0IGZpcnN0Q2xzID0gcHJlZml4Q2xzICsgJy1maXJzdCc7XG5leHBvcnQgY29uc3QgbGFzdENscyA9IHByZWZpeENscyArICctbGFzdCc7XG5leHBvcnQgY29uc3Qgc2VsZWN0ZWRDbHMgPSBwcmVmaXhDbHMgKyAnLXNlbGVjdGVkJztcbmV4cG9ydCBjb25zdCBzZWxlY3RhbGxXcmFwQ2xzID0gcHJlZml4Q2xzICsgJy1zZWxlY3RhbGwtd3JhcCc7XG5leHBvcnQgY29uc3QgY29sbGFwc2VUaXRsZUNscyA9IHByZWZpeENscyArICctY29sbGFwc2UtdGl0bGUnO1xuZXhwb3J0IGNvbnN0IGNvbGxhcHNlV3JhcENscyA9IHByZWZpeENscyArICctY29sbGFwc2Utd3JhcCc7XG5leHBvcnQgY29uc3QgcG9wdXBUaXRsZUNscyA9IHByZWZpeENscyArICctcG9wdXAtdGl0bGUnO1xuZXhwb3J0IGNvbnN0IHBvcHVwV3JhcENscyA9IHByZWZpeENscyArICctcG9wdXAtd3JhcCc7XG5leHBvcnQgY29uc3QgcG9wdXBDb250ZW50Q2xzID0gcHJlZml4Q2xzICsgJy1wb3B1cC1jb250ZW50JztcbmV4cG9ydCBjb25zdCBjaGVja2JveENscyA9IHByZWZpeENscyArICctY2hlY2tib3gnO1xuZXhwb3J0IGNvbnN0IGNvbnRlbnRDbHMgPSBwcmVmaXhDbHMgKyAnLWNvbnRlbnQnO1xuZXhwb3J0IGNvbnN0IGljb25DbHMgPSBwcmVmaXhDbHMgKyAnLWljb24nO1xuZXhwb3J0IGNvbnN0IHNlbGVjdFN0eWxlQ2xzID0gcHJlZml4Q2xzICsgJy1zZWxlY3Qtc3R5bGUnO1xuXG5leHBvcnQgY29uc3QgU3ViTWVudUljb24gPSBzdHlsZWQoU3ZnSWNvbilgXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHJpZ2h0OiA4cHg7XG4gICAgdG9wOiA1MCU7XG4gICAgbWFyZ2luLXRvcDogLTAuNWVtO1xuYDtcblxuaW50ZXJmYWNlIE1lbnVQcm9wcyB7XG4gICAgY3VzdG9tU3R5bGU/OiB7XG4gICAgICAgIG1heEhlaWdodD86IHN0cmluZztcbiAgICAgICAgbWF4V2lkdGg/OiBzdHJpbmc7XG4gICAgfTtcbn1cblxuY29uc3QgbWVudVN0eWxlID0gKHtcbiAgICBjdXN0b21TdHlsZSA9IHt9LFxuICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxufTogTWVudVByb3BzICYge1xuICAgIHRoZW1lOiBUaGVtZTtcbn0pID0+IHtcbiAgICBjb25zdCB7IG1heFdpZHRoIH0gPSBjdXN0b21TdHlsZTtcbiAgICByZXR1cm4gY3NzYFxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgIG92ZXJmbG93OiBhdXRvO1xuICAgICAgICBsaW5lLWhlaWdodDogMzJweDtcbiAgICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgICBtYXgtd2lkdGg6ICR7bWF4V2lkdGggfHwgJzM2MHB4J307XG4gICAgICAgIG1pbi13aWR0aDogNjRweDtcbiAgICAgICAgcGFkZGluZzogNHB4IDBweDtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMnB4O1xuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgICAgICBib3JkZXItc3R5bGU6IG5vbmUgIWltcG9ydGFudDtcbiAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfREVGQVVMVF9EQVJLfTtcbiAgICAgICAgYm94LXNoYWRvdzogJHtEVC5UX1NIQURPV19CTE9DS19ERUZBVUxUX0xHfTtcbiAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX01FTlV9O1xuXG4gICAgICAgICR7XG4gICAgICAgICAgICBpc0ZpcmVmb3ggJiZcbiAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAmIHtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3cteTogc2Nyb2xsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGBcbiAgICAgICAgfVxuICAgICAgICAuJHtpdGVtQ2xzfS4ke3NlbGVjdFN0eWxlQ2xzfSB7XG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgICAgIC4ke2NvbnRlbnRDbHN9IHtcbiAgICAgICAgICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAmLiR7c2VsZWN0ZWRDbHN9IC4ke2NvbnRlbnRDbHN9IHtcbiAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfUFJJTUFSWV9ERUZBVUxUfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC4ke2ljb25DbHN9IHtcbiAgICAgICAgICAgICAgICBmaWxsOiAke0RULlRfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFR9O1xuICAgICAgICAgICAgICAgIHdpZHRoOiAxNnB4O1xuICAgICAgICAgICAgICAgIGhlaWdodDogMTZweDtcbiAgICAgICAgICAgICAgICBmbGV4OiAwIDAgMTZweDtcbiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogOHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC4ke2l0ZW1DbHN9LCAuJHtzZWxlY3RhbGxXcmFwQ2xzfSwgLiR7cG9wdXBUaXRsZUNsc30sLiR7Y29sbGFwc2VUaXRsZUNsc30ge1xuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICAgIDpob3ZlciB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfSE9WRVJ9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC4ke2l0ZW1DbHN9LCAuJHtzZWxlY3RhbGxXcmFwQ2xzfSwgLiR7cG9wdXBUaXRsZUNsc30sIC4ke2NvbGxhcHNlVGl0bGVDbHN9IHtcbiAgICAgICAgICAgIHBhZGRpbmc6IDAgOHB4O1xuICAgICAgICAgICAgbWFyZ2luOiAwIDhweDtcbiAgICAgICAgfVxuICAgICAgICAuJHtpdGVtQ2xzfS4ke2Rpc2FibGVkQ2xzfSwgLiR7c2VsZWN0YWxsV3JhcENsc30uJHtkaXNhYmxlZENsc30ge1xuICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RJU0FCTEVEfTtcbiAgICAgICAgICAgIGN1cnNvcjogZGVmYXVsdDtcbiAgICAgICAgICAgIDpob3ZlciB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogbm9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAuJHtwb3B1cFRpdGxlQ2xzfSwgLiR7Y29sbGFwc2VUaXRsZUNsc30ge1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgcGFkZGluZzogMHB4IDQwcHggMHB4IDhweDtcbiAgICAgICAgICAgICYuJHtzZWxlY3RlZENsc30ge1xuICAgICAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFR9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICYuJHtzaW5nbGVDbHN9IC4ke2l0ZW1DbHN9LiR7c2VsZWN0ZWRDbHN9IHtcbiAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFR9O1xuICAgICAgICB9XG4gICAgICAgIC4ke2NvbGxhcHNlV3JhcENsc30ge1xuICAgICAgICAgICAgOjphZnRlcixcbiAgICAgICAgICAgIDo6YmVmb3JlIHtcbiAgICAgICAgICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgICBtYXJnaW46IDRweCA4cHg7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxcHg7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0xJTkVfREVGQVVMVF9MSUdIVH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLiR7Zmlyc3RDbHN9LiR7Y29sbGFwc2VXcmFwQ2xzfSB7XG4gICAgICAgICAgICA6OmJlZm9yZSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAuJHtjb2xsYXBzZVdyYXBDbHN9Ky4ke2NvbGxhcHNlV3JhcENsc30ge1xuICAgICAgICAgICAgOjpiZWZvcmUge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLiR7bGFzdENsc30uJHtjb2xsYXBzZVdyYXBDbHN9IHtcbiAgICAgICAgICAgIDo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLiR7Y2hlY2tib3hDbHN9IHtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICB9XG4gICAgYDtcbn07XG5cbmV4cG9ydCBjb25zdCBNZW51V3JhcCA9IHNXcmFwPE1lbnVQcm9wcz4oe30pKFxuICAgIHN0eWxlZC5kaXYocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7IGN1c3RvbVN0eWxlID0ge30gfSA9IHByb3BzO1xuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgJHttZW51U3R5bGUocHJvcHMpfTtcbiAgICAgICAgICAgIG1heC1oZWlnaHQ6ICR7Y3VzdG9tU3R5bGUubWF4SGVpZ2h0fTtcbiAgICAgICAgICAgICYuJHtibG9ja0Nsc30ge1xuICAgICAgICAgICAgICAgIG1pbi13aWR0aDogMDtcbiAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IG5vbmU7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgICAgIGJveC1zaGFkb3c6IG5vbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBQb3B1cE1lbnVXcmFwID0gc1dyYXA8TWVudVByb3BzPih7fSkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICBwYWRkaW5nOiAwcHggOHB4O1xuICAgICAgICAgICAgLiR7cG9wdXBDb250ZW50Q2xzfSB7XG4gICAgICAgICAgICAgICAgJHttZW51U3R5bGUocHJvcHMpfTtcbiAgICAgICAgICAgICAgICBtYXgtaGVpZ2h0OiAzODBweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9KVxuKTtcbiJdfQ== */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lbnUvc3R5bGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBK0tJIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01lbnUvc3R5bGUvaW5kZXgudHMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcblxuaW1wb3J0IFN2Z0ljb24gZnJvbSAnc3JjL2NvbXBvbmVudHMvU3ZnSWNvbic7XG5pbXBvcnQgY29uZmlnIGZyb20gJ3NyYy9jb25maWcnO1xuaW1wb3J0IGlzRmlyZWZveCBmcm9tICdzcmMvdXRpbHMvaXNGaXJlZm94JztcbmltcG9ydCB7IHNXcmFwLCBUaGVtZSB9IGZyb20gJ3NyYy9zdHlsZSc7XG5cbmNvbnN0IHsgcHJlZml4Q2xzOiBfcHJlZml4Q2xzIH0gPSBjb25maWc7XG5leHBvcnQgY29uc3QgcHJlZml4Q2xzID0gX3ByZWZpeENscyArICctbWVudSc7XG5leHBvcnQgY29uc3QgYmxvY2tDbHMgPSBfcHJlZml4Q2xzICsgJy1ibG9jayc7XG5leHBvcnQgY29uc3Qgc2luZ2xlQ2xzID0gcHJlZml4Q2xzICsgJy1zaW5nbGUnO1xuZXhwb3J0IGNvbnN0IG11bHRpcGxlQ2xzID0gcHJlZml4Q2xzICsgJy1tdWx0aXBsZSc7XG5leHBvcnQgY29uc3QgaXRlbUNscyA9IHByZWZpeENscyArICctaXRlbSc7XG5leHBvcnQgY29uc3QgZGlzYWJsZWRDbHMgPSBpdGVtQ2xzICsgJy1kaXNhYmxlZCc7XG5leHBvcnQgY29uc3QgZmlyc3RDbHMgPSBwcmVmaXhDbHMgKyAnLWZpcnN0JztcbmV4cG9ydCBjb25zdCBsYXN0Q2xzID0gcHJlZml4Q2xzICsgJy1sYXN0JztcbmV4cG9ydCBjb25zdCBzZWxlY3RlZENscyA9IHByZWZpeENscyArICctc2VsZWN0ZWQnO1xuZXhwb3J0IGNvbnN0IHNlbGVjdGFsbFdyYXBDbHMgPSBwcmVmaXhDbHMgKyAnLXNlbGVjdGFsbC13cmFwJztcbmV4cG9ydCBjb25zdCBjb2xsYXBzZVRpdGxlQ2xzID0gcHJlZml4Q2xzICsgJy1jb2xsYXBzZS10aXRsZSc7XG5leHBvcnQgY29uc3QgY29sbGFwc2VXcmFwQ2xzID0gcHJlZml4Q2xzICsgJy1jb2xsYXBzZS13cmFwJztcbmV4cG9ydCBjb25zdCBwb3B1cFRpdGxlQ2xzID0gcHJlZml4Q2xzICsgJy1wb3B1cC10aXRsZSc7XG5leHBvcnQgY29uc3QgcG9wdXBXcmFwQ2xzID0gcHJlZml4Q2xzICsgJy1wb3B1cC13cmFwJztcbmV4cG9ydCBjb25zdCBwb3B1cENvbnRlbnRDbHMgPSBwcmVmaXhDbHMgKyAnLXBvcHVwLWNvbnRlbnQnO1xuZXhwb3J0IGNvbnN0IGNoZWNrYm94Q2xzID0gcHJlZml4Q2xzICsgJy1jaGVja2JveCc7XG5leHBvcnQgY29uc3QgY29udGVudENscyA9IHByZWZpeENscyArICctY29udGVudCc7XG5leHBvcnQgY29uc3QgaWNvbkNscyA9IHByZWZpeENscyArICctaWNvbic7XG5leHBvcnQgY29uc3Qgc2VsZWN0U3R5bGVDbHMgPSBwcmVmaXhDbHMgKyAnLXNlbGVjdC1zdHlsZSc7XG5cbmV4cG9ydCBjb25zdCBTdWJNZW51SWNvbiA9IHN0eWxlZChTdmdJY29uKWBcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgcmlnaHQ6IDhweDtcbiAgICB0b3A6IDUwJTtcbiAgICBtYXJnaW4tdG9wOiAtMC41ZW07XG5gO1xuXG5pbnRlcmZhY2UgTWVudVByb3BzIHtcbiAgICBjdXN0b21TdHlsZT86IHtcbiAgICAgICAgbWF4SGVpZ2h0Pzogc3RyaW5nO1xuICAgICAgICBtYXhXaWR0aD86IHN0cmluZztcbiAgICB9O1xufVxuXG5jb25zdCBtZW51U3R5bGUgPSAoe1xuICAgIGN1c3RvbVN0eWxlID0ge30sXG4gICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG59OiBNZW51UHJvcHMgJiB7XG4gICAgdGhlbWU6IFRoZW1lO1xufSkgPT4ge1xuICAgIGNvbnN0IHsgbWF4V2lkdGggfSA9IGN1c3RvbVN0eWxlO1xuICAgIHJldHVybiBjc3NgXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAzMnB4O1xuICAgICAgICBmb250LXNpemU6IDEycHg7XG4gICAgICAgIG1heC13aWR0aDogJHttYXhXaWR0aCB8fCAnMzYwcHgnfTtcbiAgICAgICAgbWluLXdpZHRoOiA2NHB4O1xuICAgICAgICBwYWRkaW5nOiA0cHggMHB4O1xuICAgICAgICBib3JkZXItcmFkaXVzOiAycHg7XG4gICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgICAgIGJvcmRlci1zdHlsZTogbm9uZSAhaW1wb3J0YW50O1xuICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICBib3gtc2hhZG93OiAke0RULlRfU0hBRE9XX0JMT0NLX0RFRkFVTFRfTEd9O1xuICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfQ09MT1JfQkdfTUVOVX07XG5cbiAgICAgICAgJHtcbiAgICAgICAgICAgIGlzRmlyZWZveCAmJlxuICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgICYge1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdy15OiBzY3JvbGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgYFxuICAgICAgICB9XG4gICAgICAgIC4ke2l0ZW1DbHN9LiR7c2VsZWN0U3R5bGVDbHN9IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICAgICAgLiR7Y29udGVudENsc30ge1xuICAgICAgICAgICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgICAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgICAgICAgICAgZmxleDogMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICYuJHtzZWxlY3RlZENsc30gLiR7Y29udGVudENsc30ge1xuICAgICAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFR9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLiR7aWNvbkNsc30ge1xuICAgICAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVH07XG4gICAgICAgICAgICAgICAgd2lkdGg6IDE2cHg7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxNnB4O1xuICAgICAgICAgICAgICAgIGZsZXg6IDAgMCAxNnB4O1xuICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiA4cHg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLiR7aXRlbUNsc30sIC4ke3NlbGVjdGFsbFdyYXBDbHN9LCAuJHtwb3B1cFRpdGxlQ2xzfSwuJHtjb2xsYXBzZVRpdGxlQ2xzfSB7XG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICAgICAgOmhvdmVyIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfQ09MT1JfQkdfREVGQVVMVF9IT1ZFUn07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLiR7aXRlbUNsc30sIC4ke3NlbGVjdGFsbFdyYXBDbHN9LCAuJHtwb3B1cFRpdGxlQ2xzfSwgLiR7Y29sbGFwc2VUaXRsZUNsc30ge1xuICAgICAgICAgICAgcGFkZGluZzogMCA4cHg7XG4gICAgICAgICAgICBtYXJnaW46IDAgOHB4O1xuICAgICAgICB9XG4gICAgICAgIC4ke2l0ZW1DbHN9LiR7ZGlzYWJsZWRDbHN9LCAuJHtzZWxlY3RhbGxXcmFwQ2xzfS4ke2Rpc2FibGVkQ2xzfSB7XG4gICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfRElTQUJMRUR9O1xuICAgICAgICAgICAgY3Vyc29yOiBkZWZhdWx0O1xuICAgICAgICAgICAgOmhvdmVyIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC4ke3BvcHVwVGl0bGVDbHN9LCAuJHtjb2xsYXBzZVRpdGxlQ2xzfSB7XG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgICBwYWRkaW5nOiAwcHggNDBweCAwcHggOHB4O1xuICAgICAgICAgICAgJi4ke3NlbGVjdGVkQ2xzfSB7XG4gICAgICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgJi4ke3NpbmdsZUNsc30gLiR7aXRlbUNsc30uJHtzZWxlY3RlZENsc30ge1xuICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVH07XG4gICAgICAgIH1cbiAgICAgICAgLiR7Y29sbGFwc2VXcmFwQ2xzfSB7XG4gICAgICAgICAgICA6OmFmdGVyLFxuICAgICAgICAgICAgOjpiZWZvcmUge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgICAgIG1hcmdpbjogNHB4IDhweDtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDFweDtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfQ09MT1JfTElORV9ERUZBVUxUX0xJR0hUfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAuJHtmaXJzdENsc30uJHtjb2xsYXBzZVdyYXBDbHN9IHtcbiAgICAgICAgICAgIDo6YmVmb3JlIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC4ke2NvbGxhcHNlV3JhcENsc30rLiR7Y29sbGFwc2VXcmFwQ2xzfSB7XG4gICAgICAgICAgICA6OmJlZm9yZSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAuJHtsYXN0Q2xzfS4ke2NvbGxhcHNlV3JhcENsc30ge1xuICAgICAgICAgICAgOjphZnRlciB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAuJHtjaGVja2JveENsc30ge1xuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIH1cbiAgICBgO1xufTtcblxuZXhwb3J0IGNvbnN0IE1lbnVXcmFwID0gc1dyYXA8TWVudVByb3BzPih7fSkoXG4gICAgc3R5bGVkLmRpdihwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHsgY3VzdG9tU3R5bGUgPSB7fSB9ID0gcHJvcHM7XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICAke21lbnVTdHlsZShwcm9wcyl9O1xuICAgICAgICAgICAgbWF4LWhlaWdodDogJHtjdXN0b21TdHlsZS5tYXhIZWlnaHR9O1xuICAgICAgICAgICAgJi4ke2Jsb2NrQ2xzfSB7XG4gICAgICAgICAgICAgICAgbWluLXdpZHRoOiAwO1xuICAgICAgICAgICAgICAgIG1heC13aWR0aDogbm9uZTtcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICAgICAgYm94LXNoYWRvdzogbm9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IFBvcHVwTWVudVdyYXAgPSBzV3JhcDxNZW51UHJvcHM+KHt9KShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgIHBhZGRpbmc6IDBweCA4cHg7XG4gICAgICAgICAgICAuJHtwb3B1cENvbnRlbnRDbHN9IHtcbiAgICAgICAgICAgICAgICAke21lbnVTdHlsZShwcm9wcyl9O1xuICAgICAgICAgICAgICAgIG1heC1oZWlnaHQ6IDM4MHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH0pXG4pO1xuIl19 */"));
exports.PopupMenuWrap = PopupMenuWrap;