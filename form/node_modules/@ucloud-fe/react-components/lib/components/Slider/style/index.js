"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SliderWrap = exports.RcSliderWrap = exports.prefixCls = void 0;

var _newArrowCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/newArrowCheck"));

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _core = require("@emotion/core");

var _config = _interopRequireDefault(require("../../../config"));

var _style = require("../../../style");

var _withProps = _interopRequireDefault(require("../../../utils/withProps"));

var _this = void 0;

var _prefixCls = _config.default.prefixCls;
var prefixCls = _prefixCls + '-slider';
exports.prefixCls = prefixCls;
var RcSliderWrap = ( /*#__PURE__*/0, _styledBase.default)('div', {
  target: "e1h0idhz0",
  label: "RcSliderWrap"
})(_style.inlineBlockWithVerticalMixin, ";margin-right:12px;padding:0 10px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1NsaWRlci9zdHlsZS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFVeUMiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvU2xpZGVyL3N0eWxlL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5cbmltcG9ydCBjb25maWcgZnJvbSAnc3JjL2NvbmZpZyc7XG5pbXBvcnQgeyBpbmxpbmVCbG9ja1dpdGhWZXJ0aWNhbE1peGluIH0gZnJvbSAnc3JjL3N0eWxlJztcbmltcG9ydCB3aXRoUHJvcHMgZnJvbSAnc3JjL3V0aWxzL3dpdGhQcm9wcyc7XG5cbmNvbnN0IHsgcHJlZml4Q2xzOiBfcHJlZml4Q2xzIH0gPSBjb25maWc7XG5leHBvcnQgY29uc3QgcHJlZml4Q2xzID0gX3ByZWZpeENscyArICctc2xpZGVyJztcblxuZXhwb3J0IGNvbnN0IFJjU2xpZGVyV3JhcCA9IHN0eWxlZCgnZGl2JylgXG4gICAgJHtpbmxpbmVCbG9ja1dpdGhWZXJ0aWNhbE1peGlufTtcbiAgICBtYXJnaW4tcmlnaHQ6IDEycHg7XG4gICAgcGFkZGluZzogMCAxMHB4O1xuYDtcblxuZXhwb3J0IGNvbnN0IFNsaWRlcldyYXAgPSB3aXRoUHJvcHMoKShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCwgSGVpZ2h0LCBIZWlnaHROdW1iZXIgfSxcbiAgICAgICAgICAgIHNpemUsXG4gICAgICAgICAgICBkaXNhYmxlZFxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIC4ke3ByZWZpeENsc30ge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgICAgICB3aWR0aDogMzAwcHg7XG4gICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogJHtEVC5UX0NPUk5FUl9TTX07XG4gICAgICAgICAgICAgICAgdG91Y2gtYWN0aW9uOiBub25lO1xuICAgICAgICAgICAgICAgIGhlaWdodDogJHtIZWlnaHRbc2l6ZV19O1xuXG4gICAgICAgICAgICAgICAgJi1yYWlsIHtcbiAgICAgICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcblxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfU0xJREVSX0NPTE9SX0JHX0RFRkFVTFR9O1xuICAgICAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAke0RULlRfU0xJREVSX0NPTE9SX0xJTkVfREVGQVVMVH07XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogJHtIZWlnaHRbc2l6ZV19O1xuICAgICAgICAgICAgICAgICAgICBib3JkZXItbGVmdDogMDtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJpZ2h0OiAwO1xuXG4gICAgICAgICAgICAgICAgICAgICR7ZGlzYWJsZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiAke0RULlRfQ09MT1JfTElORV9ESVNBQkxFRF9EQVJLfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19ESVNBQkxFRF9MSUdIVH07XG4gICAgICAgICAgICAgICAgICAgICAgICA6OmJlZm9yZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIDo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogJHtEVC5UX0NPTE9SX0xJTkVfRElTQUJMRURfREFSS307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RJU0FCTEVEX0xJR0hUfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYH07XG5cbiAgICAgICAgICAgICAgICAgICAgOjpiZWZvcmUsXG4gICAgICAgICAgICAgICAgICAgIDo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTBweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICR7RFQuVF9TTElERVJfQ09MT1JfTElORV9ERUZBVUxUfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogLTFweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9TTElERVJfQ09MT1JfQkdfREVGQVVMVH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOjpiZWZvcmUge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogLTEwcHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAycHggMCAwIDJweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1yaWdodDogMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6OmFmdGVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAtMTBweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDAgMnB4IDJweCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAmLXRyYWNrIHtcbiAgICAgICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwO1xuICAgICAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAke0RULlRfU0xJREVSX0NPTE9SX0xJTkVfQUNUSVZFfTtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX1NMSURFUl9DT0xPUl9CR19BQ1RJVkV9O1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICR7SGVpZ2h0W3NpemVdfTtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IDA7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci1yaWdodDogMDtcbiAgICAgICAgICAgICAgICAgICAgOjpiZWZvcmUge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTBweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICR7RFQuVF9TTElERVJfQ09MT1JfTElORV9BQ1RJVkV9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAtMXB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX1NMSURFUl9DT0xPUl9CR19BQ1RJVkV9O1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogLTEwcHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAycHggMCAwIDJweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1yaWdodDogMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICR7ZGlzYWJsZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiAke0RULlRfQ09MT1JfTElORV9ESVNBQkxFRF9EQVJLfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19ESVNBQkxFRF9MSUdIVH07XG4gICAgICAgICAgICAgICAgICAgICAgICA6OmJlZm9yZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiAke0RULlRfQ09MT1JfTElORV9ESVNBQkxFRF9EQVJLfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAke0RULlRfQ09MT1JfQkdfRElTQUJMRURfTElHSFR9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAmLXRvb2x0aXAge1xuICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogbm9ybWFsO1xuICAgICAgICAgICAgICAgICAgICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAmLWhhbmRsZSB7XG4gICAgICAgICAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IC0xMHB4O1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAtM3B4O1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMjBweDtcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IGdyYWI7XG4gICAgICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgYm94LXNoYWRvdzogJHtEVC5UX1NIQURPV19CVVRUT05fREVGQVVMVH07XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9CVVRUT05fU0VDT05EQVJZX0NPTE9SX0JHX0RFRkFVTFR9O1xuICAgICAgICAgICAgICAgICAgICB0b3VjaC1hY3Rpb246IHBhbi14O1xuICAgICAgICAgICAgICAgICAgICB6LWluZGV4OiA5O1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICR7SGVpZ2h0TnVtYmVyW3NpemVdICsgNn1weDtcbiAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6ICR7SGVpZ2h0TnVtYmVyW3NpemVdICsgOH1weDtcblxuICAgICAgICAgICAgICAgICAgICAmOjpiZWZvcmUsXG4gICAgICAgICAgICAgICAgICAgICY6OmFmdGVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDFweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTZweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9MSU5FX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAkeyhIZWlnaHROdW1iZXJbc2l6ZV0gKyA2IC0gMiAtIDE2KSAvIDJ9cHg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgJjo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDRweDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICR7IWRpc2FibGVkICYmXG4gICAgICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAgICAgICAgICY6aG92ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAmOmFjdGl2ZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm94LXNoYWRvdzogJHtEVC5UX1NIQURPV19CVVRUT05fSE9WRVJ9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJjo6YmVmb3JlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICY6OmFmdGVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0xJTkVfUFJJTUFSWV9ERUZBVUxUfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAmOmFjdGl2ZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBncmFiYmluZztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYH0gJjpmb2N1cyB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgJHtkaXNhYmxlZCAmJlxuICAgICAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgICAgICAgICBib3gtc2hhZG93OiBub25lO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHtEVC5UX0NPTE9SX0xJTkVfRElTQUJMRURfTElHSFR9O1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RJU0FCTEVEX0xJR0hUfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcjogZGVmYXVsdDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJjo6YmVmb3JlLFxuICAgICAgICAgICAgICAgICAgICAgICAgJjo6YWZ0ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9URVhUX0RJU0FCTEVEfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJi1tYXJrIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgICAgICB0b3A6IDA7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IDA7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDEycHg7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJi1tYXJrLXRleHQge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAzMCU7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAtMzAlO1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAke0RULlRfU0xJREVSX0NPTE9SX1RFWFRfREVGQVVMVH07XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICR7RFQuVF9TTElERVJfQ09MT1JfTElORV9ERUZBVUxUfTtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMCA4cHg7XG4gICAgICAgICAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgICAgICAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogJHtIZWlnaHRbc2l6ZV19O1xuXG4gICAgICAgICAgICAgICAgICAgICR7ZGlzYWJsZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBkZWZhdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RJU0FCTEVEfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1yaWdodC1jb2xvcjogJHtEVC5UX0NPTE9SX0xJTkVfRElTQUJMRURfREFSS307XG4gICAgICAgICAgICAgICAgICAgIGB9O1xuXG4gICAgICAgICAgICAgICAgICAgICR7IWRpc2FibGVkICYmXG4gICAgICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAgICAgICAgICYtYWN0aXZlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX1NMSURFUl9DT0xPUl9URVhUX0FDVElWRX07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJpZ2h0LWNvbG9yOiAke0RULlRfU0xJREVSX0NPTE9SX0xJTkVfQUNUSVZFfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJi1zdGVwIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogJHtIZWlnaHRbc2l6ZV19O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICYtZG90IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG4iXX0= */"));
exports.RcSliderWrap = RcSliderWrap;
var SliderWrap = (0, _withProps.default)()(( /*#__PURE__*/0, _styledBase.default)('div', {
  target: "e1h0idhz1",
  label: "SliderWrap"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var _props$theme = props.theme,
      DT = _props$theme.designTokens,
      Height = _props$theme.Height,
      HeightNumber = _props$theme.HeightNumber,
      size = props.size,
      disabled = props.disabled;
  return /*#__PURE__*/(0, _core.css)(".", prefixCls, "{position:relative;width:300px;border-radius:", DT.T_CORNER_SM, ";touch-action:none;height:", Height[size], ";&-rail{box-sizing:border-box;position:absolute;width:100%;background:", DT.T_SLIDER_COLOR_BG_DEFAULT, ";border:1px solid ", DT.T_SLIDER_COLOR_LINE_DEFAULT, ";height:", Height[size], ";border-left:0;border-right:0;", disabled && /*#__PURE__*/(0, _core.css)("border-color:", DT.T_COLOR_LINE_DISABLED_DARK, ";background:", DT.T_COLOR_BG_DISABLED_LIGHT, ";::before,::after{border-color:", DT.T_COLOR_LINE_DISABLED_DARK, ";background:", DT.T_COLOR_BG_DISABLED_LIGHT, ";};label:SliderWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), ";::before,::after{content:'';display:inline-block;width:10px;height:100%;position:absolute;border:1px solid ", DT.T_SLIDER_COLOR_LINE_DEFAULT, ";top:-1px;background:", DT.T_SLIDER_COLOR_BG_DEFAULT, ";}::before{left:-10px;border-radius:2px 0 0 2px;border-right:0;}::after{right:-10px;border-radius:0 2px 2px 0;border-left:0;}}&-track{box-sizing:border-box;position:absolute;left:0;border:1px solid ", DT.T_SLIDER_COLOR_LINE_ACTIVE, ";background:", DT.T_SLIDER_COLOR_BG_ACTIVE, ";height:", Height[size], ";border-left:0;border-right:0;::before{content:'';display:inline-block;width:10px;height:100%;position:absolute;border:1px solid ", DT.T_SLIDER_COLOR_LINE_ACTIVE, ";top:-1px;background:", DT.T_SLIDER_COLOR_BG_ACTIVE, ";left:-10px;border-radius:2px 0 0 2px;border-right:0;}", disabled && /*#__PURE__*/(0, _core.css)("border-color:", DT.T_COLOR_LINE_DISABLED_DARK, ";background:", DT.T_COLOR_BG_DISABLED_LIGHT, ";::before{border-color:", DT.T_COLOR_LINE_DISABLED_DARK, ";background:", DT.T_COLOR_BG_DISABLED_LIGHT, ";};label:SliderWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), ";}&-tooltip{line-height:normal;user-select:none;}&-handle{box-sizing:border-box;position:absolute;margin-left:-10px;margin-top:-3px;width:20px;cursor:pointer;cursor:grab;text-align:center;box-shadow:", DT.T_SHADOW_BUTTON_DEFAULT, ";background:", DT.T_BUTTON_SECONDARY_COLOR_BG_DEFAULT, ";touch-action:pan-x;z-index:9;height:", HeightNumber[size] + 6, "px;line-height:", HeightNumber[size] + 8, "px;&::before,&::after{content:'';display:inline-block;width:1px;height:16px;background:", DT.T_COLOR_LINE_DEFAULT_DARK, ";margin-top:", (HeightNumber[size] + 6 - 2 - 16) / 2, "px;}&::after{margin-left:4px;}", !disabled && /*#__PURE__*/(0, _core.css)("&:hover,&:active{box-shadow:", DT.T_SHADOW_BUTTON_HOVER, ";&::before,&::after{background:", DT.T_COLOR_LINE_PRIMARY_DEFAULT, ";}}&:active{cursor:grabbing;};label:SliderWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), " &:focus{outline:none;}", disabled && /*#__PURE__*/(0, _core.css)("box-shadow:none;border:1px solid ", DT.T_COLOR_LINE_DISABLED_LIGHT, ";background:", DT.T_COLOR_BG_DISABLED_LIGHT, ";cursor:default;&::before,&::after{background:", DT.T_COLOR_TEXT_DISABLED, ";};label:SliderWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), ";}&-mark{position:absolute;top:0;left:0;width:100%;font-size:12px;}&-mark-text{position:absolute;display:inline-block;vertical-align:middle;text-align:right;width:30%;margin-left:-30%;overflow:hidden;cursor:pointer;color:", DT.T_SLIDER_COLOR_TEXT_DEFAULT, ";border-right:1px solid ", DT.T_SLIDER_COLOR_LINE_DEFAULT, ";padding:0 8px;box-sizing:border-box;pointer-events:none;line-height:", Height[size], ";", disabled && /*#__PURE__*/(0, _core.css)("cursor:default;color:", DT.T_COLOR_TEXT_DISABLED, ";border-right-color:", DT.T_COLOR_LINE_DISABLED_DARK, ";;label:SliderWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), ";", !disabled && /*#__PURE__*/(0, _core.css)("&-active{color:", DT.T_SLIDER_COLOR_TEXT_ACTIVE, ";border-right-color:", DT.T_SLIDER_COLOR_LINE_ACTIVE, ";};label:SliderWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), ";}&-step{position:absolute;width:100%;background:transparent;height:", Height[size], ";}&-dot{display:none;}};label:SliderWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.SliderWrap = SliderWrap;