"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SubAreaWrap = exports.StatusIcon = exports.HelpIcon = exports.RequiredLabel = exports.Tip = exports.FormWrap = exports.GroupTitle = exports.GroupWrap = exports.ControllerWrap = exports.CommentWrap = exports.LabelWrap = exports.ItemWrap = exports.GridControllerWrap = exports.GridLabelWrap = exports.GridItemWrap = exports.tipContentCls = exports.tipIconCls = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _newArrowCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/newArrowCheck"));

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _react = _interopRequireWildcard(require("react"));

var _core = require("@emotion/core");

var _SvgIcon = _interopRequireDefault(require("../../../components/SvgIcon"));

var _Grid = require("../../../components/Grid");

var _Combine = _interopRequireDefault(require("../../../components/Combine"));

var _config = _interopRequireDefault(require("../../../config"));

var _style = require("../../../style");

var _excluded = ["status"];

var _this = void 0,
    _templateObject;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

var _prefixCls = _config.default.prefixCls;
var prefixCls = _prefixCls + '-form';
var itemCls = prefixCls + '-item';
var labelCls = prefixCls + '-label';
var controllerCls = prefixCls + '-controller';
var groupCls = prefixCls + '-group';
var groupTitleCls = groupCls + '-title';
var tipCls = prefixCls + '-tip';
var tipIconCls = tipCls + '-icon';
exports.tipIconCls = tipIconCls;
var tipContentCls = tipCls + '-content';
exports.tipContentCls = tipContentCls;
var subAreaCls = prefixCls + '-sub-area';
var GridItemWrap = ( /*#__PURE__*/0, _styledBase.default)((0, _style.sWrap)({
  className: itemCls
})(( /*#__PURE__*/0, _styledBase.default)(_Grid.Row, {
  target: "evck06b1",
  label: "GridItemWrap"
})(process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), {
  target: "evck06b0",
  label: "GridItemWrap"
})(process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0Zvcm0vc3R5bGUvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNCNEIiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRm9ybS9zdHlsZS9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgbWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuXG5pbXBvcnQgU3ZnSWNvbiBmcm9tICdzcmMvY29tcG9uZW50cy9TdmdJY29uJztcbmltcG9ydCB7IFJvdywgQ29sIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvR3JpZCc7XG5pbXBvcnQgQ29tYmluZSwgeyBDb21iaW5lUHJvcHMgfSBmcm9tICdzcmMvY29tcG9uZW50cy9Db21iaW5lJztcbmltcG9ydCBjb25maWcgZnJvbSAnc3JjL2NvbmZpZyc7XG5pbXBvcnQgeyBEZXNpZ25Ub2tlbiwgc1dyYXAgfSBmcm9tICdzcmMvc3R5bGUnO1xuXG5jb25zdCB7IHByZWZpeENsczogX3ByZWZpeENscyB9ID0gY29uZmlnO1xuY29uc3QgcHJlZml4Q2xzID0gX3ByZWZpeENscyArICctZm9ybSc7XG5jb25zdCBpdGVtQ2xzID0gcHJlZml4Q2xzICsgJy1pdGVtJztcbmNvbnN0IGxhYmVsQ2xzID0gcHJlZml4Q2xzICsgJy1sYWJlbCc7XG5jb25zdCBjb250cm9sbGVyQ2xzID0gcHJlZml4Q2xzICsgJy1jb250cm9sbGVyJztcbmNvbnN0IGdyb3VwQ2xzID0gcHJlZml4Q2xzICsgJy1ncm91cCc7XG5jb25zdCBncm91cFRpdGxlQ2xzID0gZ3JvdXBDbHMgKyAnLXRpdGxlJztcbmNvbnN0IHRpcENscyA9IHByZWZpeENscyArICctdGlwJztcbmV4cG9ydCBjb25zdCB0aXBJY29uQ2xzID0gdGlwQ2xzICsgJy1pY29uJztcbmV4cG9ydCBjb25zdCB0aXBDb250ZW50Q2xzID0gdGlwQ2xzICsgJy1jb250ZW50JztcbmNvbnN0IHN1YkFyZWFDbHMgPSBwcmVmaXhDbHMgKyAnLXN1Yi1hcmVhJztcblxuZXhwb3J0IGNvbnN0IEdyaWRJdGVtV3JhcCA9IHN0eWxlZChcbiAgICBzV3JhcCh7XG4gICAgICAgIGNsYXNzTmFtZTogaXRlbUNsc1xuICAgIH0pKHN0eWxlZChSb3cpYFxuICAgICAgICAvKiBlbXB0eSAqL1xuICAgIGApXG4pKCk7XG5cbmV4cG9ydCBjb25zdCBHcmlkTGFiZWxXcmFwID0gc1dyYXAoe1xuICAgIGNsYXNzTmFtZTogbGFiZWxDbHNcbn0pKFxuICAgIHN0eWxlZChDb2wpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgcGFkZGluZy10b3A6IDRweDtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgd29yZC1icmVhazogYnJlYWstYWxsO1xuICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfTElHSFR9O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgR3JpZENvbnRyb2xsZXJXcmFwID0gc1dyYXAoe1xuICAgIGNsYXNzTmFtZTogY29udHJvbGxlckNsc1xufSkoc3R5bGVkKENvbClgXG4gICAgLyogZW1wdHkgKi9cbmApO1xuXG5leHBvcnQgY29uc3QgSXRlbVdyYXAgPSBzV3JhcCh7XG4gICAgY2xhc3NOYW1lOiBpdGVtQ2xzXG59KShzdHlsZWQoJ2RpdicpYFxuICAgIC8qIGVtcHR5ICovXG5gKTtcblxuZXhwb3J0IGNvbnN0IExhYmVsV3JhcCA9IHNXcmFwKHtcbiAgICBjbGFzc05hbWU6IGxhYmVsQ2xzXG59KShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDogJHtEVC5UX1RZUE9fRk9OVF9XRUlHSFRfQk9MRH07XG4gICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfREVGQVVMVF9EQVJLfTtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206ICR7RFQuVF9TUEFDSU5HX0NPTU1PTl9TTX07XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBDb21tZW50V3JhcCA9IHNXcmFwKCkoXG4gICAgc3R5bGVkLmRpdihwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgbWFyZ2luLXRvcDogJHtEVC5UX1NQQUNJTkdfQ09NTU9OX1hTfTtcbiAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9SRU1BUktfREFSS307XG4gICAgICAgICAgICAvKiBvdmVyd3JpdGUgaW5oZXJpdCAqL1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IENvbnRyb2xsZXJXcmFwID0gc1dyYXAoe1xuICAgIGNsYXNzTmFtZTogY29udHJvbGxlckNsc1xufSkoc3R5bGVkKCdkaXYnKWBcbiAgICAvKiBlbXB0eSAqL1xuYCk7XG5cbmV4cG9ydCBjb25zdCBHcm91cFdyYXAgPSBzV3JhcCh7XG4gICAgY2xhc3NOYW1lOiBncm91cENsc1xufSkoc3R5bGVkKCdkaXYnKWBcbiAgICAmICsgJiB7XG4gICAgICAgIG1hcmdpbi10b3A6IDI0cHg7XG4gICAgfVxuYCk7XG5cbmV4cG9ydCBjb25zdCBHcm91cFRpdGxlID0gc1dyYXAoe1xuICAgIGNsYXNzTmFtZTogZ3JvdXBUaXRsZUNsc1xufSkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIycHg7XG4gICAgICAgICAgICBwYWRkaW5nOiAxMnB4IDA7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyNHB4O1xuXG4gICAgICAgICAgICAke2Nzc2BcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICR7RFQuVF9DT0xPUl9MSU5FX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICBgfTtcbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IEZvcm1XcmFwID0gc1dyYXA8eyBzaXplOiBzdHJpbmcgfT4oe1xuICAgIGNsYXNzTmFtZTogcHJlZml4Q2xzXG59KShcbiAgICBzdHlsZWQoJ2Zvcm0nKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHNpemUsXG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBmb250LXNpemU6IDEycHg7XG5cbiAgICAgICAgICAgIC4ke2l0ZW1DbHN9IHtcbiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAke0RULlRfRk9STV9JVEVNX1NQQUNJTkdfVkVSVElDQUx9O1xuICAgICAgICAgICAgICAgICY6bGFzdC1jaGlsZCB7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHtzaXplID09PSAnbGcnICYmXG4gICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgJHtHcmlkSXRlbVdyYXB9IHtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMjRweDtcbiAgICAgICAgICAgICAgICAgICAgLiR7bGFiZWxDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiA2cHg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBgfTtcbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuY29uc3QgSWNvbkNvbG9yTWFwOiB7IFtrZXk6IHN0cmluZ106IERlc2lnblRva2VuIH0gPSB7XG4gICAgc3VjY2VzczogJ1RfQ09MT1JfQkdfU1VDQ0VTU19EQVJLJyxcbiAgICB3YXJuaW5nOiAnVF9DT0xPUl9CR19XQVJOSU5HX0RBUksnLFxuICAgIGVycm9yOiAnVF9DT0xPUl9CR19FUlJPUl9EQVJLJyxcbiAgICBsb2FkaW5nOiAnVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVCdcbn07XG5jb25zdCBDb2xvck1hcDogeyBba2V5OiBzdHJpbmddOiBEZXNpZ25Ub2tlbiB9ID0ge1xuICAgIGVycm9yOiAnVF9DT0xPUl9URVhUX0VSUk9SJ1xufTtcblxuZXhwb3J0IGNvbnN0IFRpcCA9IHNXcmFwPHsgc3RhdHVzOiBzdHJpbmcgfSAmIENvbWJpbmVQcm9wcz4oeyBjbGFzc05hbWU6IHRpcENscyB9KShcbiAgICBzdHlsZWQoQ29tYmluZSkocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzdGF0dXMsXG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuICAgICAgICBjb25zdCBpY29uQ29sb3JEVDogRGVzaWduVG9rZW4gPSBJY29uQ29sb3JNYXBbc3RhdHVzXSB8fCAnVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVCc7XG4gICAgICAgIGNvbnN0IGNvbG9yRHQ6IERlc2lnblRva2VuID0gQ29sb3JNYXBbc3RhdHVzXSB8fCAnVF9DT0xPUl9URVhUX0RFRkFVTFRfTElHSFQnO1xuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgbWFyZ2luLXRvcDogNHB4O1xuICAgICAgICAgICAgY29sb3I6ICR7RFRbY29sb3JEdF19O1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBiYXNlbGluZTtcbiAgICAgICAgICAgIC4ke3RpcENvbnRlbnRDbHN9IHtcbiAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMjBweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC4ke3RpcEljb25DbHN9IHtcbiAgICAgICAgICAgICAgICBmaWxsOiAke0RUW2ljb25Db2xvckRUXX07XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBSZXF1aXJlZExhYmVsID0gc1dyYXAoKShcbiAgICBzdHlsZWQuc3Bhbihwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogNHB4O1xuICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0VSUk9SfTtcbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IEhlbHBJY29uID0gc1dyYXA8eyB0eXBlOiBzdHJpbmc7IHNpemU/OiBzdHJpbmcgfT4oKShcbiAgICBzdHlsZWQoU3ZnSWNvbikocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDhweDtcbiAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gICAgICAgICAgICBmaWxsOiAke0RULlRfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFR9O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5jb25zdCBTdGF0dXNJY29uV2l0aG91dE1lbW8gPSAoeyBzdGF0dXMsIC4uLnJlc3QgfTogeyBzdGF0dXM6IHN0cmluZzsgc3Bpbj86IGJvb2xlYW4gfSkgPT4ge1xuICAgIGNvbnN0IGljb25UeXBlID1cbiAgICAgICAge1xuICAgICAgICAgICAgc3VjY2VzczogJ3RpY2stY2lyY2xlLWZpbGxlZCcsXG4gICAgICAgICAgICB3YXJuaW5nOiAnZXhjbGFtYXRpb24tY2lyY2xlLWZpbGxlZCcsXG4gICAgICAgICAgICBlcnJvcjogJ2Nyb3NzLWNpcmNsZS1maWxsZWQnLFxuICAgICAgICAgICAgbG9hZGluZzogJ3JpbmctbG9hZGluZydcbiAgICAgICAgfVtzdGF0dXNdIHx8ICdpbmZvLWNpcmNsZS1maWxsZWQnO1xuICAgIHJldHVybiA8U3ZnSWNvbiB0eXBlPXtpY29uVHlwZX0gY2xhc3NOYW1lPXt0aXBJY29uQ2xzfSB7Li4ucmVzdH0gLz47XG59O1xuY29uc3QgU3RhdHVzSWNvbiA9IG1lbW8oU3RhdHVzSWNvbldpdGhvdXRNZW1vKTtcblxuZXhwb3J0IHsgU3RhdHVzSWNvbiB9O1xuXG5leHBvcnQgY29uc3QgU3ViQXJlYVdyYXAgPSBzV3JhcCh7IGNsYXNzTmFtZTogc3ViQXJlYUNscyB9KShcbiAgICBzdHlsZWQuZGl2KHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIHBhZGRpbmc6IDE2cHg7XG4gICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAke0RULlRfQ09MT1JfTElORV9ERUZBVUxUX0xJR0hUfTtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19ERUZBVUxUX0RBUkt9O1xuXG4gICAgICAgICAgICAqICsgJiB7XG4gICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMTJweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICYgLiR7aXRlbUNsc30ge1xuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDE2cHg7XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG4iXX0= */");
exports.GridItemWrap = GridItemWrap;
var GridLabelWrap = (0, _style.sWrap)({
  className: labelCls
})(( /*#__PURE__*/0, _styledBase.default)(_Grid.Col, {
  target: "evck06b2",
  label: "GridLabelWrap"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var DT = props.theme.designTokens;
  return /*#__PURE__*/(0, _core.css)("padding-top:4px;line-height:20px;word-break:break-all;color:", DT.T_COLOR_TEXT_DEFAULT_LIGHT, ";;label:GridLabelWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.GridLabelWrap = GridLabelWrap;
var GridControllerWrap = (0, _style.sWrap)({
  className: controllerCls
})(( /*#__PURE__*/0, _styledBase.default)(_Grid.Col, {
  target: "evck06b3",
  label: "GridControllerWrap"
})(process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.GridControllerWrap = GridControllerWrap;
var ItemWrap = (0, _style.sWrap)({
  className: itemCls
})(( /*#__PURE__*/0, _styledBase.default)('div', {
  target: "evck06b4",
  label: "ItemWrap"
})(process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.ItemWrap = ItemWrap;
var LabelWrap = (0, _style.sWrap)({
  className: labelCls
})(( /*#__PURE__*/0, _styledBase.default)('div', {
  target: "evck06b5",
  label: "LabelWrap"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var DT = props.theme.designTokens;
  return /*#__PURE__*/(0, _core.css)("line-height:20px;font-weight:", DT.T_TYPO_FONT_WEIGHT_BOLD, ";color:", DT.T_COLOR_TEXT_DEFAULT_DARK, ";margin-bottom:", DT.T_SPACING_COMMON_SM, ";;label:LabelWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.LabelWrap = LabelWrap;
var CommentWrap = (0, _style.sWrap)()((0, _styledBase.default)("div", {
  target: "evck06b6",
  label: "CommentWrap"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var DT = props.theme.designTokens;
  return /*#__PURE__*/(0, _core.css)("line-height:20px;margin-top:", DT.T_SPACING_COMMON_XS, ";color:", DT.T_COLOR_TEXT_REMARK_DARK, ";font-weight:normal;;label:CommentWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.CommentWrap = CommentWrap;
var ControllerWrap = (0, _style.sWrap)({
  className: controllerCls
})(( /*#__PURE__*/0, _styledBase.default)('div', {
  target: "evck06b7",
  label: "ControllerWrap"
})(process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.ControllerWrap = ControllerWrap;
var GroupWrap = (0, _style.sWrap)({
  className: groupCls
})(( /*#__PURE__*/0, _styledBase.default)('div', {
  target: "evck06b8",
  label: "GroupWrap"
})(process.env.NODE_ENV === "production" ? {
  name: "115inq4",
  styles: "& + &{margin-top:24px;}"
} : {
  name: "115inq4",
  styles: "& + &{margin-top:24px;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
}));
exports.GroupWrap = GroupWrap;
var GroupTitle = (0, _style.sWrap)({
  className: groupTitleCls
})(( /*#__PURE__*/0, _styledBase.default)('div', {
  target: "evck06b9",
  label: "GroupTitle"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var DT = props.theme.designTokens;
  return /*#__PURE__*/(0, _core.css)("font-weight:bold;line-height:22px;padding:12px 0;margin-bottom:24px;", (0, _core.css)(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2.default)(["\n                font-size: 14px;\n                border-bottom: 1px solid ", ";\n                color: ", ";\n            "])), DT.T_COLOR_LINE_DEFAULT_DARK, DT.T_COLOR_TEXT_DEFAULT_DARK), ";;label:GroupTitle;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.GroupTitle = GroupTitle;
var FormWrap = (0, _style.sWrap)({
  className: prefixCls
})(( /*#__PURE__*/0, _styledBase.default)('form', {
  target: "evck06b10",
  label: "FormWrap"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var size = props.size,
      DT = props.theme.designTokens;
  return /*#__PURE__*/(0, _core.css)("font-size:12px;.", itemCls, "{margin-bottom:", DT.T_FORM_ITEM_SPACING_VERTICAL, ";&:last-child{margin-bottom:0;}}", size === 'lg' && /*#__PURE__*/(0, _core.css)(GridItemWrap, "{margin-bottom:24px;.", labelCls, "{padding-top:6px;}};label:FormWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0Zvcm0vc3R5bGUvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9KZSIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Gb3JtL3N0eWxlL2luZGV4LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBtZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5cbmltcG9ydCBTdmdJY29uIGZyb20gJ3NyYy9jb21wb25lbnRzL1N2Z0ljb24nO1xuaW1wb3J0IHsgUm93LCBDb2wgfSBmcm9tICdzcmMvY29tcG9uZW50cy9HcmlkJztcbmltcG9ydCBDb21iaW5lLCB7IENvbWJpbmVQcm9wcyB9IGZyb20gJ3NyYy9jb21wb25lbnRzL0NvbWJpbmUnO1xuaW1wb3J0IGNvbmZpZyBmcm9tICdzcmMvY29uZmlnJztcbmltcG9ydCB7IERlc2lnblRva2VuLCBzV3JhcCB9IGZyb20gJ3NyYy9zdHlsZSc7XG5cbmNvbnN0IHsgcHJlZml4Q2xzOiBfcHJlZml4Q2xzIH0gPSBjb25maWc7XG5jb25zdCBwcmVmaXhDbHMgPSBfcHJlZml4Q2xzICsgJy1mb3JtJztcbmNvbnN0IGl0ZW1DbHMgPSBwcmVmaXhDbHMgKyAnLWl0ZW0nO1xuY29uc3QgbGFiZWxDbHMgPSBwcmVmaXhDbHMgKyAnLWxhYmVsJztcbmNvbnN0IGNvbnRyb2xsZXJDbHMgPSBwcmVmaXhDbHMgKyAnLWNvbnRyb2xsZXInO1xuY29uc3QgZ3JvdXBDbHMgPSBwcmVmaXhDbHMgKyAnLWdyb3VwJztcbmNvbnN0IGdyb3VwVGl0bGVDbHMgPSBncm91cENscyArICctdGl0bGUnO1xuY29uc3QgdGlwQ2xzID0gcHJlZml4Q2xzICsgJy10aXAnO1xuZXhwb3J0IGNvbnN0IHRpcEljb25DbHMgPSB0aXBDbHMgKyAnLWljb24nO1xuZXhwb3J0IGNvbnN0IHRpcENvbnRlbnRDbHMgPSB0aXBDbHMgKyAnLWNvbnRlbnQnO1xuY29uc3Qgc3ViQXJlYUNscyA9IHByZWZpeENscyArICctc3ViLWFyZWEnO1xuXG5leHBvcnQgY29uc3QgR3JpZEl0ZW1XcmFwID0gc3R5bGVkKFxuICAgIHNXcmFwKHtcbiAgICAgICAgY2xhc3NOYW1lOiBpdGVtQ2xzXG4gICAgfSkoc3R5bGVkKFJvdylgXG4gICAgICAgIC8qIGVtcHR5ICovXG4gICAgYClcbikoKTtcblxuZXhwb3J0IGNvbnN0IEdyaWRMYWJlbFdyYXAgPSBzV3JhcCh7XG4gICAgY2xhc3NOYW1lOiBsYWJlbENsc1xufSkoXG4gICAgc3R5bGVkKENvbCkocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBwYWRkaW5nLXRvcDogNHB4O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgICAgICAgICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XG4gICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfREVGQVVMVF9MSUdIVH07XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBHcmlkQ29udHJvbGxlcldyYXAgPSBzV3JhcCh7XG4gICAgY2xhc3NOYW1lOiBjb250cm9sbGVyQ2xzXG59KShzdHlsZWQoQ29sKWBcbiAgICAvKiBlbXB0eSAqL1xuYCk7XG5cbmV4cG9ydCBjb25zdCBJdGVtV3JhcCA9IHNXcmFwKHtcbiAgICBjbGFzc05hbWU6IGl0ZW1DbHNcbn0pKHN0eWxlZCgnZGl2JylgXG4gICAgLyogZW1wdHkgKi9cbmApO1xuXG5leHBvcnQgY29uc3QgTGFiZWxXcmFwID0gc1dyYXAoe1xuICAgIGNsYXNzTmFtZTogbGFiZWxDbHNcbn0pKFxuICAgIHN0eWxlZCgnZGl2JykocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMjBweDtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiAke0RULlRfVFlQT19GT05UX1dFSUdIVF9CT0xEfTtcbiAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9ERUZBVUxUX0RBUkt9O1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogJHtEVC5UX1NQQUNJTkdfQ09NTU9OX1NNfTtcbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IENvbW1lbnRXcmFwID0gc1dyYXAoKShcbiAgICBzdHlsZWQuZGl2KHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAke0RULlRfU1BBQ0lOR19DT01NT05fWFN9O1xuICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX1JFTUFSS19EQVJLfTtcbiAgICAgICAgICAgIC8qIG92ZXJ3cml0ZSBpbmhlcml0ICovXG4gICAgICAgICAgICBmb250LXdlaWdodDogbm9ybWFsO1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgQ29udHJvbGxlcldyYXAgPSBzV3JhcCh7XG4gICAgY2xhc3NOYW1lOiBjb250cm9sbGVyQ2xzXG59KShzdHlsZWQoJ2RpdicpYFxuICAgIC8qIGVtcHR5ICovXG5gKTtcblxuZXhwb3J0IGNvbnN0IEdyb3VwV3JhcCA9IHNXcmFwKHtcbiAgICBjbGFzc05hbWU6IGdyb3VwQ2xzXG59KShzdHlsZWQoJ2RpdicpYFxuICAgICYgKyAmIHtcbiAgICAgICAgbWFyZ2luLXRvcDogMjRweDtcbiAgICB9XG5gKTtcblxuZXhwb3J0IGNvbnN0IEdyb3VwVGl0bGUgPSBzV3JhcCh7XG4gICAgY2xhc3NOYW1lOiBncm91cFRpdGxlQ2xzXG59KShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMjJweDtcbiAgICAgICAgICAgIHBhZGRpbmc6IDEycHggMDtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDI0cHg7XG5cbiAgICAgICAgICAgICR7Y3NzYFxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJHtEVC5UX0NPTE9SX0xJTkVfREVGQVVMVF9EQVJLfTtcbiAgICAgICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfREVGQVVMVF9EQVJLfTtcbiAgICAgICAgICAgIGB9O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgRm9ybVdyYXAgPSBzV3JhcDx7IHNpemU6IHN0cmluZyB9Pih7XG4gICAgY2xhc3NOYW1lOiBwcmVmaXhDbHNcbn0pKFxuICAgIHN0eWxlZCgnZm9ybScpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgc2l6ZSxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcblxuICAgICAgICAgICAgLiR7aXRlbUNsc30ge1xuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206ICR7RFQuVF9GT1JNX0lURU1fU1BBQ0lOR19WRVJUSUNBTH07XG4gICAgICAgICAgICAgICAgJjpsYXN0LWNoaWxkIHtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAke3NpemUgPT09ICdsZycgJiZcbiAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICAke0dyaWRJdGVtV3JhcH0ge1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyNHB4O1xuICAgICAgICAgICAgICAgICAgICAuJHtsYWJlbENsc30ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy10b3A6IDZweDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGB9O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5jb25zdCBJY29uQ29sb3JNYXA6IHsgW2tleTogc3RyaW5nXTogRGVzaWduVG9rZW4gfSA9IHtcbiAgICBzdWNjZXNzOiAnVF9DT0xPUl9CR19TVUNDRVNTX0RBUksnLFxuICAgIHdhcm5pbmc6ICdUX0NPTE9SX0JHX1dBUk5JTkdfREFSSycsXG4gICAgZXJyb3I6ICdUX0NPTE9SX0JHX0VSUk9SX0RBUksnLFxuICAgIGxvYWRpbmc6ICdUX0NPTE9SX1RFWFRfUFJJTUFSWV9ERUZBVUxUJ1xufTtcbmNvbnN0IENvbG9yTWFwOiB7IFtrZXk6IHN0cmluZ106IERlc2lnblRva2VuIH0gPSB7XG4gICAgZXJyb3I6ICdUX0NPTE9SX1RFWFRfRVJST1InXG59O1xuXG5leHBvcnQgY29uc3QgVGlwID0gc1dyYXA8eyBzdGF0dXM6IHN0cmluZyB9ICYgQ29tYmluZVByb3BzPih7IGNsYXNzTmFtZTogdGlwQ2xzIH0pKFxuICAgIHN0eWxlZChDb21iaW5lKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHN0YXR1cyxcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG4gICAgICAgIGNvbnN0IGljb25Db2xvckRUOiBEZXNpZ25Ub2tlbiA9IEljb25Db2xvck1hcFtzdGF0dXNdIHx8ICdUX0NPTE9SX1RFWFRfUFJJTUFSWV9ERUZBVUxUJztcbiAgICAgICAgY29uc3QgY29sb3JEdDogRGVzaWduVG9rZW4gPSBDb2xvck1hcFtzdGF0dXNdIHx8ICdUX0NPTE9SX1RFWFRfREVGQVVMVF9MSUdIVCc7XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBtYXJnaW4tdG9wOiA0cHg7XG4gICAgICAgICAgICBjb2xvcjogJHtEVFtjb2xvckR0XX07XG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGJhc2VsaW5lO1xuICAgICAgICAgICAgLiR7dGlwQ29udGVudENsc30ge1xuICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLiR7dGlwSWNvbkNsc30ge1xuICAgICAgICAgICAgICAgIGZpbGw6ICR7RFRbaWNvbkNvbG9yRFRdfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IFJlcXVpcmVkTGFiZWwgPSBzV3JhcCgpKFxuICAgIHN0eWxlZC5zcGFuKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiA0cHg7XG4gICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfRVJST1J9O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgSGVscEljb24gPSBzV3JhcDx7IHR5cGU6IHN0cmluZzsgc2l6ZT86IHN0cmluZyB9PigpKFxuICAgIHN0eWxlZChTdmdJY29uKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogOHB4O1xuICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgICAgICAgICAgIGZpbGw6ICR7RFQuVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVH07XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmNvbnN0IFN0YXR1c0ljb25XaXRob3V0TWVtbyA9ICh7IHN0YXR1cywgLi4ucmVzdCB9OiB7IHN0YXR1czogc3RyaW5nOyBzcGluPzogYm9vbGVhbiB9KSA9PiB7XG4gICAgY29uc3QgaWNvblR5cGUgPVxuICAgICAgICB7XG4gICAgICAgICAgICBzdWNjZXNzOiAndGljay1jaXJjbGUtZmlsbGVkJyxcbiAgICAgICAgICAgIHdhcm5pbmc6ICdleGNsYW1hdGlvbi1jaXJjbGUtZmlsbGVkJyxcbiAgICAgICAgICAgIGVycm9yOiAnY3Jvc3MtY2lyY2xlLWZpbGxlZCcsXG4gICAgICAgICAgICBsb2FkaW5nOiAncmluZy1sb2FkaW5nJ1xuICAgICAgICB9W3N0YXR1c10gfHwgJ2luZm8tY2lyY2xlLWZpbGxlZCc7XG4gICAgcmV0dXJuIDxTdmdJY29uIHR5cGU9e2ljb25UeXBlfSBjbGFzc05hbWU9e3RpcEljb25DbHN9IHsuLi5yZXN0fSAvPjtcbn07XG5jb25zdCBTdGF0dXNJY29uID0gbWVtbyhTdGF0dXNJY29uV2l0aG91dE1lbW8pO1xuXG5leHBvcnQgeyBTdGF0dXNJY29uIH07XG5cbmV4cG9ydCBjb25zdCBTdWJBcmVhV3JhcCA9IHNXcmFwKHsgY2xhc3NOYW1lOiBzdWJBcmVhQ2xzIH0pKFxuICAgIHN0eWxlZC5kaXYocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgcGFkZGluZzogMTZweDtcbiAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICR7RFQuVF9DT0xPUl9MSU5FX0RFRkFVTFRfTElHSFR9O1xuICAgICAgICAgICAgYmFja2dyb3VuZDogJHtEVC5UX0NPTE9SX0JHX0RFRkFVTFRfREFSS307XG5cbiAgICAgICAgICAgICogKyAmIHtcbiAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAxMnB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJiAuJHtpdGVtQ2xzfSB7XG4gICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9KVxuKTtcbiJdfQ== */")), ";;label:FormWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0Zvcm0vc3R5bGUvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTBJa0IiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRm9ybS9zdHlsZS9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgbWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuXG5pbXBvcnQgU3ZnSWNvbiBmcm9tICdzcmMvY29tcG9uZW50cy9TdmdJY29uJztcbmltcG9ydCB7IFJvdywgQ29sIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvR3JpZCc7XG5pbXBvcnQgQ29tYmluZSwgeyBDb21iaW5lUHJvcHMgfSBmcm9tICdzcmMvY29tcG9uZW50cy9Db21iaW5lJztcbmltcG9ydCBjb25maWcgZnJvbSAnc3JjL2NvbmZpZyc7XG5pbXBvcnQgeyBEZXNpZ25Ub2tlbiwgc1dyYXAgfSBmcm9tICdzcmMvc3R5bGUnO1xuXG5jb25zdCB7IHByZWZpeENsczogX3ByZWZpeENscyB9ID0gY29uZmlnO1xuY29uc3QgcHJlZml4Q2xzID0gX3ByZWZpeENscyArICctZm9ybSc7XG5jb25zdCBpdGVtQ2xzID0gcHJlZml4Q2xzICsgJy1pdGVtJztcbmNvbnN0IGxhYmVsQ2xzID0gcHJlZml4Q2xzICsgJy1sYWJlbCc7XG5jb25zdCBjb250cm9sbGVyQ2xzID0gcHJlZml4Q2xzICsgJy1jb250cm9sbGVyJztcbmNvbnN0IGdyb3VwQ2xzID0gcHJlZml4Q2xzICsgJy1ncm91cCc7XG5jb25zdCBncm91cFRpdGxlQ2xzID0gZ3JvdXBDbHMgKyAnLXRpdGxlJztcbmNvbnN0IHRpcENscyA9IHByZWZpeENscyArICctdGlwJztcbmV4cG9ydCBjb25zdCB0aXBJY29uQ2xzID0gdGlwQ2xzICsgJy1pY29uJztcbmV4cG9ydCBjb25zdCB0aXBDb250ZW50Q2xzID0gdGlwQ2xzICsgJy1jb250ZW50JztcbmNvbnN0IHN1YkFyZWFDbHMgPSBwcmVmaXhDbHMgKyAnLXN1Yi1hcmVhJztcblxuZXhwb3J0IGNvbnN0IEdyaWRJdGVtV3JhcCA9IHN0eWxlZChcbiAgICBzV3JhcCh7XG4gICAgICAgIGNsYXNzTmFtZTogaXRlbUNsc1xuICAgIH0pKHN0eWxlZChSb3cpYFxuICAgICAgICAvKiBlbXB0eSAqL1xuICAgIGApXG4pKCk7XG5cbmV4cG9ydCBjb25zdCBHcmlkTGFiZWxXcmFwID0gc1dyYXAoe1xuICAgIGNsYXNzTmFtZTogbGFiZWxDbHNcbn0pKFxuICAgIHN0eWxlZChDb2wpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgcGFkZGluZy10b3A6IDRweDtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgd29yZC1icmVhazogYnJlYWstYWxsO1xuICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfTElHSFR9O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5leHBvcnQgY29uc3QgR3JpZENvbnRyb2xsZXJXcmFwID0gc1dyYXAoe1xuICAgIGNsYXNzTmFtZTogY29udHJvbGxlckNsc1xufSkoc3R5bGVkKENvbClgXG4gICAgLyogZW1wdHkgKi9cbmApO1xuXG5leHBvcnQgY29uc3QgSXRlbVdyYXAgPSBzV3JhcCh7XG4gICAgY2xhc3NOYW1lOiBpdGVtQ2xzXG59KShzdHlsZWQoJ2RpdicpYFxuICAgIC8qIGVtcHR5ICovXG5gKTtcblxuZXhwb3J0IGNvbnN0IExhYmVsV3JhcCA9IHNXcmFwKHtcbiAgICBjbGFzc05hbWU6IGxhYmVsQ2xzXG59KShcbiAgICBzdHlsZWQoJ2RpdicpKHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcblxuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgICAgICAgICBmb250LXdlaWdodDogJHtEVC5UX1RZUE9fRk9OVF9XRUlHSFRfQk9MRH07XG4gICAgICAgICAgICBjb2xvcjogJHtEVC5UX0NPTE9SX1RFWFRfREVGQVVMVF9EQVJLfTtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206ICR7RFQuVF9TUEFDSU5HX0NPTU1PTl9TTX07XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBDb21tZW50V3JhcCA9IHNXcmFwKCkoXG4gICAgc3R5bGVkLmRpdihwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgICAgICAgICAgbWFyZ2luLXRvcDogJHtEVC5UX1NQQUNJTkdfQ09NTU9OX1hTfTtcbiAgICAgICAgICAgIGNvbG9yOiAke0RULlRfQ09MT1JfVEVYVF9SRU1BUktfREFSS307XG4gICAgICAgICAgICAvKiBvdmVyd3JpdGUgaW5oZXJpdCAqL1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IENvbnRyb2xsZXJXcmFwID0gc1dyYXAoe1xuICAgIGNsYXNzTmFtZTogY29udHJvbGxlckNsc1xufSkoc3R5bGVkKCdkaXYnKWBcbiAgICAvKiBlbXB0eSAqL1xuYCk7XG5cbmV4cG9ydCBjb25zdCBHcm91cFdyYXAgPSBzV3JhcCh7XG4gICAgY2xhc3NOYW1lOiBncm91cENsc1xufSkoc3R5bGVkKCdkaXYnKWBcbiAgICAmICsgJiB7XG4gICAgICAgIG1hcmdpbi10b3A6IDI0cHg7XG4gICAgfVxuYCk7XG5cbmV4cG9ydCBjb25zdCBHcm91cFRpdGxlID0gc1dyYXAoe1xuICAgIGNsYXNzTmFtZTogZ3JvdXBUaXRsZUNsc1xufSkoXG4gICAgc3R5bGVkKCdkaXYnKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG5cbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIycHg7XG4gICAgICAgICAgICBwYWRkaW5nOiAxMnB4IDA7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyNHB4O1xuXG4gICAgICAgICAgICAke2Nzc2BcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICR7RFQuVF9DT0xPUl9MSU5FX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0RFRkFVTFRfREFSS307XG4gICAgICAgICAgICBgfTtcbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IEZvcm1XcmFwID0gc1dyYXA8eyBzaXplOiBzdHJpbmcgfT4oe1xuICAgIGNsYXNzTmFtZTogcHJlZml4Q2xzXG59KShcbiAgICBzdHlsZWQoJ2Zvcm0nKShwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHNpemUsXG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuXG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBmb250LXNpemU6IDEycHg7XG5cbiAgICAgICAgICAgIC4ke2l0ZW1DbHN9IHtcbiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAke0RULlRfRk9STV9JVEVNX1NQQUNJTkdfVkVSVElDQUx9O1xuICAgICAgICAgICAgICAgICY6bGFzdC1jaGlsZCB7XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHtzaXplID09PSAnbGcnICYmXG4gICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgJHtHcmlkSXRlbVdyYXB9IHtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMjRweDtcbiAgICAgICAgICAgICAgICAgICAgLiR7bGFiZWxDbHN9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOiA2cHg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBgfTtcbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuY29uc3QgSWNvbkNvbG9yTWFwOiB7IFtrZXk6IHN0cmluZ106IERlc2lnblRva2VuIH0gPSB7XG4gICAgc3VjY2VzczogJ1RfQ09MT1JfQkdfU1VDQ0VTU19EQVJLJyxcbiAgICB3YXJuaW5nOiAnVF9DT0xPUl9CR19XQVJOSU5HX0RBUksnLFxuICAgIGVycm9yOiAnVF9DT0xPUl9CR19FUlJPUl9EQVJLJyxcbiAgICBsb2FkaW5nOiAnVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVCdcbn07XG5jb25zdCBDb2xvck1hcDogeyBba2V5OiBzdHJpbmddOiBEZXNpZ25Ub2tlbiB9ID0ge1xuICAgIGVycm9yOiAnVF9DT0xPUl9URVhUX0VSUk9SJ1xufTtcblxuZXhwb3J0IGNvbnN0IFRpcCA9IHNXcmFwPHsgc3RhdHVzOiBzdHJpbmcgfSAmIENvbWJpbmVQcm9wcz4oeyBjbGFzc05hbWU6IHRpcENscyB9KShcbiAgICBzdHlsZWQoQ29tYmluZSkocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBzdGF0dXMsXG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuICAgICAgICBjb25zdCBpY29uQ29sb3JEVDogRGVzaWduVG9rZW4gPSBJY29uQ29sb3JNYXBbc3RhdHVzXSB8fCAnVF9DT0xPUl9URVhUX1BSSU1BUllfREVGQVVMVCc7XG4gICAgICAgIGNvbnN0IGNvbG9yRHQ6IERlc2lnblRva2VuID0gQ29sb3JNYXBbc3RhdHVzXSB8fCAnVF9DT0xPUl9URVhUX0RFRkFVTFRfTElHSFQnO1xuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgbWFyZ2luLXRvcDogNHB4O1xuICAgICAgICAgICAgY29sb3I6ICR7RFRbY29sb3JEdF19O1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBiYXNlbGluZTtcbiAgICAgICAgICAgIC4ke3RpcENvbnRlbnRDbHN9IHtcbiAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMjBweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC4ke3RpcEljb25DbHN9IHtcbiAgICAgICAgICAgICAgICBmaWxsOiAke0RUW2ljb25Db2xvckRUXX07XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBSZXF1aXJlZExhYmVsID0gc1dyYXAoKShcbiAgICBzdHlsZWQuc3Bhbihwcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRoZW1lOiB7IGRlc2lnblRva2VuczogRFQgfVxuICAgICAgICB9ID0gcHJvcHM7XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogNHB4O1xuICAgICAgICAgICAgY29sb3I6ICR7RFQuVF9DT0xPUl9URVhUX0VSUk9SfTtcbiAgICAgICAgYDtcbiAgICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IEhlbHBJY29uID0gc1dyYXA8eyB0eXBlOiBzdHJpbmc7IHNpemU/OiBzdHJpbmcgfT4oKShcbiAgICBzdHlsZWQoU3ZnSWNvbikocHJvcHMgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB0aGVtZTogeyBkZXNpZ25Ub2tlbnM6IERUIH1cbiAgICAgICAgfSA9IHByb3BzO1xuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDhweDtcbiAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gICAgICAgICAgICBmaWxsOiAke0RULlRfQ09MT1JfVEVYVF9QUklNQVJZX0RFRkFVTFR9O1xuICAgICAgICBgO1xuICAgIH0pXG4pO1xuXG5jb25zdCBTdGF0dXNJY29uV2l0aG91dE1lbW8gPSAoeyBzdGF0dXMsIC4uLnJlc3QgfTogeyBzdGF0dXM6IHN0cmluZzsgc3Bpbj86IGJvb2xlYW4gfSkgPT4ge1xuICAgIGNvbnN0IGljb25UeXBlID1cbiAgICAgICAge1xuICAgICAgICAgICAgc3VjY2VzczogJ3RpY2stY2lyY2xlLWZpbGxlZCcsXG4gICAgICAgICAgICB3YXJuaW5nOiAnZXhjbGFtYXRpb24tY2lyY2xlLWZpbGxlZCcsXG4gICAgICAgICAgICBlcnJvcjogJ2Nyb3NzLWNpcmNsZS1maWxsZWQnLFxuICAgICAgICAgICAgbG9hZGluZzogJ3JpbmctbG9hZGluZydcbiAgICAgICAgfVtzdGF0dXNdIHx8ICdpbmZvLWNpcmNsZS1maWxsZWQnO1xuICAgIHJldHVybiA8U3ZnSWNvbiB0eXBlPXtpY29uVHlwZX0gY2xhc3NOYW1lPXt0aXBJY29uQ2xzfSB7Li4ucmVzdH0gLz47XG59O1xuY29uc3QgU3RhdHVzSWNvbiA9IG1lbW8oU3RhdHVzSWNvbldpdGhvdXRNZW1vKTtcblxuZXhwb3J0IHsgU3RhdHVzSWNvbiB9O1xuXG5leHBvcnQgY29uc3QgU3ViQXJlYVdyYXAgPSBzV3JhcCh7IGNsYXNzTmFtZTogc3ViQXJlYUNscyB9KShcbiAgICBzdHlsZWQuZGl2KHByb3BzID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgdGhlbWU6IHsgZGVzaWduVG9rZW5zOiBEVCB9XG4gICAgICAgIH0gPSBwcm9wcztcbiAgICAgICAgcmV0dXJuIGNzc2BcbiAgICAgICAgICAgIHBhZGRpbmc6IDE2cHg7XG4gICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAke0RULlRfQ09MT1JfTElORV9ERUZBVUxUX0xJR0hUfTtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7RFQuVF9DT0xPUl9CR19ERUZBVUxUX0RBUkt9O1xuXG4gICAgICAgICAgICAqICsgJiB7XG4gICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMTJweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICYgLiR7aXRlbUNsc30ge1xuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDE2cHg7XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfSlcbik7XG4iXX0= */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.FormWrap = FormWrap;
var IconColorMap = {
  success: 'T_COLOR_BG_SUCCESS_DARK',
  warning: 'T_COLOR_BG_WARNING_DARK',
  error: 'T_COLOR_BG_ERROR_DARK',
  loading: 'T_COLOR_TEXT_PRIMARY_DEFAULT'
};
var ColorMap = {
  error: 'T_COLOR_TEXT_ERROR'
};
var Tip = (0, _style.sWrap)({
  className: tipCls
})(( /*#__PURE__*/0, _styledBase.default)(_Combine.default, {
  target: "evck06b11",
  label: "Tip"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var status = props.status,
      DT = props.theme.designTokens;
  var iconColorDT = IconColorMap[status] || 'T_COLOR_TEXT_PRIMARY_DEFAULT';
  var colorDt = ColorMap[status] || 'T_COLOR_TEXT_DEFAULT_LIGHT';
  return /*#__PURE__*/(0, _core.css)("margin-top:4px;color:", DT[colorDt], ";display:flex;align-items:baseline;.", tipContentCls, "{line-height:20px;}.", tipIconCls, "{fill:", DT[iconColorDT], ";};label:Tip;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.Tip = Tip;
var RequiredLabel = (0, _style.sWrap)()((0, _styledBase.default)("span", {
  target: "evck06b12",
  label: "RequiredLabel"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var DT = props.theme.designTokens;
  return /*#__PURE__*/(0, _core.css)("margin-left:4px;color:", DT.T_COLOR_TEXT_ERROR, ";;label:RequiredLabel;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.RequiredLabel = RequiredLabel;
var HelpIcon = (0, _style.sWrap)()(( /*#__PURE__*/0, _styledBase.default)(_SvgIcon.default, {
  target: "evck06b13",
  label: "HelpIcon"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var DT = props.theme.designTokens;
  return /*#__PURE__*/(0, _core.css)("margin-left:8px;vertical-align:middle;fill:", DT.T_COLOR_TEXT_PRIMARY_DEFAULT, ";;label:HelpIcon;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.HelpIcon = HelpIcon;

var StatusIconWithoutMemo = function StatusIconWithoutMemo(_ref) {
  (0, _newArrowCheck2.default)(this, _this);
  var status = _ref.status,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var iconType = {
    success: 'tick-circle-filled',
    warning: 'exclamation-circle-filled',
    error: 'cross-circle-filled',
    loading: 'ring-loading'
  }[status] || 'info-circle-filled';
  return /*#__PURE__*/_react.default.createElement(_SvgIcon.default, (0, _extends2.default)({
    type: iconType,
    className: tipIconCls
  }, rest));
}.bind(void 0);

var StatusIcon = /*#__PURE__*/(0, _react.memo)(StatusIconWithoutMemo);
exports.StatusIcon = StatusIcon;
var SubAreaWrap = (0, _style.sWrap)({
  className: subAreaCls
})((0, _styledBase.default)("div", {
  target: "evck06b14",
  label: "SubAreaWrap"
})(function (props) {
  (0, _newArrowCheck2.default)(this, _this);
  var DT = props.theme.designTokens;
  return /*#__PURE__*/(0, _core.css)("padding:16px;border:1px solid ", DT.T_COLOR_LINE_DEFAULT_LIGHT, ";background:", DT.T_COLOR_BG_DEFAULT_DARK, ";* + &{margin-top:12px;}& .", itemCls, "{margin-bottom:16px;};label:SubAreaWrap;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
}.bind(void 0), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.SubAreaWrap = SubAreaWrap;