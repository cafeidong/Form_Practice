"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _date = require("../util/date");

var _classnames = _interopRequireDefault(require("../util/classnames"));

var _CalendarContext = _interopRequireWildcard(require("../CalendarContext"));

var _TBody = _interopRequireDefault(require("./TBody"));

var _useCls = _interopRequireDefault(require("../useCls"));

var _getChangedValue = _interopRequireDefault(require("./getChangedValue"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var C_COL = 7;
var C_ROW = 6;

var getDays = function getDays(v, cls, activeV, now, disabledDate, rangeValue) {
  v = new Date(+v); // 月天数

  var daysInMonth = (0, _date.getDaysInMonth)(v); // 月初

  var firstDayOfMonth = (0, _date.set)(v, 1, 'date'); // 周几，0 为周日

  var day = firstDayOfMonth.getDay(); // 面板的第一天

  var firstDayOfPanel = new Date(+firstDayOfMonth - day * 1000 * 60 * 60 * 24);
  var activeVString = (0, _date.format)(activeV, 'YYYYMMDD');
  var nowVString = (0, _date.format)(now, 'YYYYMMDD');
  var min = day;
  var max = day + daysInMonth; // 日期合集

  var panelInfo = [];

  for (var i = 0; i < C_ROW; i++) {
    for (var j = 0; j < C_COL; j++) {
      var index = i * C_COL + j;
      var t = (0, _date.add)(firstDayOfPanel, index, 'date');
      var tString = (0, _date.format)(t, 'YYYYMMDD');
      var active = tString === activeVString;
      var current = index < min ? 'prev' : index >= max ? 'next' : 'current';
      var disabled = disabledDate === null || disabledDate === void 0 ? void 0 : disabledDate(t, activeV);
      var isNow = tString === nowVString;
      var date = t.getDate();
      var month = t.getMonth();
      var year = t.getFullYear();
      var className = (0, _classnames.default)(active && cls.active, disabled && cls.disabled, isNow && cls.now, current === 'prev' && cls.prev, current === 'next' && cls.next);

      if (rangeValue) {
        var rangeStart = rangeValue === null || rangeValue === void 0 ? void 0 : rangeValue[0];
        var rangeEnd = rangeValue === null || rangeValue === void 0 ? void 0 : rangeValue[1];
        var startOrEndTag = false;

        if (rangeStart) {
          var rangeStartString = (0, _date.format)(rangeStart, 'YYYYMMDD');

          if (tString === rangeStartString) {
            className = (0, _classnames.default)(className, cls.rangeFirst);
            startOrEndTag = true;
          }
        }

        if (rangeEnd) {
          var rangeEndString = (0, _date.format)(rangeEnd, 'YYYYMMDD');

          if (tString === rangeEndString) {
            className = (0, _classnames.default)(className, cls.rangeLast);
            startOrEndTag = true;
          }
        }

        if (startOrEndTag && (!rangeStart || !rangeEnd)) {
          className = (0, _classnames.default)(className, cls.rangeUnclosed);
        }

        if (!startOrEndTag && rangeStart && rangeEnd && +rangeStart <= +rangeEnd) {
          var tTS = +t;

          if (tTS > +rangeStart && tTS < +rangeEnd) {
            className = (0, _classnames.default)(className, cls.rangeMiddle);
          }
        }
      }

      panelInfo.push({
        value: {
          year: year,
          month: month,
          date: date
        },
        children: t.getDate(),
        current: current,
        active: active,
        disabled: disabled,
        className: className
      });
    }
  }

  return panelInfo;
};

var defaultWeekdays = _CalendarContext.DefaultContext.locale.weekdays;

var DateBody = function DateBody(_ref) {
  var value = _ref.value,
      onChange = _ref.onChange,
      rangeValue = _ref.rangeValue,
      current = _ref.current,
      onCurrentChange = _ref.onCurrentChange,
      now = _ref.now,
      disabledDate = _ref.disabledDate;

  var _useContext = (0, _react.useContext)(_CalendarContext.default),
      locale = _useContext.locale,
      onChangeWhenPrevNextClick = _useContext.onChangeWhenPrevNextClick,
      disabledPrevNextClickWhenDisabled = _useContext.disabledPrevNextClickWhenDisabled;

  var weekdays = (locale === null || locale === void 0 ? void 0 : locale.weekdays) || defaultWeekdays; // use ref to reduce reRender

  var currentRef = (0, _react.useRef)(current);
  var valueRef = (0, _react.useRef)(value);
  (0, _react.useEffect)(function () {
    currentRef.current = current;
    valueRef.current = value;
  }, [current, value]);
  var cls = (0, _useCls.default)();
  var panelInfo = (0, _react.useMemo)(function () {
    return getDays(current, cls, value, now, disabledDate, rangeValue);
  }, [current, cls, value, now, disabledDate, rangeValue]);
  var onDateClick = (0, _react.useCallback)(function (index) {
    var t = panelInfo[index];
    if (t.disabled && disabledPrevNextClickWhenDisabled) return;
    var changedValue = (0, _getChangedValue.default)(t.value, currentRef.current, valueRef.current);
    if (t.current !== 'current') onCurrentChange(changedValue);
    if (t.disabled) return;
    if (onChangeWhenPrevNextClick || t.current === 'current') onChange(changedValue);
  }, [disabledPrevNextClickWhenDisabled, onChange, onChangeWhenPrevNextClick, onCurrentChange, panelInfo]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: cls.table
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: cls.head
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: cls.row
  }, weekdays.map(function (v, i) {
    return /*#__PURE__*/_react.default.createElement("div", {
      key: i,
      className: cls.cell
    }, v);
  }))), /*#__PURE__*/_react.default.createElement(_TBody.default, {
    cells: panelInfo,
    onCellClick: onDateClick,
    col: C_COL,
    row: C_ROW,
    mode: 'date'
  }));
};

var _default = /*#__PURE__*/(0, _react.memo)(DateBody);

exports.default = _default;